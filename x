diff --git a/assets/vendor/carousel.js b/assets/vendor/carousel.js
deleted file mode 100644
index 722f20c..0000000
--- a/assets/vendor/carousel.js
+++ /dev/null
@@ -1,600 +0,0 @@
-const Carousel = {
-  mounted() {
-    try {
-      this.initializeElements();
-      this.setupState();
-      this.setupEventListeners();
-      this.setupImageLoadHandling();
-      this.setupKeyboardNavigation();
-      this.setupTouchNavigation();
-      this.setupResizeHandling();
-      this.showInitialSlide();
-      this.setupAutoplay();
-      this.setupIntersectionObserver();
-
-      this.handleEvent("select-slide", ({ index }) => this.selectSlide(index));
-    } catch (error) {
-      console.error(`Carousel initialization error: ${error.message}`);
-    }
-  },
-
-  disconnected() {
-    this.cleanupEventListeners();
-    this.stopAutoplay();
-    if (this.intersectionObserver) {
-      this.intersectionObserver.disconnect();
-    }
-  },
-
-  initializeElements() {
-    this.slides = this.el.querySelectorAll(".slide");
-    if (!this.slides.length) {
-      throw new Error("No slides found in carousel");
-    }
-
-    this.indicators = this.el.querySelectorAll(".carousel-indicator");
-    this.prevButtons = [
-      this.el.querySelector(`#${this.el.id}-carousel-prev`),
-    ].filter(Boolean);
-    this.nextButtons = [
-      this.el.querySelector(`#${this.el.id}-carousel-next`),
-    ].filter(Boolean);
-    this.imageLoaders = this.el.querySelectorAll(
-      `[id^="${this.el.id}-carousel-slide-image-"]`,
-    );
-
-    this.prevButtons.forEach((button) => {
-      if (!button.getAttribute("aria-label")) {
-        button.setAttribute("aria-label", "Previous slide");
-      }
-    });
-
-    this.nextButtons.forEach((button) => {
-      if (!button.getAttribute("aria-label")) {
-        button.setAttribute("aria-label", "Next slide");
-      }
-    });
-
-    if (!this.el.getAttribute("role")) {
-      this.el.setAttribute("role", "region");
-      this.el.setAttribute("aria-roledescription", "carousel");
-    }
-
-    // Set sanitized ARIA attributes for each slide
-    this.slides.forEach((slide, index) => {
-      slide.setAttribute("role", "group");
-      slide.setAttribute("aria-roledescription", "slide");
-      slide.setAttribute(
-        "aria-label",
-        `Slide ${this.sanitizeNumber(index) + 1} of ${this.sanitizeNumber(this.slides.length)}`,
-      );
-    });
-  },
-
-  setupState() {
-    // Validate active index strictly
-    const rawIndex = this.el.dataset.activeIndex;
-    this.activeIndex = /^\d+$/.test(rawIndex)
-      ? Math.max(1, Math.min(parseInt(rawIndex, 10), this.slides.length))
-      : 1;
-
-    this.totalSlides = this.slides.length;
-
-    // Validate class names to prevent injection
-    this.classes = {
-      activeSlide:
-        this.sanitizeClassName(this.el.dataset.activeSlideClass) ||
-        "active-slide z-10",
-      hiddenSlide:
-        this.sanitizeClassName(this.el.dataset.hiddenSlideClass) || "opacity-0",
-      activeIndicator:
-        this.sanitizeClassName(this.el.dataset.activeIndicatorClass) ||
-        "active-indicator",
-    };
-
-    // Validate boolean values
-    this.shouldAutoplay = this.el.dataset.autoplay === "true";
-
-    // Validate numeric values and add a maximum for safety
-    const rawInterval = parseInt(this.el.dataset.autoplayInterval, 10);
-    this.autoplayInterval =
-      !isNaN(rawInterval) && rawInterval > 0
-        ? Math.min(rawInterval, 30000)
-        : 5000;
-
-    this.autoplayTimer = null;
-    this.userInteractionDelay = 7000;
-    this.userInteractionTimeout = null;
-    this.isHovered = false;
-    this.isTouching = false;
-    this.touchStartX = 0;
-    this.touchEndX = 0;
-    this.minSwipeDistance = 50;
-  },
-
-  setupEventListeners() {
-    this.eventHandlers = {
-      prevClick: (e) => {
-        this.handleUserInteraction();
-        this.handlePrevClick(e);
-      },
-      nextClick: (e) => {
-        this.handleUserInteraction();
-        this.handleNextClick(e);
-      },
-      indicatorClick: (index) => {
-        this.handleUserInteraction();
-        this.handleIndicatorClick(index + 1);
-      },
-      mouseEnter: () => {
-        this.isHovered = true;
-        if (this.shouldAutoplay && this.el.dataset.pauseOnHover !== "false") {
-          this.stopAutoplay();
-        }
-      },
-      mouseLeave: () => {
-        this.isHovered = false;
-        if (
-          this.shouldAutoplay &&
-          !this.isTouching &&
-          this.el.dataset.pauseOnHover !== "false"
-        ) {
-          this.startAutoplay();
-        }
-      },
-      touchStart: (e) => {
-        this.isTouching = true;
-        this.touchStartX = e.touches[0].clientX;
-        if (this.shouldAutoplay) {
-          this.stopAutoplay();
-        }
-      },
-      touchMove: (e) => {
-        if (!this.isTouching) return;
-        this.touchEndX = e.touches[0].clientX;
-      },
-      touchEnd: () => {
-        this.isTouching = false;
-        this.handleSwipe();
-        if (this.shouldAutoplay && !this.isHovered) {
-          this.startAutoplay();
-        }
-      },
-      keyDown: (e) => this.handleKeyDown(e),
-      resize: () => this.handleResize(),
-    };
-
-    this.prevButtons.forEach((button) => {
-      button?.addEventListener("click", this.eventHandlers.prevClick);
-    });
-
-    this.nextButtons.forEach((button) => {
-      button?.addEventListener("click", this.eventHandlers.nextClick);
-    });
-
-    this.indicators?.forEach((indicator, index) => {
-      indicator.addEventListener("click", () =>
-        this.eventHandlers.indicatorClick(index),
-      );
-    });
-
-    if (this.el.dataset.pauseOnHover !== "false") {
-      this.el.addEventListener("mouseenter", this.eventHandlers.mouseEnter);
-      this.el.addEventListener("mouseleave", this.eventHandlers.mouseLeave);
-    }
-  },
-
-  cleanupEventListeners() {
-    this.prevButtons.forEach((button) => {
-      button?.removeEventListener("click", this.eventHandlers.prevClick);
-    });
-
-    this.nextButtons.forEach((button) => {
-      button?.removeEventListener("click", this.eventHandlers.nextClick);
-    });
-
-    this.indicators?.forEach((indicator, index) => {
-      indicator.removeEventListener("click", () =>
-        this.eventHandlers.indicatorClick(index),
-      );
-    });
-
-    this.el.removeEventListener("mouseenter", this.eventHandlers.mouseEnter);
-    this.el.removeEventListener("mouseleave", this.eventHandlers.mouseLeave);
-
-    document.removeEventListener("keydown", this.eventHandlers.keyDown);
-    window.removeEventListener("resize", this.eventHandlers.resize);
-
-    this.el.removeEventListener("touchstart", this.eventHandlers.touchStart);
-    this.el.removeEventListener("touchmove", this.eventHandlers.touchMove);
-    this.el.removeEventListener("touchend", this.eventHandlers.touchEnd);
-  },
-
-  setupKeyboardNavigation() {
-    document.addEventListener("keydown", this.eventHandlers.keyDown);
-  },
-
-  handleKeyDown(e) {
-    const hasFocus =
-      this.el.contains(document.activeElement) ||
-      document.activeElement === this.el;
-
-    if (!hasFocus) return;
-
-    if (e.key === "ArrowLeft" || e.key === "ArrowUp") {
-      this.handleUserInteraction();
-      this.handlePrevClick(e);
-      e.preventDefault();
-    } else if (e.key === "ArrowRight" || e.key === "ArrowDown") {
-      this.handleUserInteraction();
-      this.handleNextClick(e);
-      e.preventDefault();
-    }
-  },
-
-  setupTouchNavigation() {
-    this.el.addEventListener("touchstart", this.eventHandlers.touchStart, {
-      passive: true,
-    });
-    this.el.addEventListener("touchmove", this.eventHandlers.touchMove, {
-      passive: true,
-    });
-    this.el.addEventListener("touchend", this.eventHandlers.touchEnd);
-  },
-
-  handleSwipe() {
-    if (!this.touchStartX || !this.touchEndX) return;
-
-    const swipeDistance = this.touchEndX - this.touchStartX;
-
-    if (Math.abs(swipeDistance) > this.minSwipeDistance) {
-      if (swipeDistance > 0) {
-        this.handlePrevClick(new Event("swipe"));
-      } else {
-        this.handleNextClick(new Event("swipe"));
-      }
-    }
-
-    this.touchStartX = 0;
-    this.touchEndX = 0;
-  },
-
-  setupResizeHandling() {
-    window.addEventListener("resize", this.eventHandlers.resize);
-  },
-
-  handleResize() {
-    if (this.resizeTimeout) {
-      clearTimeout(this.resizeTimeout);
-    }
-
-    this.resizeTimeout = setTimeout(() => {
-      this.updateSlideSizes();
-    }, 100);
-  },
-
-  updateSlideSizes() {
-    const containerWidth = this.el.clientWidth;
-    this.slides.forEach((slide) => {
-      const img = slide.querySelector("img");
-      if (img) {
-        const aspectRatio = img.naturalHeight / img.naturalWidth;
-        img.style.maxHeight = `${containerWidth * aspectRatio}px`;
-      }
-    });
-  },
-
-  setupIntersectionObserver() {
-    if ("IntersectionObserver" in window && this.shouldAutoplay) {
-      this.intersectionObserver = new IntersectionObserver(
-        (entries) => {
-          entries.forEach((entry) => {
-            if (entry.isIntersecting) {
-              if (this.shouldAutoplay && !this.isHovered && !this.isTouching) {
-                this.startAutoplay();
-              }
-            } else {
-              this.stopAutoplay();
-            }
-          });
-        },
-        { threshold: 0.2 },
-      );
-      this.intersectionObserver.observe(this.el);
-    }
-  },
-
-  handlePrevClick(e) {
-    const targetIndex =
-      this.activeIndex > 1 ? this.activeIndex - 1 : this.totalSlides;
-    this.navigateToSlide(targetIndex);
-    e.stopPropagation();
-  },
-
-  handleNextClick(e) {
-    const targetIndex =
-      this.activeIndex < this.totalSlides ? this.activeIndex + 1 : 1;
-    this.navigateToSlide(targetIndex);
-    e.stopPropagation();
-  },
-
-  handleIndicatorClick(targetIndex) {
-    if (targetIndex === this.activeIndex) return;
-    this.navigateToSlide(targetIndex);
-  },
-
-  navigateToSlide(targetIndex) {
-    // Validate targetIndex strictly
-    if (
-      !/^\d+$/.test(String(targetIndex)) ||
-      targetIndex < 1 ||
-      targetIndex > this.totalSlides
-    ) {
-      console.warn(`Invalid slide index: ${targetIndex}`);
-      return;
-    }
-
-    const currentSlide = this.slides[this.activeIndex - 1];
-    const targetSlide = this.slides[targetIndex - 1];
-
-    if (!currentSlide || !targetSlide) {
-      console.warn("Cannot navigate: missing slide elements");
-      return;
-    }
-
-    const targetImage = targetSlide.querySelector("img");
-
-    this.announceSlideChange(targetIndex);
-
-    this.performSlideTransition(currentSlide, targetSlide, targetIndex);
-
-    if (
-      targetImage &&
-      !targetImage.complete &&
-      targetImage.naturalWidth === 0
-    ) {
-      this.showImageLoadingOverlay(targetImage, targetSlide);
-    }
-
-    const event = new CustomEvent("carousel:slide-changed", {
-      bubbles: true,
-      detail: {
-        previousIndex: parseInt(this.activeIndex, 10),
-        currentIndex: parseInt(targetIndex, 10),
-        totalSlides: parseInt(this.totalSlides, 10),
-      },
-    });
-    this.el.dispatchEvent(event);
-  },
-
-  announceSlideChange(targetIndex) {
-    let liveRegion = document.getElementById(`${this.el.id}-live-region`);
-
-    if (!liveRegion) {
-      liveRegion = document.createElement("div");
-      liveRegion.id = `${this.el.id}-live-region`;
-      liveRegion.className = "sr-only";
-      liveRegion.setAttribute("aria-live", "polite");
-      liveRegion.setAttribute("aria-atomic", "true");
-      this.el.appendChild(liveRegion);
-    }
-
-    liveRegion.textContent = `Slide ${targetIndex} of ${this.totalSlides}`;
-  },
-
-  performSlideTransition(currentSlide, targetSlide, targetIndex) {
-    currentSlide.classList.add("transition-opacity", "duration-300");
-    targetSlide.classList.add("transition-opacity", "duration-300");
-
-    currentSlide.classList.remove(...this.classes.activeSlide.split(" "));
-    currentSlide.classList.add(...this.classes.hiddenSlide.split(" "));
-    currentSlide.setAttribute("aria-hidden", "true");
-
-    targetSlide.classList.remove(...this.classes.hiddenSlide.split(" "));
-    targetSlide.classList.add(...this.classes.activeSlide.split(" "));
-    targetSlide.setAttribute("aria-hidden", "false");
-
-    this.updateIndicators(targetIndex);
-
-    this.activeIndex = targetIndex;
-
-    if (this.shouldFocusSlide) {
-      targetSlide.focus({ preventScroll: true });
-    }
-  },
-
-  updateIndicators(targetIndex) {
-    this.indicators?.forEach((indicator, index) => {
-      const isActive = index + 1 === targetIndex;
-
-      if (isActive) {
-        indicator.classList.add(this.classes.activeIndicator);
-        indicator.setAttribute("aria-current", "true");
-      } else {
-        indicator.classList.remove(this.classes.activeIndicator);
-        indicator.setAttribute("aria-current", "false");
-      }
-
-      indicator.setAttribute("aria-label", `Go to slide ${index + 1}`);
-    });
-  },
-
-  selectSlide(index) {
-    this.handleIndicatorClick(index);
-  },
-
-  setupAutoplay() {
-    if (this.shouldAutoplay) {
-      this.startAutoplay();
-    }
-  },
-
-  startAutoplay() {
-    if (this.isHovered && this.el.dataset.pauseOnHover !== "false") return;
-    if (this.isTouching) return;
-
-    clearInterval(this.autoplayTimer);
-    this.autoplayTimer = setInterval(() => {
-      const nextIndex =
-        this.activeIndex < this.totalSlides ? this.activeIndex + 1 : 1;
-      this.navigateToSlide(nextIndex);
-    }, this.autoplayInterval);
-  },
-
-  stopAutoplay() {
-    clearInterval(this.autoplayTimer);
-    this.autoplayTimer = null;
-  },
-
-  handleUserInteraction() {
-    this.stopAutoplay();
-    clearTimeout(this.userInteractionTimeout);
-    this.userInteractionTimeout = setTimeout(() => {
-      if (this.shouldAutoplay && !this.isHovered && !this.isTouching) {
-        this.startAutoplay();
-      }
-    }, this.userInteractionDelay);
-  },
-
-  showInitialSlide() {
-    this.slides.forEach((slide, index) => {
-      const isActive = index + 1 === this.activeIndex;
-      this.toggleSlideVisibility(slide, isActive);
-      if (this.indicators[index]) {
-        this.toggleIndicatorState(this.indicators[index], isActive);
-      }
-    });
-  },
-
-  toggleSlideVisibility(slide, isActive) {
-    if (isActive) {
-      slide.classList.add(...this.classes.activeSlide.split(" "));
-      slide.classList.remove(...this.classes.hiddenSlide.split(" "));
-      slide.setAttribute("aria-hidden", "false");
-      slide.setAttribute("tabindex", "0");
-    } else {
-      slide.classList.remove(...this.classes.activeSlide.split(" "));
-      slide.classList.add(...this.classes.hiddenSlide.split(" "));
-      slide.setAttribute("aria-hidden", "true");
-      slide.setAttribute("tabindex", "-1");
-    }
-  },
-
-  toggleIndicatorState(indicator, isActive) {
-    if (isActive) {
-      indicator.classList.add(this.classes.activeIndicator);
-      indicator.setAttribute("aria-current", "true");
-    } else {
-      indicator.classList.remove(this.classes.activeIndicator);
-      indicator.setAttribute("aria-current", "false");
-    }
-  },
-
-  setupImageLoadHandling() {
-    this.imageLoaders.forEach((img) => {
-      const overlay = this.createLoadingOverlay(img);
-      if (!overlay) return;
-
-      const slide = img.closest(".slide");
-      if (slide) {
-        slide.style.minHeight = "300px";
-        overlay.style.minHeight = "300px";
-      }
-
-      img.parentNode.insertBefore(overlay, img.nextSibling);
-
-      if (img.complete && img.naturalWidth > 0) {
-        overlay.remove();
-        if (slide) {
-          slide.style.removeProperty("min-height");
-        }
-      } else {
-        if (
-          "loading" in HTMLImageElement.prototype &&
-          !img.hasAttribute("loading")
-        ) {
-          img.loading = "lazy";
-        }
-
-        img.addEventListener(
-          "load",
-          () => {
-            overlay.classList.add("fade-out");
-            setTimeout(() => overlay.remove(), 300);
-            if (slide) {
-              slide.style.removeProperty("min-height");
-            }
-          },
-          { once: true },
-        );
-
-        img.addEventListener(
-          "error",
-          () => {
-            overlay.textContent = "";
-            const errorDiv = document.createElement("div");
-            errorDiv.className = "text-red-500 py-10";
-            errorDiv.textContent = "Failed to load image";
-            overlay.appendChild(errorDiv);
-            overlay.classList.remove("animate-pulse");
-          },
-          { once: true },
-        );
-      }
-    });
-  },
-
-  createLoadingOverlay(img) {
-    if (!img) return null;
-
-    const overlay = document.createElement("div");
-    overlay.className =
-      "absolute inset-0 bg-gray-200 dark:bg-gray-800 animate-pulse flex items-center justify-center transition-opacity duration-300";
-    overlay.id = img.id + "-loading";
-
-    const spinner = document.createElement("div");
-    spinner.className =
-      "animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary";
-    overlay.appendChild(spinner);
-
-    return overlay;
-  },
-
-  showImageLoadingOverlay(img, slide) {
-    const existingOverlay = document.getElementById(img.id + "-loading");
-
-    if (!existingOverlay && img) {
-      const overlay = this.createLoadingOverlay(img);
-      if (overlay) {
-        slide.appendChild(overlay);
-
-        img.addEventListener(
-          "load",
-          () => {
-            overlay.classList.add("fade-out");
-            setTimeout(() => overlay.remove(), 300);
-          },
-          { once: true },
-        );
-      }
-    }
-  },
-
-  // Helper method: sanitizes a number input
-  sanitizeNumber(value) {
-    const num = parseInt(value, 10);
-    return !isNaN(num) ? num : 0;
-  },
-
-  // Helper method: sanitizes class names by allowing only alphanumeric, dash, underscore, and space
-  sanitizeClassName(classString) {
-    if (!classString || typeof classString !== "string") return null;
-    return classString
-      .split(" ")
-      .map((name) => name.replace(/[^a-zA-Z0-9_\-]/g, ""))
-      .filter((name) => name.length > 0)
-      .join(" ");
-  },
-};
-
-export default Carousel;
diff --git a/assets/vendor/clipboard.js b/assets/vendor/clipboard.js
deleted file mode 100644
index dc5341a..0000000
--- a/assets/vendor/clipboard.js
+++ /dev/null
@@ -1,466 +0,0 @@
-/**
- * Enhanced Clipboard Component
- *
- * A reusable component that provides clipboard functionality with improved:
- * - Performance: Optimized event handling and DOM operations
- * - Security: Better sanitization and error handling
- * - Organization: Cleaner code structure with the original object pattern
- * - Accessibility: Enhanced ARIA support
- */
-const Clipboard = {
-  /**
-   * Initialize the clipboard component
-   */
-  mounted() {
-    // Prevent double initialization
-    if (this._alreadyMounted) return;
-    this._alreadyMounted = true;
-    // Setup initial state
-    this.initializeConfig();
-    this.initializeElements();
-    this.setupEventListeners();
-  },
-
-  /**
-   * Initialize and cache DOM elements
-   */
-  initializeElements() {
-    this.statusEl = this.el.querySelector(".clipboard-status");
-    this.triggerWrapper = this.el.querySelector(".clipboard-trigger");
-    this.triggerEl =
-      this.triggerWrapper?.firstElementChild || this.triggerWrapper;
-
-    if (!this.triggerEl) return;
-
-    // Setup accessibility attributes
-    if (!this.triggerEl.getAttribute("tabindex")) {
-      this.triggerEl.setAttribute("tabindex", "0");
-    }
-
-    if (!this.triggerEl.getAttribute("role")) {
-      this.triggerEl.setAttribute("role", "button");
-    }
-
-    if (!this.triggerEl.getAttribute("aria-label")) {
-      this.triggerEl.setAttribute("aria-label", "Copy to clipboard");
-    }
-
-    // Save original content for restoring later
-    this.labelEl = this.triggerEl.querySelector(".clipboard-label");
-    if (this.labelEl) {
-      this.originalLabel = this.labelEl.textContent;
-    } else {
-      const childNodes = Array.from(this.triggerEl.childNodes);
-      this.originalTextNode = childNodes.find(
-        (node) =>
-          node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== "",
-      );
-
-      if (this.originalTextNode) {
-        this.originalText = this.originalTextNode.textContent;
-      } else {
-        this.originalLabelHTML = this.triggerEl.innerHTML;
-      }
-    }
-  },
-
-  /**
-   * Clean up resources when component is removed
-   */
-  destroyed() {
-    this.removeEventListeners();
-    this.clearTimers();
-  },
-
-  /**
-   * Parse configuration from data attributes
-   */
-  initializeConfig() {
-    const { dataset } = this.el;
-
-    // Parse timeout with validation
-    const timeoutValue = parseInt(dataset.timeout, 10);
-    this.timeout =
-      !isNaN(timeoutValue) && timeoutValue > 0 ? timeoutValue : 2000;
-
-    // Parse and sanitize configuration
-    this.successClass = this.sanitizeClassName(
-      dataset.successClass || "clipboard-success",
-    );
-    this.errorClass = this.sanitizeClassName(
-      dataset.errorClass || "clipboard-error",
-    );
-    this.successText = this.sanitizeText(dataset.copySuccessText || "Copied!");
-    this.errorText = this.sanitizeText(dataset.copyErrorText || "Copy failed");
-
-    // Parse boolean values
-    this.dynamicLabel = String(dataset.dynamicLabel).toLowerCase() === "true";
-  },
-
-  /**
-   * Set up event listeners
-   */
-  setupEventListeners() {
-    if (!this.triggerEl) return;
-
-    // Store bound handlers for proper cleanup
-    this.handleCopyClick = this.handleCopyClick.bind(this);
-    this.handleCopyKeydown = this.handleCopyKeydown.bind(this);
-
-    this.triggerEl.addEventListener("click", this.handleCopyClick);
-    this.triggerEl.addEventListener("keydown", this.handleCopyKeydown);
-  },
-
-  /**
-   * Remove event listeners
-   */
-  removeEventListeners() {
-    if (!this.triggerEl) return;
-
-    if (this.handleCopyClick) {
-      this.triggerEl.removeEventListener("click", this.handleCopyClick);
-    }
-
-    if (this.handleCopyKeydown) {
-      this.triggerEl.removeEventListener("keydown", this.handleCopyKeydown);
-    }
-  },
-
-  /**
-   * Clear any active timers
-   */
-  clearTimers() {
-    if (this.statusReset) {
-      clearTimeout(this.statusReset);
-      this.statusReset = null;
-    }
-  },
-
-  /**
-   * Sanitize CSS class names for security
-   * @param {string} classNames - Space-separated list of class names
-   * @returns {string} - Sanitized class names
-   */
-  sanitizeClassName(classNames) {
-    if (!classNames || typeof classNames !== "string") {
-      return "clipboard-success";
-    }
-
-    return (
-      classNames
-        .split(" ")
-        .filter((name) => /^[a-zA-Z0-9_\-]+$/.test(name))
-        .join(" ") || "clipboard-success"
-    );
-  },
-
-  /**
-   * Sanitize text content
-   * @param {string} text - Text to sanitize
-   * @returns {string} - Sanitized text
-   */
-  sanitizeText(text) {
-    if (!text || typeof text !== "string") {
-      return "";
-    }
-
-    // Limit length and escape sensitive characters
-    return text
-      .slice(0, 100)
-      .replace(/&/g, "&amp;")
-      .replace(/</g, "&lt;")
-      .replace(/>/g, "&gt;")
-      .replace(/"/g, "&quot;")
-      .replace(/'/g, "&#039;");
-  },
-
-  /**
-   * Handle click events on the trigger element
-   * @param {Event} event - The click event
-   */
-  handleCopyClick(event) {
-    event.preventDefault();
-    event.stopPropagation();
-    this.handleCopy();
-  },
-
-  /**
-   * Handle keyboard events for accessibility
-   * @param {KeyboardEvent} event - The keyboard event
-   */
-  handleCopyKeydown(event) {
-    // Handle Enter or Space key for accessibility
-    if (event.key === "Enter" || event.key === " ") {
-      event.preventDefault();
-      this.handleCopy();
-    }
-  },
-
-  /**
-   * Main copy operation handler
-   * @returns {Promise<boolean>} - Success status
-   */
-  async handleCopy() {
-    const text = this.getTextToCopy();
-    if (!text) {
-      this.showStatus(false);
-      return false;
-    }
-
-    try {
-      // Use modern Clipboard API with fallback
-      if (navigator.clipboard && navigator.clipboard.writeText) {
-        await navigator.clipboard.writeText(text);
-        this.showStatus(true);
-        return true;
-      } else {
-        return this.fallbackCopyTextToClipboard(text);
-      }
-    } catch (error) {
-      console.error("Clipboard operation failed:", error);
-      this.showStatus(false);
-      return false;
-    }
-  },
-
-  /**
-   * Legacy fallback for clipboard operations
-   * @param {string} text - Text to copy
-   * @returns {boolean} - Success status
-   */
-  fallbackCopyTextToClipboard(text) {
-    const textArea = document.createElement("textarea");
-    textArea.value = text;
-
-    // Position off-screen but maintain accessibility
-    Object.assign(textArea.style, {
-      position: "absolute",
-      left: "-9999px",
-      top: "-9999px",
-      opacity: "0",
-    });
-
-    document.body.appendChild(textArea);
-    textArea.focus();
-    textArea.select();
-
-    let succeeded = false;
-    try {
-      succeeded = document.execCommand("copy");
-    } catch (error) {
-      console.error("Fallback clipboard operation failed:", error);
-    } finally {
-      document.body.removeChild(textArea);
-    }
-
-    this.showStatus(succeeded);
-    return succeeded;
-  },
-
-  /**
-   * Get the text to be copied based on configuration
-   * @returns {string|null} - Text to copy or null if not found
-   */
-  getTextToCopy() {
-    const { dataset } = this.el;
-
-    // Priority 1: Explicit text in data attribute
-    if (dataset.clipboardText) {
-      return dataset.clipboardText;
-    }
-
-    // Priority 2: Text from targeted element via selector
-    if (dataset.targetSelector) {
-      try {
-        const el = document.querySelector(dataset.targetSelector);
-        return el ? this.extractText(el) : null;
-      } catch (error) {
-        console.error("Error selecting target element:", error);
-        return null;
-      }
-    }
-
-    // Priority 3: Text from designated content element
-    const contentEl = this.el.querySelector(".clipboard-content");
-    return contentEl ? this.extractText(contentEl) : null;
-  },
-
-  /**
-   * Extract text content from an element based on its type
-   * @param {HTMLElement} el - Element to extract text from
-   * @returns {string|null} - Extracted text or null
-   */
-  extractText(el) {
-    if (!el) return null;
-
-    // Handle form elements
-    if (el.tagName === "INPUT" || el.tagName === "TEXTAREA") {
-      return el.value;
-    }
-
-    // Handle code blocks with priority
-    const code = el.querySelector("pre, code");
-    if (code) {
-      return code.textContent;
-    }
-
-    // Get clean text content without excessive whitespace
-    return el.textContent.replace(/\s+/g, " ").trim();
-  },
-
-  /**
-   * Update UI to show operation status
-   * @param {boolean} success - Whether operation succeeded
-   */
-  showStatus(success) {
-    const trigger = this.triggerEl;
-    const status = this.statusEl;
-
-    // Update trigger classes
-    if (trigger) {
-      this.updateTriggerClasses(trigger, success);
-
-      trigger.setAttribute("aria-disabled", "true");
-      trigger.setAttribute("tabindex", "-1");
-
-      // Update label if configured
-      if (this.dynamicLabel) {
-        this.updateLabel(success);
-      }
-    }
-
-    // Update status element
-    if (status) {
-      status.textContent = success ? this.successText : this.errorText;
-      status.setAttribute("aria-hidden", "false");
-
-      // Announce to screen readers
-      this.announceToScreenReader(success ? this.successText : this.errorText);
-    }
-
-    // Schedule reset after timeout
-    this.clearTimers();
-    this.statusReset = setTimeout(() => this.resetStatus(), this.timeout);
-  },
-
-  /**
-   * Update CSS classes on trigger element
-   * @param {HTMLElement} trigger - Trigger element
-   * @param {boolean} success - Success status
-   */
-  updateTriggerClasses(trigger, success) {
-    // Remove all status classes
-    const allClasses = [
-      ...this.successClass.split(" "),
-      ...this.errorClass.split(" "),
-    ];
-
-    allClasses.forEach((cls) => {
-      if (cls) trigger.classList.remove(cls);
-    });
-
-    // Add appropriate status classes
-    const newClasses = (success ? this.successClass : this.errorClass).split(
-      " ",
-    );
-    newClasses.forEach((cls) => {
-      if (cls) trigger.classList.add(cls);
-    });
-  },
-
-  /**
-   * Update label text based on operation status
-   * @param {boolean} success - Success status
-   */
-  updateLabel(success) {
-    const statusText = success ? this.successText : this.errorText;
-
-    if (this.labelEl) {
-      this.labelEl.textContent = statusText;
-    } else if (this.originalTextNode) {
-      this.originalTextNode.textContent = statusText;
-    } else {
-      this.triggerEl.innerHTML = statusText;
-    }
-  },
-
-  /**
-   * Announce status to screen readers
-   * @param {string} message - Message to announce
-   */
-  announceToScreenReader(message) {
-    let liveRegion = document.getElementById("clipboard-live-region");
-
-    if (!liveRegion) {
-      liveRegion = document.createElement("div");
-      liveRegion.id = "clipboard-live-region";
-      liveRegion.setAttribute("aria-live", "polite");
-      liveRegion.setAttribute("aria-atomic", "true");
-      liveRegion.className = "sr-only";
-
-      Object.assign(liveRegion.style, {
-        position: "absolute",
-        width: "1px",
-        height: "1px",
-        padding: "0",
-        margin: "-1px",
-        overflow: "hidden",
-        clip: "rect(0, 0, 0, 0)",
-        whiteSpace: "nowrap",
-        border: "0",
-      });
-
-      document.body.appendChild(liveRegion);
-    }
-
-    liveRegion.textContent = message;
-  },
-
-  /**
-   * Reset UI state after timeout
-   */
-  resetStatus() {
-    const trigger = this.triggerEl;
-    const status = this.statusEl;
-
-    // Reset status display
-    if (status) {
-      status.textContent = "";
-      status.setAttribute("aria-hidden", "true");
-    }
-
-    // Remove all status classes
-    if (trigger) {
-      trigger.removeAttribute("aria-disabled");
-      trigger.setAttribute("tabindex", "0");
-
-      const allClasses = [
-        ...this.successClass.split(" "),
-        ...this.errorClass.split(" "),
-      ];
-
-      allClasses.forEach((cls) => {
-        if (cls) trigger.classList.remove(cls);
-      });
-    }
-
-    // Reset label to original
-    if (this.dynamicLabel) {
-      if (this.labelEl && this.originalLabel) {
-        this.labelEl.textContent = this.originalLabel;
-      } else if (this.originalTextNode && this.originalText) {
-        this.originalTextNode.textContent = this.originalText;
-      } else if (this.originalLabelHTML) {
-        this.triggerEl.innerHTML = this.originalLabelHTML;
-      }
-    }
-
-    // Clear screen reader announcement
-    let liveRegion = document.getElementById("clipboard-live-region");
-    if (liveRegion) {
-      liveRegion.textContent = "";
-    }
-  },
-};
-
-export default Clipboard;
diff --git a/assets/vendor/combobox.js b/assets/vendor/combobox.js
deleted file mode 100644
index 03df00b..0000000
--- a/assets/vendor/combobox.js
+++ /dev/null
@@ -1,522 +0,0 @@
-let Combobox = {
-  mounted() {
-    this.initElements();
-
-    this.boundHandleScroll = this.updateDropdownPosition.bind(this);
-    this.boundHandleKeyDown = this.handleKeyDown.bind(this);
-    this.boundHandleDocumentClick = this.handleDocumentClick.bind(this);
-    this.boundOpenButtonClick = this.handleOpenButtonClick.bind(this);
-    this.boundOptionClickHandlers = [];
-    this.boundClearButtonClick = this.handleClearButtonClick.bind(this);
-
-    this.lastNavigatedValue = null; // last chosen option
-
-    if (!this.openButton.id) {
-      this.openButton.id = `combobox-trigger-${Math.random()
-        .toString(36)
-        .substring(2, 9)}`;
-    }
-
-    this.openButton.addEventListener("click", this.boundOpenButtonClick);
-
-    this.el.querySelectorAll(".combobox-option").forEach((btn) => {
-      const handler = this.handleOptionClick.bind(this);
-      btn.addEventListener("click", handler);
-      this.boundOptionClickHandlers.push({ btn, handler });
-    });
-
-    if (this.searchInput) {
-      this.boundSearchInputHandler = this.handleSearch.bind(this);
-      this.searchInput.addEventListener("input", this.boundSearchInputHandler);
-    }
-
-    if (this.clearButton) {
-      this.clearButton.addEventListener("click", this.boundClearButtonClick);
-    }
-
-    document.addEventListener("click", this.boundHandleDocumentClick, true);
-
-    this.observer = new MutationObserver(() => {
-      this.syncDisplayFromSelect();
-    });
-    this.observer.observe(this.select, {
-      attributes: true,
-      childList: true,
-      subtree: true,
-    });
-
-    this.syncDisplayFromSelect();
-  },
-
-  initElements() {
-    this.select = this.el.querySelector(".combo-select");
-    this.dropdown = this.el.querySelector('[data-part="listbox"]');
-    this.openButton = this.el.querySelector(".combobox-trigger");
-    this.selectedDisplay = this.el.querySelector(".selected-value");
-    this.searchInput = this.el.querySelector(".combobox-search-input");
-    this.clearButton = this.el.querySelector(
-      '[data-part="clear-combobox-button"]',
-    );
-    this.dropdownOptions = this.el.querySelectorAll(".combobox-option");
-  },
-
-  handleOpenButtonClick(e) {
-    e.preventDefault();
-    e.stopPropagation();
-    if (this.dropdown.hasAttribute("hidden")) {
-      this.openDropdown();
-    } else {
-      this.closeDropdown();
-    }
-  },
-
-  openDropdown() {
-    this.dropdown.removeAttribute("hidden");
-    this.openButton.setAttribute("aria-expanded", "true");
-
-    requestAnimationFrame(() => {
-      this.updateDropdownPosition();
-      this.dropdownOptions = this.el.querySelectorAll(".combobox-option");
-
-      let navigateTarget = null;
-      if (this.lastNavigatedValue) {
-        navigateTarget = this.el.querySelector(
-          `.combobox-option[data-combobox-value="${this.lastNavigatedValue}"]`,
-        );
-      }
-      if (!navigateTarget) {
-        navigateTarget = this.el.querySelector(
-          ".combobox-option[data-combobox-selected]",
-        );
-      }
-      if (!navigateTarget && this.dropdownOptions.length > 0) {
-        navigateTarget = this.dropdownOptions[0];
-      }
-
-      this.dropdownOptions.forEach((opt) =>
-        opt.removeAttribute("data-combobox-navigate"),
-      );
-
-      if (navigateTarget) {
-        navigateTarget.setAttribute("data-combobox-navigate", "");
-        navigateTarget.scrollIntoView({ block: "nearest" });
-        this.lastNavigatedValue = navigateTarget.dataset.comboboxValue;
-        if (navigateTarget.id) {
-          this.openButton.setAttribute(
-            "aria-activedescendant",
-            navigateTarget.id,
-          );
-        } else {
-          this.openButton.removeAttribute("aria-activedescendant");
-        }
-      } else {
-        this.openButton.removeAttribute("aria-activedescendant");
-      }
-
-      if (this.searchInput) {
-        this.searchInput.focus();
-      }
-    });
-
-    window.addEventListener("scroll", this.boundHandleScroll, {
-      passive: true,
-    });
-    document.addEventListener("keydown", this.boundHandleKeyDown);
-  },
-
-  closeDropdown() {
-    if (!this.dropdown.hasAttribute("hidden")) {
-      this.dropdown.setAttribute("hidden", true);
-    }
-    this.openButton.setAttribute("aria-expanded", "false");
-    this.openButton.removeAttribute("aria-activedescendant");
-    window.removeEventListener("scroll", this.boundHandleScroll);
-    document.removeEventListener("keydown", this.boundHandleKeyDown);
-  },
-
-  resetNavigateToFirstOption() {
-    this.el.querySelectorAll(".combobox-option").forEach((opt) => {
-      opt.removeAttribute("data-combobox-navigate");
-    });
-    const firstOption = this.el.querySelector(".combobox-option");
-    if (firstOption) {
-      firstOption.setAttribute("data-combobox-navigate", "");
-      firstOption.scrollIntoView({ block: "nearest" });
-      this.lastNavigatedValue = firstOption.dataset.comboboxValue;
-      if (firstOption.id) {
-        this.openButton.setAttribute("aria-activedescendant", firstOption.id);
-      }
-    }
-  },
-
-  updateDropdownPosition() {
-    const rect = this.openButton.getBoundingClientRect();
-    const dropdownHeight = this.dropdown.offsetHeight || 200;
-    const windowHeight = window.innerHeight;
-    const spaceBelow = windowHeight - rect.bottom;
-    if (spaceBelow < dropdownHeight) {
-      this.dropdown.classList.remove("top-full", "mt-2");
-      this.dropdown.classList.add("bottom-full", "mb-2");
-    } else {
-      this.dropdown.classList.remove("bottom-full", "mb-2");
-      this.dropdown.classList.add("top-full", "mt-2");
-    }
-  },
-
-  handleSearch(e) {
-    const query = e.target.value.toLowerCase();
-    this.dropdownOptions = this.el.querySelectorAll(".combobox-option");
-
-    this.dropdownOptions.forEach((option) => {
-      const valueAttr = option
-        .getAttribute("data-combobox-value")
-        .toLowerCase();
-      option.style.display = valueAttr.includes(query) ? "" : "none";
-    });
-
-    const noResults = this.el.querySelector(".no-results");
-    const visibleOptions = Array.from(this.dropdownOptions).filter(
-      (option) => option.style.display !== "none",
-    );
-    if (visibleOptions.length === 0) {
-      noResults.classList.remove("hidden");
-    } else {
-      noResults.classList.add("hidden");
-    }
-
-    this.el.querySelectorAll(".option-group").forEach((group) => {
-      const visibleInGroup = group.querySelectorAll(
-        '.combobox-option:not([style*="display: none"])',
-      );
-      group.style.display = visibleInGroup.length === 0 ? "none" : "";
-    });
-
-    this.dropdownOptions.forEach((option) =>
-      option.removeAttribute("data-combobox-navigate"),
-    );
-    if (visibleOptions.length > 0) {
-      visibleOptions[0].setAttribute("data-combobox-navigate", "");
-    }
-  },
-
-  handleOptionClick(e) {
-    e.preventDefault();
-    const optionEl = e.target.closest(".combobox-option");
-    const value = optionEl.dataset.comboboxValue;
-    const isMultiple = this.select.multiple;
-    if (isMultiple) {
-      this.toggleOption(value, optionEl);
-      this.updateMultipleSelectedDisplay();
-      this.dispatchChangeEvent();
-    } else {
-      this.el.querySelectorAll(".combobox-option").forEach((opt) => {
-        opt.removeAttribute("data-combobox-selected");
-        opt.setAttribute("aria-selected", "false");
-      });
-      this.selectSingleOption(value);
-      optionEl.setAttribute("data-combobox-selected", "");
-      optionEl.setAttribute("aria-selected", "true");
-      this.closeDropdown();
-      this.openButton.focus();
-    }
-  },
-
-  toggleOption(value, optionEl) {
-    const option = Array.from(this.select.options).find(
-      (opt) => opt.value === value,
-    );
-    if (option) {
-      option.selected = !option.selected;
-      if (option.selected) {
-        option.setAttribute("selected", "");
-        optionEl.setAttribute("data-combobox-selected", "");
-        optionEl.setAttribute("aria-selected", "true");
-      } else {
-        option.removeAttribute("selected");
-        optionEl.removeAttribute("data-combobox-selected");
-        optionEl.setAttribute("aria-selected", "false");
-      }
-    }
-  },
-
-  selectSingleOption(value) {
-    Array.from(this.select.options).forEach((opt) => {
-      opt.selected = opt.value === value;
-    });
-    this.updateSingleSelectedDisplay();
-    this.dispatchChangeEvent();
-  },
-
-  updateSingleSelectedDisplay() {
-    this.el.querySelectorAll(".combobox-option").forEach((opt) => {
-      opt.removeAttribute("data-combobox-selected");
-      opt.setAttribute("aria-selected", "false");
-    });
-
-    const selectedOption = Array.from(this.select.options).find(
-      (opt) => opt.selected && opt.value !== "",
-    );
-    const placeholder = this.el.querySelector(".combobox-placeholder");
-    const clearBtn = this.el.querySelector(
-      '[data-part="clear-combobox-button"]',
-    );
-
-    if (selectedOption) {
-      if (placeholder) placeholder.style.display = "none";
-      const renderedOption = this.el.querySelector(
-        `.combobox-option[data-combobox-value="${selectedOption.value}"]`,
-      );
-      this.selectedDisplay.innerHTML = renderedOption
-        ? renderedOption.innerHTML
-        : selectedOption.textContent;
-      if (renderedOption) {
-        renderedOption.setAttribute("data-combobox-selected", "");
-        renderedOption.setAttribute("aria-selected", "true");
-      }
-      if (clearBtn) clearBtn.hidden = false;
-    } else {
-      if (placeholder) placeholder.style.display = "";
-      this.selectedDisplay.textContent = "";
-      if (clearBtn) clearBtn.hidden = true;
-      this.lastNavigatedValue = null;
-    }
-  },
-
-  updateMultipleSelectedDisplay() {
-    this.selectedDisplay.innerHTML = "";
-    const selectedOptions = Array.from(this.select.options).filter(
-      (opt) => opt.selected,
-    );
-    const placeholder = this.el.querySelector(".combobox-placeholder");
-    const clearBtn = this.el.querySelector(
-      '[data-part="clear-combobox-button"]',
-    );
-
-    if (selectedOptions.length > 0) {
-      placeholder.style.display = "none";
-      if (clearBtn) clearBtn.hidden = false;
-    } else {
-      placeholder.style.display = "";
-      if (clearBtn) clearBtn.hidden = true;
-    }
-
-    selectedOptions.forEach((option) => {
-      const optionEl = this.el.querySelector(
-        `.combobox-option[data-combobox-value="${option.value}"]`,
-      );
-      if (optionEl) {
-        optionEl.setAttribute("data-combobox-selected", "");
-        optionEl.setAttribute("aria-selected", "true");
-      }
-    });
-
-    selectedOptions.forEach((option) => {
-      const pill = document.createElement("span");
-      pill.classList.add(
-        "selected-item",
-        "flex",
-        "items-center",
-        "gap-2",
-        "combobox-pill",
-      );
-
-      const renderedOption = this.el.querySelector(
-        `.combobox-option[data-combobox-value="${option.value}"]`,
-      );
-      if (renderedOption) {
-        pill.innerHTML = renderedOption.innerHTML;
-      } else {
-        pill.textContent = option.textContent;
-      }
-
-      const closeBtn = document.createElement("span");
-      closeBtn.innerHTML =
-        '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="combobox-icon"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg>';
-      closeBtn.addEventListener("click", (e) => {
-        e.preventDefault();
-        e.stopPropagation();
-        option.selected = false;
-        option.removeAttribute("selected");
-        const optionEl = this.el.querySelector(
-          `.combobox-option[data-combobox-value="${option.value}"]`,
-        );
-        if (optionEl) {
-          optionEl.removeAttribute("data-combobox-selected");
-          optionEl.setAttribute("aria-selected", "false");
-        }
-        this.updateMultipleSelectedDisplay();
-        this.dispatchChangeEvent();
-      });
-      pill.appendChild(closeBtn);
-      this.selectedDisplay.appendChild(pill);
-    });
-  },
-
-  handleKeyDown(e) {
-    const key = e.key;
-    if (key === "Escape") {
-      this.closeDropdown();
-      return;
-    }
-
-    if (
-      document.activeElement === this.searchInput &&
-      !["ArrowDown", "ArrowUp", "Enter"].includes(key)
-    ) {
-      return;
-    }
-
-    if (this.dropdown.hasAttribute("hidden")) return;
-
-    const visibleOptions = Array.from(
-      this.el.querySelectorAll(".combobox-option"),
-    ).filter((opt) => opt.style.display !== "none");
-    if (visibleOptions.length === 0) return;
-
-    let currentIndex = visibleOptions.findIndex((opt) =>
-      opt.hasAttribute("data-combobox-navigate"),
-    );
-
-    if (key === "ArrowDown") {
-      currentIndex = (currentIndex + 1) % visibleOptions.length;
-      e.preventDefault();
-    } else if (key === "ArrowUp") {
-      currentIndex =
-        (currentIndex - 1 + visibleOptions.length) % visibleOptions.length;
-      e.preventDefault();
-    } else if (key === "Enter") {
-      e.preventDefault();
-      if (currentIndex >= 0) visibleOptions[currentIndex].click();
-      if (!this.select.multiple) this.closeDropdown();
-      return;
-    } else if (key.length === 1) {
-      e.preventDefault();
-      this.handleCharacterNavigation(key.toLowerCase(), visibleOptions);
-      return;
-    } else {
-      return;
-    }
-
-    visibleOptions.forEach((opt) =>
-      opt.removeAttribute("data-combobox-navigate"),
-    );
-    visibleOptions[currentIndex].setAttribute("data-combobox-navigate", "");
-    visibleOptions[currentIndex].scrollIntoView({ block: "nearest" });
-    this.lastNavigatedValue =
-      visibleOptions[currentIndex].dataset.comboboxValue;
-    if (visibleOptions[currentIndex].id) {
-      this.openButton.setAttribute(
-        "aria-activedescendant",
-        visibleOptions[currentIndex].id,
-      );
-    } else {
-      this.openButton.removeAttribute("aria-activedescendant");
-    }
-  },
-
-  handleCharacterNavigation(char, options) {
-    const matchingOptions = options.filter((opt) => {
-      const valueAttr = opt.getAttribute("data-combobox-value") || "";
-      const labelText = opt.textContent.trim().toLowerCase();
-      return (
-        valueAttr.toLowerCase().startsWith(char) || labelText.startsWith(char)
-      );
-    });
-    if (matchingOptions.length === 0) return;
-
-    let currentIndex = matchingOptions.findIndex((opt) =>
-      opt.hasAttribute("data-combobox-navigate"),
-    );
-    currentIndex = (currentIndex + 1) % matchingOptions.length;
-
-    options.forEach((opt) => opt.removeAttribute("data-combobox-navigate"));
-    matchingOptions[currentIndex].setAttribute("data-combobox-navigate", "");
-    matchingOptions[currentIndex].scrollIntoView({ block: "nearest" });
-  },
-
-  syncDisplayFromSelect() {
-    this.el.querySelectorAll(".combobox-option").forEach((opt) => {
-      opt.removeAttribute("data-combobox-selected");
-      opt.removeAttribute("data-combobox-navigate");
-      opt.setAttribute("aria-selected", "false");
-    });
-
-    if (this.select.multiple) {
-      this.updateMultipleSelectedDisplay();
-    } else {
-      this.updateSingleSelectedDisplay();
-    }
-
-    const isAnySelected = Array.from(this.select.options).some(
-      (opt) => opt.selected,
-    );
-    if (!isAnySelected) {
-      this.resetNavigateToFirstOption();
-    }
-  },
-
-  handleDocumentClick(e) {
-    if (!this.el.contains(e.target) && !this.isClickOnScrollbar(e)) {
-      this.closeDropdown();
-    }
-  },
-
-  isClickOnScrollbar(e) {
-    return (
-      e.clientX >= document.documentElement.clientWidth ||
-      e.clientY >= document.documentElement.clientHeight
-    );
-  },
-
-  dispatchChangeEvent() {
-    const changeEvent = new Event("change", { bubbles: true });
-    this.select.dispatchEvent(changeEvent);
-  },
-
-  handleClearButtonClick(e) {
-    e.preventDefault();
-    e.stopPropagation();
-    Array.from(this.select.options).forEach((opt) => {
-      opt.selected = false;
-      opt.removeAttribute("selected");
-    });
-    this.el.querySelectorAll(".combobox-option").forEach((opt) => {
-      opt.removeAttribute("data-combobox-selected");
-      opt.setAttribute("aria-selected", "false");
-    });
-    this.syncDisplayFromSelect();
-    this.closeDropdown();
-    this.dispatchChangeEvent();
-    this.resetNavigateToFirstOption();
-  },
-
-  destroyed() {
-    this.closeDropdown();
-    if (this.observer) {
-      this.observer.disconnect();
-    }
-    document.removeEventListener("click", this.boundHandleDocumentClick, true);
-    if (this.openButton && this.boundOpenButtonClick) {
-      this.openButton.removeEventListener("click", this.boundOpenButtonClick);
-    }
-    if (
-      this.boundOptionClickHandlers &&
-      this.boundOptionClickHandlers.length > 0
-    ) {
-      this.boundOptionClickHandlers.forEach(({ btn, handler }) => {
-        btn.removeEventListener("click", handler);
-      });
-    }
-    if (this.searchInput && this.boundSearchInputHandler) {
-      this.searchInput.removeEventListener(
-        "input",
-        this.boundSearchInputHandler,
-      );
-    }
-    if (this.clearButton && this.boundClearButtonClick) {
-      this.clearButton.removeEventListener("click", this.boundClearButtonClick);
-    }
-  },
-};
-
-export default Combobox;
diff --git a/assets/vendor/floating.js b/assets/vendor/floating.js
deleted file mode 100644
index 5987a39..0000000
--- a/assets/vendor/floating.js
+++ /dev/null
@@ -1,405 +0,0 @@
-const Floating = {
-  mounted() {
-    this.initElements();
-
-    // Flag to track if we moved the content to body
-    this.movedToBody = false;
-
-    this.boundHandleOutsideClick = this.handleOutsideClick.bind(this);
-    this.boundHandleKeydown = this.handleKeydown.bind(this);
-    this.boundHandleClick = this.handleClick.bind(this);
-    this.boundHandleMouseEnter = this.handleMouseEnter.bind(this);
-    this.boundHandleMouseLeave = this.handleMouseLeave.bind(this);
-    this.boundUpdatePosition = this.updatePosition.bind(this);
-
-    this.enableAria = this.el.getAttribute("data-enable-aria") !== "false";
-    this.smartPositioning =
-      this.el.getAttribute("data-smart-position") === "true";
-    this.clickable = this.el.getAttribute("data-clickable") === "true";
-    this.position = this.el.getAttribute("data-position") || "bottom";
-
-    this.floatingType = this.getFloatingType();
-
-    if (this.floatingContent) {
-      // Store original parent for restoration on destroy
-      this.originalParent = this.floatingContent.parentElement;
-      this.originalIndex = Array.from(this.originalParent.children).indexOf(
-        this.floatingContent,
-      );
-
-      // Move to body
-      document.body.appendChild(this.floatingContent);
-      this.movedToBody = true;
-
-      this.setupAria();
-      if (this.enableAria && this.floatingContent.hasAttribute("aria-hidden")) {
-        this.floatingContent.setAttribute("aria-hidden", "true");
-      }
-    }
-
-    if (this.trigger) {
-      if (this.clickable) {
-        this.trigger.addEventListener("click", this.boundHandleClick);
-      } else {
-        this.trigger.addEventListener("mouseenter", this.boundHandleMouseEnter);
-        this.trigger.addEventListener("mouseleave", this.boundHandleMouseLeave);
-        this.floatingContent?.addEventListener(
-          "mouseenter",
-          this.boundHandleMouseEnter,
-        );
-        this.floatingContent?.addEventListener(
-          "mouseleave",
-          this.boundHandleMouseLeave,
-        );
-      }
-
-      if (this.enableAria && this.floatingType === "dropdown") {
-        this.trigger.setAttribute("aria-haspopup", "menu");
-        this.trigger.setAttribute("aria-expanded", "false");
-      }
-    }
-
-    document.addEventListener("click", this.boundHandleOutsideClick);
-    document.addEventListener("keydown", this.boundHandleKeydown);
-    window.addEventListener("resize", this.boundUpdatePosition);
-    window.addEventListener("scroll", this.boundUpdatePosition, true);
-
-    this.forcedWidth = null;
-    this.updatePosition();
-  },
-
-  initElements() {
-    this.floatingContent =
-      this.el.querySelector("[data-floating-content]") ||
-      this.el.querySelector(".dropdown-content");
-
-    this.trigger =
-      this.el.querySelector("[data-floating-trigger]") ||
-      this.el.querySelector(".dropdown-trigger");
-  },
-
-  getFloatingType() {
-    const role = this.floatingContent?.getAttribute("role");
-    if (role === "tooltip") return "tooltip";
-    if (role === "dialog" || role === "menu") return "dropdown"; // treat dialog/popover/menu as dropdown-like
-    return "generic";
-  },
-
-  setupAria() {
-    if (!this.trigger || !this.floatingContent) return;
-
-    const id =
-      this.floatingContent.id ||
-      `floating-${Math.random().toString(36).substr(2, 9)}`;
-    this.floatingContent.id = id;
-
-    if (this.floatingType === "tooltip") {
-      this.trigger.setAttribute("aria-describedby", id);
-      this.floatingContent.setAttribute("role", "tooltip");
-    }
-
-    if (this.floatingType === "dropdown") {
-      this.trigger.setAttribute("aria-controls", id);
-      this.trigger.setAttribute("aria-haspopup", "menu");
-      this.floatingContent.setAttribute(
-        "aria-labelledby",
-        this.trigger.id || id,
-      );
-    }
-
-    if (this.floatingType === "popover") {
-      this.trigger.setAttribute("aria-haspopup", "dialog");
-      this.trigger.setAttribute("aria-controls", id);
-    }
-  },
-
-  handleClick(e) {
-    e.stopPropagation();
-    const allContents = document.querySelectorAll(
-      ".dropdown-content.show-dropdown",
-    );
-
-    allContents.forEach((content) => {
-      if (content !== this.floatingContent) {
-        content.classList.remove("visible", "opacity-100", "show-dropdown");
-        content.classList.add("invisible", "opacity-0");
-
-        if (this.enableAria && content.hasAttribute("aria-hidden")) {
-          content.setAttribute("aria-hidden", "true");
-        }
-
-        const triggerId = content.getAttribute("aria-labelledby");
-        if (triggerId) {
-          const triggerEl = document.getElementById(triggerId);
-          triggerEl?.setAttribute("aria-expanded", "false");
-        }
-      }
-    });
-
-    if (this.floatingContent?.classList.contains("show-dropdown")) {
-      this.hide();
-    } else {
-      this.show();
-    }
-  },
-
-  handleMouseEnter() {
-    this.show();
-  },
-
-  handleMouseLeave() {
-    this.hide();
-  },
-
-  handleOutsideClick(e) {
-    if (
-      this.trigger &&
-      !this.trigger.contains(e.target) &&
-      (!this.floatingContent || !this.floatingContent.contains(e.target))
-    ) {
-      this.hide();
-    }
-  },
-
-  handleKeydown(e) {
-    if (!this.floatingContent?.classList.contains("show-dropdown")) return;
-
-    const role = this.floatingContent.getAttribute("role");
-    if (role !== "menu") return;
-
-    const items = Array.from(
-      this.floatingContent.querySelectorAll(
-        '[role="menuitem"]:not([disabled]):not([hidden])',
-      ),
-    );
-    if (!items.length) return;
-
-    const currentIndex = items.indexOf(document.activeElement);
-
-    if (e.key === "Escape") {
-      e.preventDefault();
-      this.hide();
-      this.trigger?.focus();
-    } else if (e.key === "ArrowDown") {
-      e.preventDefault();
-      const next = items[(currentIndex + 1) % items.length];
-      next?.focus();
-    } else if (e.key === "ArrowUp") {
-      e.preventDefault();
-      const prev = items[(currentIndex - 1 + items.length) % items.length];
-      prev?.focus();
-    } else if (
-      e.key === "Tab" &&
-      !e.shiftKey &&
-      currentIndex === items.length - 1
-    ) {
-      e.preventDefault();
-      this.hide();
-    } else if (e.key === "Tab" && e.shiftKey && currentIndex === 0) {
-      e.preventDefault();
-      this.hide();
-    }
-  },
-
-  updatePosition() {
-    if (!this.trigger || !this.floatingContent) return;
-
-    const rect = this.trigger.getBoundingClientRect();
-    const content = this.floatingContent;
-    const gap = 4;
-    const isRTL =
-      getComputedStyle(document.documentElement).direction === "rtl";
-    let pos = this.position;
-
-    if (this.smartPositioning && content.offsetHeight) {
-      const { top, bottom, left, right } = rect;
-      const { innerHeight, innerWidth } = window;
-      const height = content.offsetHeight;
-      const width = content.offsetWidth;
-
-      const spaceTop = top;
-      const spaceBottom = innerHeight - bottom;
-      const spaceLeft = left;
-      const spaceRight = innerWidth - right;
-
-      if (pos === "bottom" && spaceBottom < height && spaceTop >= height) {
-        pos = "top";
-      } else if (pos === "top" && spaceTop < height && spaceBottom >= height) {
-        pos = "bottom";
-      } else if (pos === "left" && spaceLeft < width && spaceRight >= width) {
-        pos = "right";
-      } else if (pos === "right" && spaceRight < width && spaceLeft >= width) {
-        pos = "left";
-      }
-    }
-
-    let top, left;
-    if (pos === "top") {
-      top = rect.top + window.scrollY - content.offsetHeight - gap;
-      left = (rect.left + rect.right) / 2 + window.scrollX;
-      content.style.transform = "translateX(-50%)";
-    } else if (pos === "bottom") {
-      top = rect.bottom + window.scrollY + gap;
-      left = (rect.left + rect.right) / 2 + window.scrollX;
-      content.style.transform = "translateX(-50%)";
-    } else if (pos === "left") {
-      top =
-        rect.top + window.scrollY + (rect.height - content.offsetHeight) / 2;
-      left = isRTL
-        ? rect.right + window.scrollX + gap
-        : rect.left + window.scrollX - content.offsetWidth - gap;
-      content.style.transform = "none";
-    } else if (pos === "right") {
-      top =
-        rect.top + window.scrollY + (rect.height - content.offsetHeight) / 2;
-      left = isRTL
-        ? rect.left + window.scrollX - content.offsetWidth - gap
-        : rect.right + window.scrollX + gap;
-      content.style.transform = "none";
-    }
-
-    content.style.position = "absolute";
-    content.style.top = `${top}px`;
-    content.style.left = `${left}px`;
-  },
-
-  show() {
-    if (!this.floatingContent) return;
-
-    const content = this.floatingContent;
-    const transition = content.style.transition;
-    content.style.transition = "none";
-
-    content.removeAttribute("hidden");
-    content.classList.remove("invisible", "opacity-0");
-    content.classList.add("visible", "opacity-100", "show-dropdown");
-
-    this.updatePosition();
-
-    const triggerWidth = this.trigger.offsetWidth;
-    if (!this.forcedWidth) {
-      const contentWidth = content.offsetWidth;
-      if (contentWidth < triggerWidth) {
-        this.forcedWidth = triggerWidth;
-      }
-    }
-
-    content.style.width = this.forcedWidth ? `${this.forcedWidth}px` : "auto";
-
-    content.offsetHeight; // force reflow
-    content.style.transition = transition;
-
-    if (this.enableAria && this.trigger && this.floatingType === "dropdown") {
-      this.trigger.setAttribute("aria-expanded", "true");
-    }
-    if (this.enableAria && content.hasAttribute("aria-hidden")) {
-      content.setAttribute("aria-hidden", "false");
-    }
-
-    if (this.floatingType === "dropdown") {
-      const firstItem = content.querySelector('[role="menuitem"]');
-      firstItem?.focus();
-    }
-  },
-
-  hide() {
-    if (!this.floatingContent) return;
-
-    this.floatingContent.classList.remove(
-      "visible",
-      "opacity-100",
-      "show-dropdown",
-    );
-    this.floatingContent.classList.add("invisible", "opacity-0");
-
-    if (this.enableAria && this.trigger && this.floatingType === "dropdown") {
-      this.trigger.setAttribute("aria-expanded", "false");
-    }
-    if (this.enableAria && this.floatingContent.hasAttribute("aria-hidden")) {
-      this.floatingContent.setAttribute("aria-hidden", "true");
-    }
-  },
-
-  cleanupAria() {
-    if (this.trigger) {
-      if (this.floatingType === "tooltip") {
-        this.trigger.removeAttribute("aria-describedby");
-      } else if (this.floatingType === "dropdown") {
-        this.trigger.removeAttribute("aria-controls");
-        this.trigger.removeAttribute("aria-haspopup");
-        this.trigger.removeAttribute("aria-expanded");
-      } else if (this.floatingType === "popover") {
-        this.trigger.removeAttribute("aria-haspopup");
-        this.trigger.removeAttribute("aria-controls");
-      }
-    }
-  },
-
-  destroyed() {
-    // Remove event listeners
-    document.removeEventListener("click", this.boundHandleOutsideClick);
-    document.removeEventListener("keydown", this.boundHandleKeydown);
-    window.removeEventListener("resize", this.boundUpdatePosition);
-    window.removeEventListener("scroll", this.boundUpdatePosition, true);
-
-    if (this.trigger && this.clickable) {
-      this.trigger.removeEventListener("click", this.boundHandleClick);
-    }
-    if (!this.clickable && this.trigger) {
-      this.trigger.removeEventListener(
-        "mouseenter",
-        this.boundHandleMouseEnter,
-      );
-      this.trigger.removeEventListener(
-        "mouseleave",
-        this.boundHandleMouseLeave,
-      );
-    }
-
-    if (!this.clickable && this.floatingContent) {
-      this.floatingContent.removeEventListener(
-        "mouseenter",
-        this.boundHandleMouseEnter,
-      );
-      this.floatingContent.removeEventListener(
-        "mouseleave",
-        this.boundHandleMouseLeave,
-      );
-    }
-
-    // Clean up ARIA attributes
-    this.cleanupAria();
-
-    // Only restore floating content if it was moved to body
-    if (
-      this.floatingContent &&
-      this.movedToBody &&
-      document.body.contains(this.floatingContent)
-    ) {
-      // Remove from body
-      document.body.removeChild(this.floatingContent);
-
-      // Restore to original parent if available
-      if (this.originalParent) {
-        if (
-          this.originalIndex >= 0 &&
-          this.originalIndex < this.originalParent.children.length
-        ) {
-          this.originalParent.insertBefore(
-            this.floatingContent,
-            this.originalParent.children[this.originalIndex],
-          );
-        } else {
-          this.originalParent.appendChild(this.floatingContent);
-        }
-      }
-    }
-
-    // Clear references
-    this.floatingContent = null;
-    this.trigger = null;
-    this.originalParent = null;
-  },
-};
-
-export default Floating;
diff --git a/assets/vendor/galleryFilter.js b/assets/vendor/galleryFilter.js
deleted file mode 100644
index 7f32550..0000000
--- a/assets/vendor/galleryFilter.js
+++ /dev/null
@@ -1,193 +0,0 @@
-const GalleryFilter = {
-  mounted() {
-    // Extract configuration from data attributes and normalize to lowercase.
-    // If data-default-filter isn't provided, it defaults to "all".
-    this.defaultFilter = (this.el.dataset.defaultFilter || "all").toLowerCase();
-
-    // Cache DOM elements.
-    this.items = Array.from(this.el.querySelectorAll("[data-gallery-item]"));
-    this.filterButtons = Array.from(
-      this.el.querySelectorAll("[data-gallery-filter]"),
-    );
-
-    // Set up event listeners.
-    this._setupEventListeners();
-
-    // Apply initial filter without animation.
-    this.applyFilter(this.defaultFilter, null, true);
-  },
-
-  /**
-   * Set up click and keydown event listeners for filter buttons.
-   */
-  _setupEventListeners() {
-    this.filterButtons.forEach((btn) => {
-      btn.addEventListener("click", () => {
-        if (btn.disabled) return;
-        // Normalize filter value to lowercase for consistent matching.
-        const category = btn.dataset.category.toLowerCase();
-        if (category) this.applyFilter(category, btn);
-      });
-
-      btn.addEventListener("keydown", (e) => {
-        if (e.key === "Enter" || e.key === " ") {
-          e.preventDefault();
-          btn.click();
-        }
-      });
-    });
-  },
-
-  /**
-   * Check if the item should be visible for the given category.
-   * If the selected category equals the defaultFilter (which acts as "all"),
-   * then all items are shown; otherwise, only items matching the category are shown.
-   * @param {HTMLElement} item - Gallery item element.
-   * @param {string} category - Category to check.
-   * @returns {boolean} True if the item should be visible.
-   */
-  _isItemVisible(item, category) {
-    if (category === this.defaultFilter) return true;
-    // Here, we expect that the data attribute contains a comma-separated string
-    // representing an array of categories (e.g. "sky" or "sky,flowers").
-    const itemCategories = item.dataset.category
-      .split(",")
-      .map((c) => c.trim().toLowerCase());
-    return itemCategories.includes(category);
-  },
-
-  /**
-   * Capture current positions of items.
-   * @returns {Map<HTMLElement, DOMRect>} A map of items to their positions.
-   */
-  _captureItemPositions() {
-    const positions = new Map();
-    this.items.forEach((item) => {
-      positions.set(item, item.getBoundingClientRect());
-    });
-    return positions;
-  },
-
-  /**
-   * Update visibility of items based on the current filter.
-   * @param {string} category - Filter category.
-   */
-  _updateItemVisibility(category) {
-    this.items.forEach((item) => {
-      const isVisible = this._isItemVisible(item, category);
-      item.style.display = isVisible ? "" : "none";
-      if (isVisible) {
-        item.style.opacity = "0";
-        item.style.transform = "scale(0.95)";
-      }
-    });
-  },
-
-  /**
-   * Show items immediately without animation.
-   */
-  _showItemsImmediately() {
-    this.items.forEach((item) => {
-      if (item.style.display !== "none") {
-        item.style.opacity = "1";
-        item.style.transform = "scale(1)";
-      }
-    });
-  },
-
-  /**
-   * Animate items from previous positions to their new positions.
-   * @param {Map<HTMLElement, DOMRect>} beforePositions - Map of items and their previous positions.
-   * @param {function} onComplete - Callback function when all animations are complete.
-   */
-  _animateItems(beforePositions, onComplete) {
-    // Force browser reflow to ensure new positions are calculated.
-    void this.el.offsetWidth;
-
-    const visibleItems = this.items.filter(
-      (item) => item.style.display !== "none",
-    );
-    let animationsRemaining = visibleItems.length;
-
-    if (animationsRemaining === 0) {
-      onComplete && onComplete();
-      return;
-    }
-
-    visibleItems.forEach((item) => {
-      const before = beforePositions.get(item);
-      const after = item.getBoundingClientRect();
-      const dx = before.left - after.left;
-      const dy = before.top - after.top;
-
-      if (dx || dy) {
-        item.style.transform = `translate(${dx}px, ${dy}px) scale(0.95)`;
-      }
-
-      item.style.opacity = "0";
-
-      requestAnimationFrame(() => {
-        item.style.transition = "transform 300ms ease, opacity 300ms ease";
-        item.style.transform = "translate(0, 0) scale(1)";
-        item.style.opacity = "1";
-        item.addEventListener(
-          "transitionend",
-          () => {
-            item.style.transition = "";
-            animationsRemaining--;
-            if (animationsRemaining === 0) {
-              onComplete && onComplete();
-            }
-          },
-          { once: true },
-        );
-      });
-    });
-  },
-
-  /**
-   * Update active state of filter buttons.
-   * The active button remains disabled, while the others are enabled.
-   * @param {string} activeCategory - Current active category.
-   */
-  _updateActiveFilterButton(activeCategory) {
-    this.filterButtons.forEach((btn) => {
-      const isActive = btn.dataset.category.toLowerCase() === activeCategory;
-      btn.setAttribute("aria-pressed", isActive);
-      if (isActive) {
-        btn.classList.add("active");
-        btn.disabled = true;
-      } else {
-        btn.classList.remove("active");
-        btn.disabled = false;
-      }
-    });
-  },
-
-  /**
-   * Apply a filter to the gallery items.
-   * @param {string} category - Category to filter by.
-   * @param {HTMLElement|null} clickedButton - The button that was clicked (optional).
-   * @param {boolean} [skipAnimation=false] - Whether to skip the animation.
-   */
-  applyFilter(category, clickedButton = null, skipAnimation = false) {
-    // Disable only the clicked button immediately.
-    if (clickedButton) {
-      clickedButton.disabled = true;
-    }
-    const beforePositions = this._captureItemPositions();
-    this._updateItemVisibility(category);
-
-    if (skipAnimation) {
-      this._showItemsImmediately();
-      this._updateActiveFilterButton(category);
-      return;
-    }
-
-    this._animateItems(beforePositions, () => {
-      this._updateActiveFilterButton(category);
-    });
-  },
-};
-
-export default GalleryFilter;
diff --git a/assets/vendor/mishka_components.js b/assets/vendor/mishka_components.js
deleted file mode 100644
index 18df11c..0000000
--- a/assets/vendor/mishka_components.js
+++ /dev/null
@@ -1,17 +0,0 @@
-import Carousel from "./carousel.js";
-import Clipboard from "./clipboard.js";
-import Combobox from "./combobox.js";
-import Floating from "./floating.js";
-import GalleryFilter from "./galleryFilter.js";
-import ScrollArea from "./scrollArea.js";
-import Sidebar from "./sidebar.js";
-const Components = {
-  Carousel,
-  Clipboard,
-  Combobox,
-  Floating,
-  GalleryFilter,
-  ScrollArea,
-  Sidebar,
-};
-export default Components;
diff --git a/assets/vendor/sidebar.js b/assets/vendor/sidebar.js
deleted file mode 100644
index 35a68b0..0000000
--- a/assets/vendor/sidebar.js
+++ /dev/null
@@ -1,136 +0,0 @@
-const Sidebar = {
-  defaults: {
-    expandedWidth: "250px",
-    collapsedWidth: "60px",
-    transitionDuration: "0.3s",
-    labelAnimationDelay: 10,
-  },
-
-  getElements(el) {
-    const sidebarSelector = el.getAttribute("data-sidebar-selector");
-    if (!sidebarSelector) return null;
-
-    if (!this.isValidSelector(sidebarSelector)) return null;
-
-    const sidebar = document.querySelector(sidebarSelector);
-    if (!sidebar) return null;
-
-    return {
-      sidebar,
-      labels: sidebar.querySelectorAll("[data-item-label]"),
-    };
-  },
-
-  isValidSelector(selector) {
-    try {
-      document.querySelector(selector);
-      return true;
-    } catch (e) {
-      console.error("Invalid selector:", selector);
-      return false;
-    }
-  },
-
-  getConfig(sidebar) {
-    const expandedWidth = sidebar.getAttribute("data-expanded-width");
-    const collapsedWidth = sidebar.getAttribute("data-collapsed-width");
-
-    return {
-      expandedWidth:
-        this.sanitizeCssValue(expandedWidth) || this.defaults.expandedWidth,
-      collapsedWidth:
-        this.sanitizeCssValue(collapsedWidth) || this.defaults.collapsedWidth,
-      isMinimized: sidebar.getAttribute("data-minimized") === "true",
-    };
-  },
-
-  sanitizeCssValue(value) {
-    if (!value) return null;
-
-    const validPattern = /^[0-9]+(px|em|rem|%|vh|vw)$/;
-    return validPattern.test(value) ? value : null;
-  },
-
-  expandSidebar(sidebar, labels, expandedWidth) {
-    sidebar.style.width = expandedWidth;
-    sidebar.setAttribute("data-minimized", "false");
-
-    this.animateLabels(labels, true);
-  },
-
-  collapseSidebar(sidebar, labels, collapsedWidth) {
-    sidebar.style.width = collapsedWidth;
-    sidebar.setAttribute("data-minimized", "true");
-
-    this.hideLabels(labels);
-  },
-
-  animateLabels(labels, show) {
-    if (show) {
-      labels.forEach((label) => {
-        label.classList.remove("hidden");
-        label.classList.add("opacity-0");
-
-        setTimeout(() => {
-          label.classList.add(
-            "transition-opacity",
-            "duration-200",
-            "opacity-100",
-          );
-          label.classList.remove("opacity-0");
-        }, this.defaults.labelAnimationDelay);
-      });
-    }
-  },
-
-  hideLabels(labels) {
-    labels.forEach((label) => {
-      label.classList.add("hidden");
-      label.classList.remove(
-        "opacity-100",
-        "transition-opacity",
-        "duration-200",
-      );
-    });
-  },
-
-  Sidebar(elements, config) {
-    const { sidebar, labels } = elements;
-    const { expandedWidth, collapsedWidth, isMinimized } = config;
-
-    sidebar.style.transition = `width ${this.defaults.transitionDuration} ease`;
-
-    if (isMinimized) {
-      this.expandSidebar(sidebar, labels, expandedWidth);
-    } else {
-      this.collapseSidebar(sidebar, labels, collapsedWidth);
-    }
-  },
-
-  mounted() {
-    this.clickHandler = this.handleClick.bind(this);
-    this.el.addEventListener("click", this.clickHandler);
-  },
-
-  handleClick() {
-    const elements = this.getElements(this.el);
-    if (!elements) return;
-
-    const config = this.getConfig(elements.sidebar);
-    this.Sidebar(elements, config);
-
-    const icon = this.el.querySelector(".minimize-icon");
-    if (icon) {
-      icon.classList.toggle("rotate-180");
-    }
-  },
-
-  destroy() {
-    if (this.el && this.clickHandler) {
-      this.el.removeEventListener("click", this.clickHandler);
-      this.clickHandler = null;
-    }
-  },
-};
-
-export default Sidebar;
diff --git a/assets/vendor/topbar.js b/assets/vendor/topbar.js
deleted file mode 100644
index 4195727..0000000
--- a/assets/vendor/topbar.js
+++ /dev/null
@@ -1,165 +0,0 @@
-/**
- * @license MIT
- * topbar 2.0.0, 2023-02-04
- * https://buunguyen.github.io/topbar
- * Copyright (c) 2021 Buu Nguyen
- */
-(function (window, document) {
-  "use strict";
-
-  // https://gist.github.com/paulirish/1579671
-  (function () {
-    var lastTime = 0;
-    var vendors = ["ms", "moz", "webkit", "o"];
-    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
-      window.requestAnimationFrame =
-        window[vendors[x] + "RequestAnimationFrame"];
-      window.cancelAnimationFrame =
-        window[vendors[x] + "CancelAnimationFrame"] ||
-        window[vendors[x] + "CancelRequestAnimationFrame"];
-    }
-    if (!window.requestAnimationFrame)
-      window.requestAnimationFrame = function (callback, element) {
-        var currTime = new Date().getTime();
-        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
-        var id = window.setTimeout(function () {
-          callback(currTime + timeToCall);
-        }, timeToCall);
-        lastTime = currTime + timeToCall;
-        return id;
-      };
-    if (!window.cancelAnimationFrame)
-      window.cancelAnimationFrame = function (id) {
-        clearTimeout(id);
-      };
-  })();
-
-  var canvas,
-    currentProgress,
-    showing,
-    progressTimerId = null,
-    fadeTimerId = null,
-    delayTimerId = null,
-    addEvent = function (elem, type, handler) {
-      if (elem.addEventListener) elem.addEventListener(type, handler, false);
-      else if (elem.attachEvent) elem.attachEvent("on" + type, handler);
-      else elem["on" + type] = handler;
-    },
-    options = {
-      autoRun: true,
-      barThickness: 3,
-      barColors: {
-        0: "rgba(26,  188, 156, .9)",
-        ".25": "rgba(52,  152, 219, .9)",
-        ".50": "rgba(241, 196, 15,  .9)",
-        ".75": "rgba(230, 126, 34,  .9)",
-        "1.0": "rgba(211, 84,  0,   .9)",
-      },
-      shadowBlur: 10,
-      shadowColor: "rgba(0,   0,   0,   .6)",
-      className: null,
-    },
-    repaint = function () {
-      canvas.width = window.innerWidth;
-      canvas.height = options.barThickness * 5; // need space for shadow
-
-      var ctx = canvas.getContext("2d");
-      ctx.shadowBlur = options.shadowBlur;
-      ctx.shadowColor = options.shadowColor;
-
-      var lineGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);
-      for (var stop in options.barColors)
-        lineGradient.addColorStop(stop, options.barColors[stop]);
-      ctx.lineWidth = options.barThickness;
-      ctx.beginPath();
-      ctx.moveTo(0, options.barThickness / 2);
-      ctx.lineTo(
-        Math.ceil(currentProgress * canvas.width),
-        options.barThickness / 2
-      );
-      ctx.strokeStyle = lineGradient;
-      ctx.stroke();
-    },
-    createCanvas = function () {
-      canvas = document.createElement("canvas");
-      var style = canvas.style;
-      style.position = "fixed";
-      style.top = style.left = style.right = style.margin = style.padding = 0;
-      style.zIndex = 100001;
-      style.display = "none";
-      if (options.className) canvas.classList.add(options.className);
-      document.body.appendChild(canvas);
-      addEvent(window, "resize", repaint);
-    },
-    topbar = {
-      config: function (opts) {
-        for (var key in opts)
-          if (options.hasOwnProperty(key)) options[key] = opts[key];
-      },
-      show: function (delay) {
-        if (showing) return;
-        if (delay) {
-          if (delayTimerId) return;
-          delayTimerId = setTimeout(() => topbar.show(), delay);
-        } else  {
-          showing = true;
-          if (fadeTimerId !== null) window.cancelAnimationFrame(fadeTimerId);
-          if (!canvas) createCanvas();
-          canvas.style.opacity = 1;
-          canvas.style.display = "block";
-          topbar.progress(0);
-          if (options.autoRun) {
-            (function loop() {
-              progressTimerId = window.requestAnimationFrame(loop);
-              topbar.progress(
-                "+" + 0.05 * Math.pow(1 - Math.sqrt(currentProgress), 2)
-              );
-            })();
-          }
-        }
-      },
-      progress: function (to) {
-        if (typeof to === "undefined") return currentProgress;
-        if (typeof to === "string") {
-          to =
-            (to.indexOf("+") >= 0 || to.indexOf("-") >= 0
-              ? currentProgress
-              : 0) + parseFloat(to);
-        }
-        currentProgress = to > 1 ? 1 : to;
-        repaint();
-        return currentProgress;
-      },
-      hide: function () {
-        clearTimeout(delayTimerId);
-        delayTimerId = null;
-        if (!showing) return;
-        showing = false;
-        if (progressTimerId != null) {
-          window.cancelAnimationFrame(progressTimerId);
-          progressTimerId = null;
-        }
-        (function loop() {
-          if (topbar.progress("+.1") >= 1) {
-            canvas.style.opacity -= 0.05;
-            if (canvas.style.opacity <= 0.05) {
-              canvas.style.display = "none";
-              fadeTimerId = null;
-              return;
-            }
-          }
-          fadeTimerId = window.requestAnimationFrame(loop);
-        })();
-      },
-    };
-
-  if (typeof module === "object" && typeof module.exports === "object") {
-    module.exports = topbar;
-  } else if (typeof define === "function" && define.amd) {
-    define(function () {
-      return topbar;
-    });
-  } else {
-    this.topbar = topbar;
-  }
-}.call(this, window, document));
diff --git a/lib/geo/country/cache.ex b/lib/geo/country/cache.ex
index f12c95c..8c6fd86 100644
--- a/lib/geo/country/cache.ex
+++ b/lib/geo/country/cache.ex
@@ -154,7 +154,7 @@ defmodule Geo.Country.Cache do
 
   defp load_countries do
     try do
-      countries = Geo.Geography.get_all_countries!()
+      countries = Geo.Geography.list()
 
       # Sort by name for countries_by_name
       countries_by_name = Enum.sort_by(countries, fn country ->
diff --git a/lib/geo/geography.ex b/lib/geo/geography.ex
index 0d85140..f78db3b 100644
--- a/lib/geo/geography.ex
+++ b/lib/geo/geography.ex
@@ -7,9 +7,8 @@ defmodule Geo.Geography do
       define :create_country, action: :create
       define :upsert_country, action: :upsert
       define :update_country, action: :update
-      define :get_country_by_iso_code, action: :by_iso_code, args: [:iso_code]
       define :search_countries, action: :search_countries, args: [{:optional, :query}]
-      define :get_all_countries, action: :read
+      define :list, action: :read
     end
   end
 end
diff --git a/lib/geo_web/components/accordion.ex b/lib/geo_web/components/accordion.ex
deleted file mode 100644
index 435215c..0000000
--- a/lib/geo_web/components/accordion.ex
+++ /dev/null
@@ -1,2156 +0,0 @@
-defmodule GeoWeb.Components.Accordion do
-  @moduledoc """
-  The `GeoWeb.Components.Accordion` module provides a flexible and customizable accordion
-  component for Phoenix LiveView applications.
-
-  It supports a variety of configuration options including size, variant, color, padding,
-  and border styles.
-
-  ### Features
-
-  - **Customizable Design**: Supports multiple variants such as `"default"`, `"outline"`,
-  `"bordered"`, `"outline_separated"`, `"bordered_separated"`, `"transparent"`, and `"menu"`.
-  - **Size and Spacing**: Provides control over the size and spacing of accordion items
-  using predefined values such as `"extra_small"`, `"small"`, `"medium"`,
-  `"large"`, and `"extra_large"`.
-  - **Color Themes**: Offers a range of color options including `"primary"`,
-  `"secondary"`, `"success"`, `"warning"`, `"danger"`, `"info"`, `"silver"`, `"dark"`, and more.
-  - **Interactive Animations**: Includes interactive JavaScript-based animations
-  for showing and hiding content with smooth transitions.
-  - **Icon and Media Support**: Allows the inclusion of icons and images within
-  accordion items, enhancing the visual appeal and usability of the component.
-  """
-
-  use Phoenix.Component
-
-  alias Phoenix.LiveView.JS
-
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `accordion` component provides a collapsible structure with various styling options,
-  ideal for organizing content into expandable panels. It supports customizable attributes such
-  as `variant`, `color`, and `media_size`.
-
-  ## Examples
-
-  ```elixir
-  <.accordion id="test-108" media_size="medium" color="secondary">
-    <:item
-      title="Accordion Version native"
-      description="Need to be something like this yeehh!?"
-      image="https://img.icons8.com/clouds/256/000000/futurama-bender.png"
-    >
-      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Omnis fugit, voluptas nam quia,
-      sunt sapiente itaque velit illo sed nesciunt molestias commodi, veniam adipisci quo
-      laboriosam in ipsa illum tenetur.
-    </:item>
-    <:item
-      title="Accordion Version native"
-      description="Need to be something like this yeehh!?"
-      image="https://img.icons8.com/clouds/256/000000/futurama-bender.png"
-    >
-      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Omnis fugit, voluptas nam quia,
-      sunt sapiente itaque velit illo sed nesciunt molestias commodi, veniam adipisci quo
-      laboriosam in ipsa illum tenetur.
-    </:item>
-  </.accordion>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :space, :string, default: "small", doc: "Space between items"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-  attr :rounded, :string, default: "none", doc: "Determines the border radius"
-
-  attr :chevron_icon, :string,
-    default: "hero-chevron-right",
-    doc: "Determines the icon for the chevron"
-
-  attr :chevron_class, :string, default: nil, doc: "Determines the icon for the chevron"
-
-  attr :media_size, :string, default: "small", doc: "Determines size of the media elements"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  slot :item, required: true, doc: "Specifies item slot of a accordion" do
-    attr :title, :string,
-      required: true,
-      doc: "Specifies the title of the element",
-      doc: "Specifies the title of the element"
-
-    attr :description, :string, doc: "Determines a short description"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :image, :string, doc: "Image displayed alongside of an item"
-    attr :icon_wrapper_class, :string, doc: "Image displayed alongside of an item"
-    attr :hover, :string, doc: "Determines custom class for the hover"
-    attr :image_class, :string, doc: "Determines custom class for the image"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :content_class, :string, doc: "Determines custom class for the content"
-    attr :title_class, :string, doc: "Determines custom class for the title"
-    attr :summary_class, :string, doc: "Determines custom class for the summary"
-    attr :font_weight, :string, doc: "Determines custom class for the font weight"
-    attr :open, :boolean, doc: "Whether the accordion item is initially open or closed"
-  end
-
-  attr :rest, :global,
-    include: ~w(left_chevron right_chevron chevron hide_chevron),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def accordion(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "overflow-hidden w-full h-fit",
-        @variant == "menu" && menu_rounded(@rounded),
-        @variant != "menu" && rounded_size(@rounded, @variant),
-        color_variant(@variant, @color),
-        space_class(@space, @variant),
-        border_class(@border, @variant),
-        media_size(@media_size),
-        padding_size(@padding),
-        size_class(@size),
-        @class
-      ]}
-      {drop_rest(@rest)}
-    >
-      <div
-        :for={{item, index} <- Enum.with_index(@item, 1)}
-        class={["group accordion-item-wrapper", item[:class]]}
-      >
-        <div
-          id={"#{@id}-#{index}-role-button"}
-          role="button"
-          tabindex="0"
-          aria-expanded="false"
-          aria-controls={"#{@id}-#{index}"}
-          class={[
-            "accordion-summary block w-full",
-            "transition-all duration-100 ease-in-out [&.active-accordion-button_.accordion-chevron]:rotate-90",
-            item[:summary_class]
-          ]}
-        >
-          <.native_chevron_position
-            id={"#{@id}-#{index}-open-chevron"}
-            phx-click={
-              show_accordion_content("#{@id}-#{index}")
-              |> JS.hide()
-              |> JS.show(to: "##{@id}-#{index}-close-chevron")
-            }
-            position={chevron_position(@rest)}
-            chevron_icon={@chevron_icon}
-            chevron_class={@chevron_class}
-            item={item}
-            hide_chevron={@rest[:hide_chevron] || false}
-          />
-
-          <.native_chevron_position
-            id={"#{@id}-#{index}-close-chevron"}
-            phx-click={
-              hide_accordion_content("#{@id}-#{index}")
-              |> JS.hide()
-              |> JS.show(to: "##{@id}-#{index}-open-chevron")
-            }
-            position={chevron_position(@rest)}
-            chevron_icon={@chevron_icon}
-            chevron_class={@chevron_class}
-            item={item}
-            class="hidden"
-            hide_chevron={@rest[:hide_chevron] || false}
-          />
-        </div>
-        <.focus_wrap
-          id={"#{@id}-#{index}"}
-          role="region"
-          aria-labelledby={"#{@id}-#{index}-role-button"}
-          class="accordion-content-wrapper relative hidden transition [&:not(.active)_.accordion-content]:grid-rows-[0fr] [&.active_.accordion-content]:grid-rows-[1fr]"
-        >
-          <div
-            id={"#{@id}-#{index}-content"}
-            class={[
-              "accordion-content transition-all duration-500 grid",
-              item[:content_class]
-            ]}
-          >
-            <div class="overflow-hidden">
-              {render_slot(item)}
-            </div>
-          </div>
-        </.focus_wrap>
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  The Native Accordion component provides an expandable structure that uses the native `<details>`
-  HTML element.
-
-  It offers various customization options such as `variant`, `color`, and `media_size` for
-  styling and configuration.
-
-  ## Examples
-  ```elixir
-  <.native_accordion name="example-zero" media_size="small">
-    <:item
-      title="Accordion Version native"
-      description="Need to be something like this yeehh!?"
-      image="https://img.icons8.com/clouds/256/000000/futurama-bender.png"
-    >
-      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Omnis fugit, voluptas nam quia,
-      sunt sapiente itaque velit illo sed nesciunt molestias commodi, veniam adipisci quo
-      laboriosam in ipsa illum tenetur.
-    </:item>
-    <:item
-      title="Accordion Version native"
-      description="Need to be something like this yeehh!?"
-      image="https://img.icons8.com/clouds/256/000000/futurama-bender.png"
-    >
-      Lorem ipsum dolor, sit amet consectetur adipisicing elit. Omnis fugit, voluptas nam quia,
-      sunt sapiente itaque velit illo sed nesciunt molestias commodi, veniam adipisci quo
-      laboriosam in ipsa illum tenetur.
-    </:item>
-  </.native_accordion>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :name, :string, default: nil, doc: "Specifies the name of the element"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :space, :string, default: "small", doc: "Space between items"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-
-  attr :rounded, :string, default: "none", doc: "Determines the border radius"
-
-  attr :media_size, :string, default: "small", doc: "Determines size of the media elements"
-
-  attr :chevron_icon, :string,
-    default: "hero-chevron-right",
-    doc: "Determines the icon for the chevron"
-
-  attr :chevron_class, :string, default: nil, doc: "Determines the icon for the chevron"
-
-  slot :item, required: true, doc: "Specifies item slot of a accordion" do
-    attr :title, :string, required: true, doc: "Specifies the title of the element"
-    attr :description, :string, doc: "Determines a short description"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :image, :string, doc: "Image displayed alongside of an item"
-    attr :image_class, :string, doc: "Determines custom class for the image"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :content_class, :string, doc: "Determines custom class for the content"
-    attr :title_class, :string, doc: "Determines custom class for the title"
-    attr :summary_class, :string, doc: "Determines custom class for the summary"
-    attr :open, :boolean, doc: "Whether the accordion item is initially open or closed"
-  end
-
-  attr :rest, :global,
-    include: ~w(left_chevron right_chevron chevron hide_chevron),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def native_accordion(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "overflow-hidden",
-        @variant == "menu" && menu_rounded(@rounded),
-        @variant != "menu" && rounded_size(@rounded, @variant),
-        space_class(@space, @variant),
-        padding_size(@padding),
-        border_class(@border, @variant),
-        media_size(@media_size),
-        color_variant(@variant, @color),
-        @class
-      ]}
-      {drop_rest(@rest)}
-    >
-      <details
-        :for={item <- @item}
-        name={@name}
-        class={["group accordion-item-wrapper", item[:class]]}
-        open={item[:open] || false}
-      >
-        <summary class={[
-          "accordion-summary w-full group-open:mb-1",
-          "cursor-pointer transition-[margin,background,text] duration-[250ms] ease-in-out list-none",
-          item_color(@variant, @color),
-          item[:summary_class]
-        ]}>
-          <.native_chevron_position
-            position={chevron_position(@rest)}
-            chevron_icon={@chevron_icon}
-            item={item}
-            hide_chevron={@rest[:hide_chevron] || false}
-          />
-        </summary>
-
-        <div class={[
-          "-mt-1 shrink-0 transition-all duration-1000 ease-in-out opacity-0 group-open:opacity-100",
-          "-translate-y-4	group-open:translate-y-0 custom-accordion-content",
-          item_color(@variant, @color),
-          item[:content_class]
-        ]}>
-          {render_slot(item)}
-        </div>
-      </details>
-    </div>
-    """
-  end
-
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :item, :map, doc: "Determines each item"
-  attr :position, :string, values: ["left", "right"], doc: "Determines the element position"
-  attr :chevron_icon, :string, doc: "Determines the icon for the chevron"
-  attr :chevron_class, :string, default: nil, doc: "Determines the icon for the chevron"
-  attr :hide_chevron, :boolean, default: false, doc: "Hide chevron icon"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  defp native_chevron_position(%{position: "left"} = assigns) do
-    ~H"""
-    <div id={@id} class={[@class]} {@rest}>
-      <div class={[
-        "flex flex-nowrap items-center rtl:justify-start ltr:justify-start gap-2",
-        @item[:hover]
-      ]}>
-        <.icon
-          :if={!@hide_chevron}
-          name={@chevron_icon}
-          class={[
-            "accordion-chevron transition-transform duration-300",
-            "ease-in-out group-open:rotate-90 rotate-180 rtl:rotate-0 shrink-0",
-            @chevron_class
-          ]}
-        />
-
-        <div class="flex items-center gap-2">
-          <img
-            :if={!is_nil(@item[:image])}
-            class={["accordion-title-media shrink-0", @item[:image_class]]}
-            src={@item[:image]}
-          />
-
-          <div class={["shrink-0", @item[:icon_wrapper_class]]}>
-            <.icon
-              :if={!is_nil(@item[:icon])}
-              name={@item[:icon]}
-              class={@item[:icon_class] || "accordion-title-media"}
-            />
-          </div>
-
-          <div class={["space-y-2"]}>
-            <div class={[
-              @item[:title_class],
-              @item[:font_weight]
-            ]}>
-              {@item[:title]}
-            </div>
-
-            <div :if={!is_nil(@item[:description])} class="text-xs font-light">
-              {@item[:description]}
-            </div>
-          </div>
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp native_chevron_position(%{position: "right"} = assigns) do
-    ~H"""
-    <div id={@id} class={[@class]} {@rest}>
-      <div class={[
-        "flex items-center justify-between gap-2",
-        @item[:hover]
-      ]}>
-        <div class="flex items-center gap-2">
-          <img
-            :if={!is_nil(@item[:image])}
-            class={["accordion-title-media shrink-0", @item[:image_class]]}
-            src={@item[:image]}
-          />
-
-          <div class={["shrink-0", @item[:icon_wrapper_class]]}>
-            <.icon
-              :if={!is_nil(@item[:icon])}
-              name={@item[:icon]}
-              class={@item[:icon_class] || "accordion-title-media"}
-            />
-          </div>
-
-          <div class={["space-y-2", @item[:title_class]]}>
-            <div class={[
-              @item[:title_class],
-              @item[:font_weight]
-            ]}>
-              {@item[:title]}
-            </div>
-
-            <div :if={!is_nil(@item[:description])} class="text-xs font-light">
-              {@item[:description]}
-            </div>
-          </div>
-        </div>
-
-        <.icon
-          :if={!@hide_chevron}
-          name={@chevron_icon}
-          class={[
-            "accordion-chevron transition-transform duration-300",
-            "ease-in-out group-open:rotate-90 rtl:rotate-180 shrink-0",
-            @chevron_class
-          ]}
-        />
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  Shows the content of an accordion item and applies the necessary CSS classes to indicate
-  its active state.
-
-  ## Parameters
-
-    - `js`: (optional) An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `id`: A string representing the unique identifier of the accordion item. It is used
-    to target the specific DOM elements for showing content and applying classes.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to show the accordion content,
-    add the `active` class to the content, and add the `active-accordion-button`
-    class to the corresponding button.
-
-  ## Example
-  ```elixir
-  show_accordion_content(%JS{}, "accordion-item-1")
-  ```
-
-  This example will show the content of the accordion item with the ID `accordion-item-1`
-  and add the active classes to it.
-  """
-  def show_accordion_content(js \\ %JS{}, id) when is_binary(id) do
-    js
-    |> JS.show(to: "##{id}")
-    |> JS.add_class("active", to: "##{id}")
-    |> JS.add_class("active-accordion-button", to: "##{id}-role-button")
-    |> JS.set_attribute({"aria-expanded", "true"}, to: "##{id}-role-button")
-  end
-
-  @doc """
-  Hides the content of an accordion item and removes the active CSS classes to indicate its
-  inactive state.
-
-  ## Parameters
-
-    - `js`: (optional) An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `id`: A string representing the unique identifier of the accordion item. It is used to
-    target the specific DOM elements for hiding content and removing classes.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to remove the `active` class from
-    the content and the `active-accordion-button` class from the corresponding button.
-
-  ## Example
-  ```elixir
-  hide_accordion_content(%JS{}, "accordion-item-1")
-  ```
-  This example will hide the content of the accordion item with the ID "accordion-item-1" and remove
-  the active classes from it.
-  """
-  def hide_accordion_content(js \\ %JS{}, id) do
-    js
-    |> JS.remove_class("active", to: "##{id}")
-    |> JS.remove_class("active-accordion-button", to: "##{id}-role-button")
-    |> JS.set_attribute({"aria-expanded", "false"}, to: "##{id}-role-button")
-  end
-
-  defp space_class(_, variant)
-       when variant not in ["outline_separated", "bordered_separated", "base_separated"],
-       do: nil
-
-  defp space_class("extra_small", _), do: "accordion-item-gap space-y-2"
-
-  defp space_class("small", _), do: "accordion-item-gap space-y-3"
-
-  defp space_class("medium", _), do: "accordion-item-gap space-y-4"
-
-  defp space_class("large", _), do: "accordion-item-gap space-y-5"
-
-  defp space_class("extra_large", _), do: "accordion-item-gap space-y-6"
-
-  defp space_class("none", _), do: nil
-
-  defp space_class(params, _) when is_binary(params), do: params
-
-  defp menu_rounded("extra_small"), do: "[&_.accordion-summary]:rounded-sm"
-
-  defp menu_rounded("small"), do: "[&_.accordion-summary]:rounded"
-
-  defp menu_rounded("medium"), do: "[&_.accordion-summary]:rounded-md"
-
-  defp menu_rounded("large"), do: "[&_.accordion-summary]:rounded-lg"
-
-  defp menu_rounded("extra_large"), do: "[&_.accordion-summary]:rounded-xl"
-
-  defp menu_rounded("full"), do: "[&_.accordion-summary]:rounded-full"
-
-  defp menu_rounded(params) when is_binary(params), do: params
-
-  defp media_size("extra_small"), do: "[&>.accordion-item-wrapper_.accordion-title-media]:size-12"
-
-  defp media_size("small"), do: "[&>.accordion-item-wrapper_.accordion-title-media]:size-14"
-
-  defp media_size("medium"), do: "[&>.accordion-item-wrapper_.accordion-title-media]:size-16"
-
-  defp media_size("large"), do: "[&>.accordion-item-wrapper_.accordion-title-media]:size-20"
-
-  defp media_size("extra_large"), do: "[&>.accordion-item-wrapper_.accordion-title-media]:size-24"
-
-  defp media_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "text-xs [&_.accordion-summary]:py-1 [&_.accordion-summary]:px-2"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "text-sm [&_.accordion-summary]:py-1.5 [&_.accordion-summary]:px-3"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "text-base [&_.accordion-summary]:py-2 [&_.accordion-summary]:px-4"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "text-lg [&_.accordion-summary]:py-2.5 [&_.accordion-summary]:px-5"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "text-xl [&_.accordion-summary]:py-3 [&_.accordion-summary]:px-5"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small", variant)
-       when variant in ["outline_separated", "bordered_separated", "base_separated"] do
-    [
-      "[&_.accordion-item-wrapper_.accordion-summary]:rounded-sm"
-    ]
-  end
-
-  defp rounded_size("small", variant)
-       when variant in ["outline_separated", "bordered_separated", "base_separated"] do
-    [
-      "[&_.accordion-item-wrapper_.accordion-summary]:rounded"
-    ]
-  end
-
-  defp rounded_size("medium", variant)
-       when variant in ["outline_separated", "bordered_separated", "base_separated"] do
-    [
-      "[&_.accordion-item-wrapper_.accordion-summary]:rounded-md"
-    ]
-  end
-
-  defp rounded_size("medium", variant)
-       when variant in ["outline_separated", "bordered_separated", "base_separated"] do
-    [
-      "[&_.accordion-item-wrapper_.accordion-summary]:rounded-md"
-    ]
-  end
-
-  defp rounded_size("large", variant)
-       when variant in ["outline_separated", "bordered_separated", "base_separated"] do
-    [
-      "[&_.accordion-item-wrapper_.accordion-summary]:rounded-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large", variant)
-       when variant in ["outline_separated", "bordered_separated", "base_separated"] do
-    [
-      "[&_.accordion-item-wrapper_.accordion-summary]:rounded-xl"
-    ]
-  end
-
-  defp rounded_size("extra_small", variant)
-       when variant in ["default", "bordered", "outline", "base", "shadow", "gradient"] do
-    [
-      "rounded-sm [&:not(.accordion-item-gap)>.accordion-item-wrapper:first-child>.accordion-summary]:rounded-t-sm",
-      "[&.accordion-item-gap>.accordion-item-wrapper>.accordion-summary]:rounded-t-sm",
-      "[&.accordion-item-gap>.accordion-item-wrapper>:not(.accordion-summary)]:rounded-b-sm"
-    ]
-  end
-
-  defp rounded_size("small", variant)
-       when variant in ["default", "bordered", "outline", "base", "shadow", "gradient"] do
-    [
-      "rounded [&:not(.accordion-item-gap)>.accordion-item-wrapper:first-child>.accordion-summary]:rounded-t",
-      "[&.accordion-item-gap>.accordion-item-wrapper>.accordion-summary]:rounded-t",
-      "[&.accordion-item-gap>.accordion-item-wrapper>:not(.accordion-summary)]:rounded-b"
-    ]
-  end
-
-  defp rounded_size("medium", variant)
-       when variant in ["default", "bordered", "outline", "base", "shadow", "gradient"] do
-    [
-      "rounded-md [&:not(.accordion-item-gap)>.accordion-item-wrapper:first-child>.accordion-summary]:rounded-t-md",
-      "[&.accordion-item-gap>.accordion-item-wrapper>.accordion-summary]:rounded-t-md",
-      "[&.accordion-item-gap>.accordion-item-wrapper>:not(.accordion-summary)]:rounded-b-md"
-    ]
-  end
-
-  defp rounded_size("large", variant)
-       when variant in ["default", "bordered", "outline", "base", "shadow", "gradient"] do
-    [
-      "rounded-lg [&:not(.accordion-item-gap)>.accordion-item-wrapper:first-child>.accordion-summary]:rounded-t-lg",
-      "[&.accordion-item-gap>.accordion-item-wrapper>.accordion-summary]:rounded-t-lg",
-      "[&.accordion-item-gap>.accordion-item-wrapper>:not(.accordion-summary)]:rounded-b-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large", variant)
-       when variant in ["default", "bordered", "outline", "base", "shadow", "gradient"] do
-    [
-      "rounded-xl [&:not(.accordion-item-gap)>.accordion-item-wrapper:first-child>.accordion-summary]:rounded-t-xl",
-      "[&.accordion-item-gap>.accordion-item-wrapper>.accordion-summary]:rounded-t-xl",
-      "[&.accordion-item-gap>.accordion-item-wrapper>:not(.accordion-summary)]:rounded-b-xl"
-    ]
-  end
-
-  defp rounded_size("none", _), do: nil
-
-  defp rounded_size(params, _) when is_binary(params), do: params
-
-  defp padding_size("extra_small") do
-    [
-      "[&>.accordion-item-wrapper>.accordion-summary]:p-1",
-      "[&>.accordion-item-wrapper>.custom-accordion-content]:p-1",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper>.accordion-content]:px-1",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper.active>.accordion-content]:py-1"
-    ]
-  end
-
-  defp padding_size("small") do
-    [
-      "[&>.accordion-item-wrapper>.accordion-summary]:p-2",
-      "[&>.accordion-item-wrapper>.custom-accordion-content]:p-2",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper>.accordion-content]:px-2",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper.active>.accordion-content]:py-2"
-    ]
-  end
-
-  defp padding_size("medium") do
-    [
-      "[&>.accordion-item-wrapper>.accordion-summary]:p-3",
-      "[&>.accordion-item-wrapper>.custom-accordion-content]:p-3",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper>.accordion-content]:px-3",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper.active>.accordion-content]:py-3"
-    ]
-  end
-
-  defp padding_size("large") do
-    [
-      "[&>.accordion-item-wrapper>.accordion-summary]:p-4",
-      "[&>.accordion-item-wrapper>.custom-accordion-content]:p-4",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper>.accordion-content]:px-4",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper.active>.accordion-content]:py-4"
-    ]
-  end
-
-  defp padding_size("extra_large") do
-    [
-      "[&>.accordion-item-wrapper>.accordion-summary]:p-5",
-      "[&>.accordion-item-wrapper>.custom-accordion-content]:p-5",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper>.accordion-content]:px-5",
-      "[&>.accordion-item-wrapper>.accordion-content-wrapper.active>.accordion-content]:py-5"
-    ]
-  end
-
-  defp padding_size("zero"), do: "[&>.accordion-item-wrapper>.accordion-summary]:p-0"
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", "outline") do
-    [
-      "border-0",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-0",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-0"
-    ]
-  end
-
-  defp border_class("extra_small", "outline") do
-    [
-      "border",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b"
-    ]
-  end
-
-  defp border_class("small", "outline") do
-    [
-      "border-2",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-2",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-2"
-    ]
-  end
-
-  defp border_class("medium", "outline") do
-    [
-      "border-[3px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-[3px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-[3px]"
-    ]
-  end
-
-  defp border_class("large", "outline") do
-    [
-      "border-4",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-4",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-4"
-    ]
-  end
-
-  defp border_class("extra_large", "outline") do
-    [
-      "border-[5px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-[5px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-[5px]"
-    ]
-  end
-
-  defp border_class("none", "bordered") do
-    [
-      "border-0",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-0",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-0"
-    ]
-  end
-
-  defp border_class("extra_small", "bordered") do
-    [
-      "border",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b"
-    ]
-  end
-
-  defp border_class("small", "bordered") do
-    [
-      "border-2",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-2",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-2"
-    ]
-  end
-
-  defp border_class("medium", "bordered") do
-    [
-      "border-[3px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-[3px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-[3px]"
-    ]
-  end
-
-  defp border_class("large", "bordered") do
-    [
-      "border-4",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-4",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-4"
-    ]
-  end
-
-  defp border_class("extra_large", "bordered") do
-    [
-      "border-[5px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-[5px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-[5px]"
-    ]
-  end
-
-  defp border_class("none", "bordered_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-0"
-  end
-
-  defp border_class("extra_small", "bordered_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border"
-  end
-
-  defp border_class("small", "bordered_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-2"
-  end
-
-  defp border_class("medium", "bordered_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-[3px]"
-  end
-
-  defp border_class("large", "bordered_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-4"
-  end
-
-  defp border_class("extra_large", "bordered_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-[5px]"
-  end
-
-  defp border_class("none", "outline_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-0"
-  end
-
-  defp border_class("extra_small", "outline_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border"
-  end
-
-  defp border_class("small", "outline_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-2"
-  end
-
-  defp border_class("medium", "outline_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-[3px]"
-  end
-
-  defp border_class("large", "outline_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-4"
-  end
-
-  defp border_class("extra_large", "outline_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-[5px]"
-  end
-
-  defp border_class("none", "base") do
-    [
-      "border-0",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-0",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-0"
-    ]
-  end
-
-  defp border_class("extra_small", "base") do
-    [
-      "border",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b"
-    ]
-  end
-
-  defp border_class("small", "base") do
-    [
-      "border-2",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-2",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-2"
-    ]
-  end
-
-  defp border_class("medium", "base") do
-    [
-      "border-[3px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-[3px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-[3px]"
-    ]
-  end
-
-  defp border_class("large", "base") do
-    [
-      "border-4",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-4",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-4"
-    ]
-  end
-
-  defp border_class("extra_large", "base") do
-    [
-      "border-[5px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-b-[5px]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-b-[5px]"
-    ]
-  end
-
-  defp border_class("none", "base_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-0"
-  end
-
-  defp border_class("extra_small", "base_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border"
-  end
-
-  defp border_class("small", "base_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-2"
-  end
-
-  defp border_class("medium", "base_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-[3px]"
-  end
-
-  defp border_class("large", "base_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-4"
-  end
-
-  defp border_class("extra_large", "base_separated") do
-    "[&>.accordion-item-wrapper>.accordion-summary]:border-[5px]"
-  end
-
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "text-[#09090b] border-[#e4e4e7] bg-white",
-      "dark:text-[#FAFAFA] dark:border-[#27272a] dark:bg-[#18181B]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#F8F9FA] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#242424]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#e4e4e7]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#e4e4e7]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#27272a]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("base_separated", _) do
-    [
-      "text-[#09090b] [&>.accordion-item-wrapper>.accordion-summary]:border-[#e4e4e7]",
-      "[&>.accordion-item-wrapper]:bg-white",
-      "dark:text-[#FAFAFA] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#27272a]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#18181B]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#F8F9FA] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#242424]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#DDDDDD]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#4B4B4B]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#282828]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white hover:bg-[#016974] dark:bg-[#01B8CA] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#016974]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#175BCC]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#166C3B]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#976A01]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#BB032A]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#08638C]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#653C94]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#7E4B2A]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#727272]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "border-[#4B4B4B] dark:border-[#DDDDDD] text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "hover:text-[#282828] dark:hover:text-[#E8E8E8]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#4B4B4B]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#4B4B4B]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#DDDDDD]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "border-[#007F8C] dark:border-[#01B8CA] text-[#007F8C] dark:text-[#01B8CA]",
-      "hover:text-[#016974] dark:hover:text-[#77D5E3]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#007F8C]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#007F8C]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#01B8CA]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "border-[#266EF1] dark:border-[#6DAAFB] text-[#266EF1] dark:text-[#6DAAFB]",
-      "hover:text-[#175BCC] dark:hover:text-[#A9C9FF]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#266EF1]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#266EF1]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#6DAAFB]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "border-[#0E8345] dark:border-[#06C167] text-[#0E8345] dark:text-[#06C167]",
-      "hover:text-[#166C3B] dark:hover:text-[#7FD99A]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#0E8345]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#0E8345]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#06C167]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "border-[#CA8D01] dark:border-[#FDC034] text-[#CA8D01] dark:text-[#FDC034]",
-      "hover:text-[#976A01] dark:hover:text-[#FDD067]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#CA8D01]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#CA8D01]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#FDC034]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "border-[#DE1135] dark:border-[#FC7F79] text-[#DE1135] dark:text-[#FC7F79]",
-      "hover:text-[#BB032A] dark:hover:text-[#FFB2AB]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#DE1135]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#DE1135]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#FC7F79]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "border-[#0B84BA] dark:border-[#3EB7ED] text-[#0B84BA] dark:text-[#3EB7ED]",
-      "hover:text-[#08638C] dark:hover:text-[#6EC9F2]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#0B84BA]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#0B84BA]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#3EB7ED]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "border-[#8750C5] dark:border-[#BA83F9] text-[#8750C5] dark:text-[#BA83F9]",
-      "hover:text-[#653C94] dark:hover:text-[#CBA2FA]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#8750C5]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#8750C5]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#BA83F9]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "border-[#A86438] dark:border-[#DB976B] text-[#A86438] dark:text-[#DB976B]",
-      "hover:text-[#7E4B2A] dark:hover:text-[#7E4B2A]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#A86438]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#A86438]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#DB976B]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "border-[#868686] dark:border-[#A6A6A6] text-[#868686] dark:text-[#A6A6A6]",
-      "hover:text-[#727272] dark:hover:text-[#BBBBBB]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#868686]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#868686]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#A6A6A6]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      ":bg-white text-black border-[#DDDDDD]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#DDDDDD]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#DDDDDD]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      ":bg-[#282828] text-white border-[#727272]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#727272]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#727272]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E8E8E8] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#5E5E5E]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#282828]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#282828]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#E8E8E8]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#CDEEF3] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#1A535A]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#016974]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#016974]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#77D5E3]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#DEE9FE] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#1948A3]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#175BCC]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#175BCC]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#A9C9FF]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#D3EFDA] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#0D572D]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#166C3B]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#166C3B]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#7FD99A]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FEEFCC] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#654600]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#976A01]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#976A01]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#FDD067]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FFE1DE] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#950F22]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#BB032A]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#BB032A]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#FFB2AB]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#CFEDFB] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#06425D]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#0B84BA]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#0B84BA]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#6EC9F2]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#EEE0FD] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#442863]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#653C94]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#653C94]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#CBA2FA]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#F6E5DA] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#54321C]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#7E4B2A]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#7E4B2A]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#E4B190]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E8E8E8] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#5E5E5E]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#727272]",
-      "[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#727272]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-summary]:border-[#BBBBBB]",
-      "dark:[&>.accordion-item-wrapper:not(:last-child)>.accordion-content-wrapper.active]:border-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "natural") do
-    [
-      "text-[#282828] [&>.accordion-item-wrapper>.accordion-summary]:border-[#282828]",
-      "[&>.accordion-item-wrapper]:bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#E8E8E8]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#4B4B4B]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E8E8E8] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#5E5E5]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "primary") do
-    [
-      "text-[#016974] [&>.accordion-item-wrapper>.accordion-summary]:border-[#016974]",
-      "[&>.accordion-item-wrapper]:bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#77D5E3]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#002D33]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#CDEEF3] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#1A535A]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "secondary") do
-    [
-      "text-[#175BCC] [&>.accordion-item-wrapper>.accordion-summary]:border-[#175BCC]",
-      "[&>.accordion-item-wrapper]:bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#A9C9FF]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#002661]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#DEE9FE] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#1948A3]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "success") do
-    [
-      "text-[#166C3B] [&>.accordion-item-wrapper>.accordion-summary]:border-[#166C3B]",
-      "[&>.accordion-item-wrapper]:bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#7FD99A]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#002F14]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#D3EFDA] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#0D572D]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "warning") do
-    [
-      "text-[#976A01] [&>.accordion-item-wrapper>.accordion-summary]:border-[#976A01]",
-      "[&>.accordion-item-wrapper]:bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#FDD067]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#322300]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FEEFCC] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#654600]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "danger") do
-    [
-      "text-[#BB032A] [&>.accordion-item-wrapper>.accordion-summary]:border-[#BB032A]",
-      "[&>.accordion-item-wrapper]:bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#FFB2AB]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#520810]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FFE1DE] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#950F22]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "info") do
-    [
-      "text-[#0B84BA] [&>.accordion-item-wrapper>.accordion-summary]:border-[#0B84BA]",
-      "[&>.accordion-item-wrapper]:bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#6EC9F2]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#03212F]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#CFEDFB] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#06425D]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "misc") do
-    [
-      "text-[#653C94] [&>.accordion-item-wrapper>.accordion-summary]:border-[#653C94]",
-      "[&>.accordion-item-wrapper]:bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#CBA2FA]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#221431]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#EEE0FD] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#442863]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "dawn") do
-    [
-      "text-[#7E4B2A] [&>.accordion-item-wrapper>.accordion-summary]:border-[#7E4B2A]",
-      "[&>.accordion-item-wrapper]:bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#E4B190]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#2A190E]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#F6E5DA] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#54321C]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "silver") do
-    [
-      "text-[#727272] [&>.accordion-item-wrapper>.accordion-summary]:border-[#727272]",
-      "[&>.accordion-item-wrapper]:bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#BBBBBB]",
-      "dark:[&>.accordion-item-wrapper]:bg-[#4B4B4B]",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E8E8E8] dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#5E5E5E]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "natural") do
-    [
-      "text-[#4B4B4B] [&>.accordion-item-wrapper>.accordion-summary]:border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#DDDDDD]",
-      "hover:text-[#282828] dark:hover:text-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "primary") do
-    [
-      "text-[#007F8C] [&>.accordion-item-wrapper>.accordion-summary]:border-[#007F8C] ",
-      "dark:text-[#01B8CA] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#01B8CA]",
-      "hover:text-[#016974] dark:hover:text-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "secondary") do
-    [
-      "text-[#266EF1] [&>.accordion-item-wrapper>.accordion-summary]:border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#6DAAFB]",
-      "hover:text-[#175BCC] dark:hover:text-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "success") do
-    [
-      "text-[#0E8345] [&>.accordion-item-wrapper>.accordion-summary]:border-[#0E8345]",
-      "dark:text-[#06C167] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#06C167]",
-      "hover:text-[#166C3B] dark:hover:text-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "warning") do
-    [
-      "text-[#CA8D01] [&>.accordion-item-wrapper>.accordion-summary]:border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#FDC034]",
-      "hover:text-[#976A01] dark:hover:text-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "danger") do
-    [
-      "text-[#DE1135] [&>.accordion-item-wrapper>.accordion-summary]:border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#FC7F79]",
-      "hover:text-[#BB032A] dark:hover:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "info") do
-    [
-      "text-[#0B84BA] [&>.accordion-item-wrapper>.accordion-summary]:border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#3EB7ED]",
-      "hover:text-[#08638C] dark:hover:text-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "misc") do
-    [
-      "text-[#8750C5] [&>.accordion-item-wrapper>.accordion-summary]:border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#BA83F9]",
-      "hover:text-[#653C94] dark:hover:text-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "dawn") do
-    [
-      "text-[#A86438] [&>.accordion-item-wrapper>.accordion-summary]:border-[#A86438]",
-      "dark:text-[#DB976B] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#DB976B]",
-      "hover:text-[#7E4B2A] dark:hover:text-[#7E4B2A]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "silver") do
-    [
-      "text-[#868686] [&>.accordion-item-wrapper>.accordion-summary]:border-[#868686]",
-      "dark:text-[#A6A6A6] dark:[&>.accordion-item-wrapper>.accordion-summary]:border-[#A6A6A6]",
-      "hover:text-[#727272] dark:hover:text-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("menu", "white") do
-    [
-      "[&>.accordion-item-wrapper]:bg-white text-black"
-    ]
-  end
-
-  defp color_variant("menu", "dark") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("menu", "natural") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#4B4B4B] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "primary") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#007F8C] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "secondary") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#266EF1] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "success") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#0E8345] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "warning") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#CA8D01] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "danger") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#DE1135] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "info") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#0B84BA] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "misc") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#8750C5] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "dawn") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#A86438] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("menu", "silver") do
-    [
-      "[&>.accordion-item-wrapper]:bg-[#868686] text-white",
-      "dark:[&>.accordion-item-wrapper]:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#282828]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E8E8E8]",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#016974]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#77D5E3]",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#175BCC]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#A9C9FF]",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#166C3B]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#7FD99A]",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#976A01]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FDD067]",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#BB032A]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#FFB2AB]",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#08638C]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#6EC9F2]",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#653C94]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#CBA2FA]",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#7E4B2A]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#E4B190]",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#727272]",
-      "dark:hover:[&>.accordion-item-wrapper>.accordion-summary]:bg-[#BBBBBB]",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp item_color("base", _) do
-    [
-      "group-open:bg-white group-open:text-[#09090b] dark:group-open:bg-[#18181B] dark:group-open:text-[#FAFAFA]"
-    ]
-  end
-
-  defp item_color("base_separated", _) do
-    [
-      "group-open:bg-white group-open:text-[#09090b] dark:group-open:bg-[#18181B] dark:group-open:text-[#FAFAFA]"
-    ]
-  end
-
-  defp item_color("default", "white") do
-    [
-      "group-open:bg-white text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp item_color("default", "dark") do
-    [
-      "group-open:bg-[#282828] text-white",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp item_color("default", "natural") do
-    [
-      "group-open:bg-[#4B4B4B] text-white",
-      "dark:group-open:bg-[#DDDDDD] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#282828] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp item_color("default", "primary") do
-    [
-      "group-open:bg-[#007F8C] text-white",
-      "dark:group-open:bg-[#01B8CA] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#016974] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#77D5E3]"
-    ]
-  end
-
-  defp item_color("default", "secondary") do
-    [
-      "group-open:bg-[#266EF1] text-white",
-      "dark:group-open:bg-[#6DAAFB] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#175BCC] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp item_color("default", "success") do
-    [
-      "group-open:bg-[#0E8345] text-white",
-      "dark:group-open:bg-[#06C167] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#282828] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp item_color("default", "warning") do
-    [
-      "group-open:bg-[#CA8D01] text-white",
-      "dark:group-open:bg-[#FDC034] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#976A01] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#FDD067]"
-    ]
-  end
-
-  defp item_color("default", "danger") do
-    [
-      "group-open:bg-[#DE1135] text-white",
-      "dark:group-open:bg-[#FC7F79] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#BB032A] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp item_color("default", "info") do
-    [
-      "group-open:bg-[#0B84BA] text-white",
-      "dark:group-open:bg-[#3EB7ED] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#08638C] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp item_color("default", "misc") do
-    [
-      "group-open:bg-[#8750C5] text-white",
-      "dark:group-open:bg-[#BA83F9] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#653C94] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp item_color("default", "dawn") do
-    [
-      "group-open:bg-[#A86438] text-white",
-      "dark:group-open:bg-[#DB976B] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#7E4B2A] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#E4B190]"
-    ]
-  end
-
-  defp item_color("default", "silver") do
-    [
-      "group-open:bg-[#868686] text-white",
-      "dark:group-open:bg-[#A6A6A6] dark:text-black",
-      "group-open:hover:[&:is(.accordion-summary)]:bg-[#727272] dark:group-open:hover:[&:is(.accordion-summary)]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp item_color("outline", "natural") do
-    [
-      "group-open:bg-[#4B4B4B] group-open:text-white dark:group-open:bg-[#DDDDDD] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "primary") do
-    [
-      "group-open:bg-[#007F8C] group-open:text-white dark:group-open:bg-[#01B8CA] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "secondary") do
-    [
-      "group-open:bg-[#266EF1] group-open:text-white dark:group-open:bg-[#6DAAFB] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "success") do
-    [
-      "group-open:bg-[#0E8345] group-open:text-white dark:group-open:bg-[#06C167] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "warning") do
-    [
-      "group-open:bg-[#CA8D01] group-open:text-white dark:group-open:bg-[#FDC034] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "danger") do
-    [
-      "group-open:bg-[#DE1135] group-open:text-white dark:group-open:bg-[#FC7F79] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "info") do
-    [
-      "group-open:bg-[#0B84BA] group-open:text-white dark:group-open:bg-[#3EB7ED] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "misc") do
-    [
-      "group-open:bg-[#8750C5] group-open:text-white dark:group-open:bg-[#BA83F9] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "dawn") do
-    [
-      "group-open:bg-[#A86438] group-open:text-white dark:group-open:bg-[#DB976B] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("outline", "silver") do
-    [
-      "group-open:bg-[#868686] group-open:text-white dark:group-open:bg-[#A6A6A6] dark:group-open:text-black",
-      "group-open:[&:is(.accordion-summary)]:border-b-0"
-    ]
-  end
-
-  defp item_color("bordered", "natural") do
-    [
-      "group-open:bg-[#4B4B4B] group-open:text-white dark:group-open:bg-[#DDDDDD] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "primary") do
-    [
-      "group-open:bg-[#007F8C] group-open:text-white dark:group-open:bg-[#01B8CA] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "secondary") do
-    [
-      "group-open:bg-[#266EF1] group-open:text-white dark:group-open:bg-[#6DAAFB] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "success") do
-    [
-      "group-open:bg-[#0E8345] group-open:text-white dark:group-open:bg-[#06C167] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "warning") do
-    [
-      "group-open:bg-[#CA8D01] group-open:text-white dark:group-open:bg-[#FDC034] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "danger") do
-    [
-      "group-open:bg-[#DE1135] group-open:text-white dark:group-open:bg-[#FC7F79] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "info") do
-    [
-      "group-open:bg-[#0B84BA] group-open:text-white dark:group-open:bg-[#3EB7ED] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "misc") do
-    [
-      "group-open:bg-[#8750C5] group-open:text-white dark:group-open:bg-[#BA83F9] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "dawn") do
-    [
-      "group-open:bg-[#A86438] group-open:text-white dark:group-open:bg-[#DB976B] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered", "silver") do
-    [
-      "group-open:bg-[#868686] group-open:text-white dark:group-open:bg-[#A6A6A6] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "natural") do
-    [
-      "group-open:bg-[#4B4B4B] group-open:text-white dark:group-open:bg-[#DDDDDD] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "primary") do
-    [
-      "group-open:bg-[#007F8C] group-open:text-white dark:group-open:bg-[#01B8CA] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "secondary") do
-    [
-      "group-open:bg-[#266EF1] group-open:text-white dark:group-open:bg-[#6DAAFB] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "success") do
-    [
-      "group-open:bg-[#0E8345] group-open:text-white dark:group-open:bg-[#06C167] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "warning") do
-    [
-      "group-open:bg-[#CA8D01] group-open:text-white dark:group-open:bg-[#FDC034] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "danger") do
-    [
-      "group-open:bg-[#DE1135] group-open:text-white dark:group-open:bg-[#FC7F79] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "info") do
-    [
-      "group-open:bg-[#0B84BA] group-open:text-white dark:group-open:bg-[#3EB7ED] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "misc") do
-    [
-      "group-open:bg-[#8750C5] group-open:text-white dark:group-open:bg-[#BA83F9] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "dawn") do
-    [
-      "group-open:bg-[#A86438] group-open:text-white dark:group-open:bg-[#DB976B] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("bordered_separated", "silver") do
-    [
-      "group-open:bg-[#868686] group-open:text-white dark:group-open:bg-[#A6A6A6] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "natural") do
-    [
-      "group-open:bg-[#4B4B4B] group-open:text-white dark:group-open:bg-[#DDDDDD] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "primary") do
-    [
-      "group-open:bg-[#007F8C] group-open:text-white dark:group-open:bg-[#01B8CA] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "secondary") do
-    [
-      "group-open:bg-[#266EF1] group-open:text-white dark:group-open:bg-[#6DAAFB] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "success") do
-    [
-      "group-open:bg-[#0E8345] group-open:text-white dark:group-open:bg-[#06C167] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "warning") do
-    [
-      "group-open:bg-[#CA8D01] group-open:text-white dark:group-open:bg-[#FDC034] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "danger") do
-    [
-      "group-open:bg-[#DE1135] group-open:text-white dark:group-open:bg-[#FC7F79] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "info") do
-    [
-      "group-open:bg-[#0B84BA] group-open:text-white dark:group-open:bg-[#3EB7ED] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "misc") do
-    [
-      "group-open:bg-[#8750C5] group-open:text-white dark:group-open:bg-[#BA83F9] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "dawn") do
-    [
-      "group-open:bg-[#A86438] group-open:text-white dark:group-open:bg-[#DB976B] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color("outline_separated", "silver") do
-    [
-      "group-open:bg-[#868686] group-open:text-white dark:group-open:bg-[#A6A6A6] dark:group-open:text-black"
-    ]
-  end
-
-  defp item_color(params, _) when is_binary(params), do: params
-
-  defp chevron_position(%{left_chevron: true}), do: "left"
-  defp chevron_position(%{right_chevron: true}), do: "right"
-  defp chevron_position(%{chevron: true}), do: "right"
-  defp chevron_position(_), do: "right"
-
-  defp drop_rest(rest) do
-    all_rest =
-      ~w(left_chevron right_chevron chevron hide_chevron)
-      |> Enum.map(&if(is_binary(&1), do: String.to_atom(&1), else: &1))
-
-    Map.drop(rest, all_rest)
-  end
-end
diff --git a/lib/geo_web/components/alert.ex b/lib/geo_web/components/alert.ex
deleted file mode 100644
index b96b971..0000000
--- a/lib/geo_web/components/alert.ex
+++ /dev/null
@@ -1,823 +0,0 @@
-defmodule GeoWeb.Components.Alert do
-  @moduledoc """
-  GeoWeb.Components.Alert module provides collection of alert components and helper functions for managing and displaying alerts
-  in a **Phoenix LiveView** application.
-
-  This module provides a set of customizable components for rendering various types of alerts,
-  such as information, warning, and error messages. It also includes functions to show and hide
-  alerts with smooth transition effects.
-
-  ## Components
-
-    - `flash/1`: Renders a flash notice with support for different styles and sizes.
-    - `flash_group/1`: Renders a group of flash messages with predefined content.
-    - `alert/1`: Renders a generic alert component with customizable styles and icons.
-
-  ## Functions
-
-    - `show_alert/2`: Displays an alert element using a defined transition effect.
-    - `hide_alert/2`: Hides an alert element using a defined transition effect.
-
-  ## Configuration
-
-  The module offers various configuration options through attributes and slots to allow
-  fine-grained control over the appearance and behavior of alerts. Attributes like `variant`,
-  `kind`, `position`, and `rounded` can be used to modify the styling, while slots provide
-  flexibility in rendering custom content within alerts.
-  """
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-
-  @doc type: :component
-  @doc """
-  The `flash` component is used to display flash messages with various styling options.
-  It supports customizable attributes such as `kind`, `variant`, and `position` for tailored appearance.
-
-  ## Examples
-
-  ```elixir
-  <.flash kind={:info} title="This is info titlee" width="full" size="large">
-    <p>This is info Description</p>
-  </.flash>
-
-  <.flash kind={:error} title="This is misc titlee" width="large" size="large" flash={@flash} />
-
-  <.flash_group flash={@flash} />
-
-  <.flash kind={:info} phx-mounted={show("#flash")}>Welcome Back!</.flash>
-  ```
-  """
-  attr :id, :string, doc: "A unique identifier is used to manage state and interaction"
-  attr :flash, :map, default: %{}, doc: "the map of flash messages to display"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :kind, :atom, default: :natural, doc: "used for styling and flash lookup"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :position, :string, default: "", doc: "Determines the element position"
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :border, :string, default: "extra_small", doc: "Determines the element border width"
-  attr :z_index, :string, default: "z-50", doc: "custom z-index"
-  attr :padding, :string, default: "small", doc: "Determines the element padding size"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :icon, :any,
-    default: "hero-chat-bubble-bottom-center-text",
-    doc: "Icon displayed alongside of an item"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling for contnet"
-
-  attr :title_class, :string,
-    default: "flex items-center gap-1.5 leading-6 font-semibold mb-1",
-    doc: "Custom CSS class for additional styling to tile"
-
-  attr :button_class, :string,
-    default: "p-2",
-    doc: "Custom CSS class for additional styling to tile"
-
-  slot :inner_block, doc: "Inner block that renders HEEx content"
-
-  def flash(assigns) do
-    assigns = assign_new(assigns, :id, fn -> "flash-#{assigns.variant}-#{assigns.kind}" end)
-
-    ~H"""
-    <div
-      :if={msg = render_slot(@inner_block) || Phoenix.Flash.get(@flash, @kind)}
-      id={@id}
-      phx-click={JS.push("lv:clear-flash", value: %{key: @kind}) |> hide_alert("##{@id}")}
-      role="alert"
-      aria-live="assertive"
-      aria-labelledby={@title && @id && "#{@id}-title"}
-      class={[
-        "flash-alert leading-5",
-        border_class(@border, @variant),
-        color_variant(@variant, @kind),
-        position_class(@position),
-        rounded_size(@rounded),
-        width_class(@width),
-        padding_size(@padding),
-        content_size(@size),
-        @font_weight,
-        @z_index,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class="flex items-center justify-between gap-2">
-        <div>
-          <div :if={@title} class={@title_class} id={@id && "#{@id}-title"}>
-            <.icon :if={!is_nil(@icon)} name={@icon} class="aler-icon" aria-hidden="true" /> {@title}
-          </div>
-
-          <div class={@content_class}>{msg}</div>
-        </div>
-
-        <button type="button" class={["group shrink-0", @button_class]} aria-label={gettext("close")}>
-          <.icon name="hero-x-mark-solid" class="aler-icon opacity-40 group-hover:opacity-70" />
-        </button>
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  Shows the flash group with standard titles and content.
-
-  ## Example
-  ```
-  <.flash_group flash={@flash} />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: "flash-group",
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "bordered", doc: "Determines the style"
-  attr :position, :string, default: "top_right", doc: "Position of flashes"
-  attr :class, :string, default: nil, doc: "Custom classes"
-  attr :z_index, :string, default: "z-50", doc: "custom z-index"
-  attr :flash, :map, required: true, doc: "the map of flash messages"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def flash_group(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={["[&_.flash-alert:not(:first-child)]:mt-3", position_class(@position), @z_index, @class]}
-      {@rest}
-    >
-      <.flash
-        kind={:info}
-        title={gettext("Success!")}
-        flash={@flash}
-        variant={@variant}
-        width="medium"
-      />
-      <.flash
-        kind={:error}
-        title={gettext("Error!")}
-        flash={@flash}
-        variant={@variant}
-        width="medium"
-      />
-      <.flash
-        id="client-error"
-        kind={:error}
-        variant={@variant}
-        title={gettext("We can't find the internet")}
-        phx-disconnected={show_alert(".phx-client-error #client-error")}
-        phx-connected={hide_alert("#client-error")}
-        width="medium"
-        hidden
-      >
-        {gettext("Attempting to reconnect")}
-        <.icon name="hero-arrow-path" class="ms-1 h-3 w-3 animate-spin" />
-      </.flash>
-
-      <.flash
-        id="server-error"
-        kind={:error}
-        variant={@variant}
-        title={gettext("Something went wrong!")}
-        phx-disconnected={show_alert(".phx-server-error #server-error")}
-        phx-connected={hide_alert("#server-error")}
-        width="medium"
-        hidden
-      >
-        {gettext("Hang in there while we get back on track")}
-        <.icon name="hero-arrow-path" class="ms-1 h-3 w-3 animate-spin" />
-      </.flash>
-    </div>
-    """
-  end
-
-  @doc """
-  The `alert` component is used to display alert messages with various styling options.
-  It supports attributes like `kind`, `variant`, and `position` to control its appearance and behavior.
-
-  ## Examples
-
-  ```elixir
-  <.alert kind={:info} title="This is info titlee" width="full" size="large">
-    <p>This is info Description</p>
-  </.alert>
-
-  <.alert kind={:misc} title="This is misc titlee" width="full" />
-
-  <.alert kind={:danger} title="This is title" width="large" size="extra_small" rounded="extra_large">
-    This is Danger
-  </.alert>
-
-  <.alert kind={:success} title="This is success title" size="extra_large" icon={nil}>
-    This is Success
-  </.alert>
-
-  <.alert kind={:primary}>This is Primary</.alert>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :kind, :atom, default: :natural, doc: "used for styling and flash lookup"
-  attr :variant, :string, default: "default", doc: "Determines the style"
-  attr :position, :string, default: "", doc: "Determines the element position"
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :border, :string, default: "extra_small", doc: "Determines the element border width"
-  attr :padding, :string, default: "small", doc: "Determines the element padding size"
-  attr :z_index, :string, default: "z-50", doc: "custom z-index"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :icon, :any,
-    default: "hero-chat-bubble-bottom-center-text",
-    doc: "Icon displayed alongside of an item"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :title_class, :string,
-    default: "flex items-center gap-1.5 leading-6 font-semibold mb-1",
-    doc: "Custom CSS class for additional styling to tile"
-
-  attr :icon_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to icon"
-
-  slot :inner_block, doc: "Inner block that renders HEEx content"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def alert(assigns) do
-    assigns = assigns |> assign_new(:id, fn -> "alert-#{random_id()}" end)
-
-    ~H"""
-    <div
-      id={@id}
-      role="alert"
-      aria-live="assertive"
-      aria-labelledby={@title && @id && "#{@id}-title"}
-      class={[
-        border_class(@border, @variant),
-        color_variant(@variant, @kind),
-        position_class(@position),
-        rounded_size(@rounded),
-        width_class(@width),
-        padding_size(@padding),
-        content_size(@size),
-        @font_weight,
-        @z_index,
-        @class
-      ]}
-      {@rest}
-    >
-      <div :if={@title} class={@title_class} id={@id && "#{@id}-title"}>
-        <.icon
-          :if={!is_nil(@icon)}
-          name={@icon}
-          class={["aler-icon", @icon_class]}
-          aria-hidden="true"
-        /> {@title}
-      </div>
-
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp padding_size("extra_small"), do: "p-2"
-
-  defp padding_size("small"), do: "p-3"
-
-  defp padding_size("medium"), do: "p-4"
-
-  defp padding_size("large"), do: "p-5"
-
-  defp padding_size("extra_large"), do: "p-6"
-
-  defp padding_size("none"), do: nil
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp width_class("extra_small"), do: "w-60"
-  defp width_class("small"), do: "w-64"
-  defp width_class("medium"), do: "w-72"
-  defp width_class("large"), do: "w-80"
-  defp width_class("extra_large"), do: "w-96"
-  defp width_class("full"), do: "w-full"
-  defp width_class("fit"), do: "w-fit"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp content_size("extra_small"), do: "text-[12px] [&_.aler-icon]:size-3.5"
-
-  defp content_size("small"), do: "text-[13px] [&_.aler-icon]:size-4"
-
-  defp content_size("medium"), do: "text-[14px] [&_.aler-icon]:size-5"
-
-  defp content_size("large"), do: "text-[15px] [&_.aler-icon]:size-6"
-
-  defp content_size("extra_large"), do: "text-[16px] [&_.aler-icon]:size-7"
-
-  defp content_size(params) when is_binary(params), do: params
-
-  defp position_class("top_left"), do: "fixed top-2 left-0 ml-2"
-  defp position_class("top_right"), do: "fixed top-2 right-0 mr-2"
-  defp position_class("bottom_left"), do: "fixed bottom-2 left-0 ml-2"
-  defp position_class("bottom_right"), do: "fixed bottom-2 right-0 mr-2"
-  defp position_class(params) when is_binary(params), do: params
-
-  defp border_class(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "gradient"
-            ],
-       do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", :white) do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", :dark) do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", :natural) do
-    ["bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"]
-  end
-
-  defp color_variant("default", :primary) do
-    ["bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"]
-  end
-
-  defp color_variant("default", :secondary) do
-    ["bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"]
-  end
-
-  defp color_variant("default", :success) do
-    ["bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"]
-  end
-
-  defp color_variant("default", :warning) do
-    ["bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"]
-  end
-
-  defp color_variant("default", type) when type in [:error, :danger] do
-    ["bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"]
-  end
-
-  defp color_variant("default", :info) do
-    ["bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"]
-  end
-
-  defp color_variant("default", :misc) do
-    ["bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"]
-  end
-
-  defp color_variant("default", :dawn) do
-    ["bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"]
-  end
-
-  defp color_variant("default", :silver) do
-    ["bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"]
-  end
-
-  defp color_variant("outline", :natural) do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", :primary) do
-    [
-      "text-[#007F8C] border-[#007F8C] ",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", :secondary) do
-    [
-      "text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", :success) do
-    [
-      "text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", :warning) do
-    [
-      "text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", type) when type in [:error, :danger] do
-    [
-      "text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", :info) do
-    [
-      "text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", :misc) do
-    [
-      "text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", :dawn) do
-    [
-      "text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", :silver) do
-    [
-      "text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", :natural) do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :primary) do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :secondary) do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :success) do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :warning) do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", type) when type in [:error, :danger] do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :info) do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :misc) do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :dawn) do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", :silver) do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", :white) do
-    ["bg-white text-black border-[#DDDDDD]"]
-  end
-
-  defp color_variant("bordered", :dark) do
-    ["bg-[#282828] text-white border-[#727272]"]
-  end
-
-  defp color_variant("bordered", :natural) do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", :primary) do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", :secondary) do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", :success) do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", :warning) do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", type) when type in [:error, :danger] do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", :info) do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", :misc) do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", :dawn) do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", :silver) do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", :natural) do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :primary) do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :secondary) do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :success) do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :warning) do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", type) when type in [:error, :danger] do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :info) do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :misc) do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :dawn) do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", :silver) do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  ## JS Commands
-
-  @doc """
-  Displays an alert element by applying a transition effect.
-
-  ## Parameters
-
-    - `js`: (optional) An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `selector`: A string representing the CSS selector of the alert element to be shown.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to show the alert element with a
-    smooth transition effect.
-
-  ## Transition Details
-
-    - The element transitions from an initial state of reduced opacity and scale
-    (`opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95`) to full opacity and scale
-    (`opacity-100 translate-y-0 sm:scale-100`) over a duration of 300 milliseconds.
-
-  ## Example
-
-    ```elixir
-    show_alert(%JS{}, "#alert-box")
-    ```
-
-  This example will show the alert element with the ID `alert-box` using the defined transition effect.
-  """
-
-  def show_alert(js \\ %JS{}, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  @doc """
-  Hides an alert element by applying a transition effect.
-
-  ## Parameters
-
-    - `js`: (optional) An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `selector`: A string representing the CSS selector of the alert element to be hidden.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to hide the alert element with
-    a smooth transition effect.
-
-  ## Transition Details
-
-    - The element transitions from full opacity and scale (`opacity-100 translate-y-0 sm:scale-100`)
-    to reduced opacity and scale (`opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95`)
-    over a duration of 200 milliseconds.
-
-  ## Example
-
-    ```elixir
-    hide_alert(%JS{}, "#alert-box")
-    ```
-
-  This example will hide the alert element with the ID `alert-box` using the defined transition effect.
-  """
-
-  def hide_alert(js \\ %JS{}, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-end
diff --git a/lib/geo_web/components/avatar.ex b/lib/geo_web/components/avatar.ex
deleted file mode 100644
index 6fed7ad..0000000
--- a/lib/geo_web/components/avatar.ex
+++ /dev/null
@@ -1,580 +0,0 @@
-defmodule GeoWeb.Components.Avatar do
-  @moduledoc """
-  The `GeoWeb.Components.Avatar` module provides a set of components for creating and
-  managing avatar elements in your **Phoenix LiveView** applications.
-
-  It supports various avatar types, including standard avatars, placeholders, and placeholder icons.
-  You can customize the appearance and behavior of avatars using attributes such as size, color,
-  border, and shadow.
-
-  ### Components
-
-  - **Avatar (`avatar/1`)**: Renders an individual avatar element, which can include an image,
-  icon, or text content. The component supports several attributes for customization,
-  such as size, color, shadow, and border radius. Slots are available for adding additional
-  content like icons.
-
-  - **Avatar Group (`avatar_group/1`)**: Renders a group of avatar elements arranged in a flex container.
-  You can control the spacing between avatars and provide custom styling using the
-  available attributes and slots.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `avatar` component is used to display user avatars with various customization options,
-  including size, shape, and styling.
-
-  It supports displaying an image or an icon with optional inner content.
-
-  ## Examples
-
-  ```elixir
-  <.avatar size="medium" rounded="full" color="silver">
-    <:icon name="hero-user" />
-    <.indicator size="small" bottom_right />
-  </.avatar>
-
-  <.avatar src="https://example.com/profile.jpg" size="extra_small" rounded="full">
-    <.indicator size="extra_small" bottom_left />
-  </.avatar>
-
-  <.avatar src="https://example.com/profile.jpg" size="extra_large" rounded="full">
-    <.indicator size="extra_small" color="success" top_left />
-  </.avatar>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :src, :string, default: nil, doc: "Media link"
-
-  attr :color, :string, default: "transparent", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :shadow, :string, default: "none", doc: "Determines shadow style"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rounded, :string, default: "medium", doc: "Determines the border radius"
-
-  attr :border, :string, default: "none", doc: "Determines border style"
-
-  slot :icon, required: false do
-    attr :name, :string, required: true, doc: "Specifies the name of the element"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :color, :string, doc: "Determines color theme"
-
-    attr :size, :string,
-      doc:
-        "Determines the overall size of the elements, including padding, font size, and other items"
-  end
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def avatar(%{src: src, rounded: "full"} = assigns) when not is_nil(src) do
-    ~H"""
-    <div class={[
-      "relative w-fit select-none",
-      size_class(@size, :image)
-    ]}>
-      <img
-        id={@id}
-        src={@src}
-        class={[
-          image_color(@color),
-          rounded_size(@rounded),
-          border_class(@border),
-          shadow_class(@shadow),
-          @class
-        ]}
-        {@rest}
-      />
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  def avatar(%{src: src, rounded: "full"} = assigns) when is_nil(src) do
-    ~H"""
-    <div
-      class={[
-        "relative overflow-hidden select-none",
-        color_class(@color),
-        rounded_size(@rounded),
-        border_class(@border),
-        shadow_class(@shadow),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={["flex items-center justify-center", size_class(@size, :text)]}>
-        <div :for={icon <- @icon} class={[icon[:size], icon[:color], icon[:class]]}>
-          <.icon name={icon[:name]} class={icon[:icon_class] || size_class(@size, :icon)} />
-        </div>
-        {render_slot(@inner_block)}
-      </div>
-    </div>
-    """
-  end
-
-  def avatar(%{src: src} = assigns) when not is_nil(src) do
-    ~H"""
-    <div class="relative w-fit select-none">
-      <img
-        id={@id}
-        src={@src}
-        class={[
-          image_color(@color),
-          rounded_size(@rounded),
-          size_class(@size),
-          border_class(@border),
-          shadow_class(@shadow),
-          @class
-        ]}
-        {@rest}
-      />
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  def avatar(assigns) do
-    ~H"""
-    <div
-      class={[
-        "relative overflow-hidden select-none",
-        color_class(@color),
-        rounded_size(@rounded),
-        border_class(@border),
-        shadow_class(@shadow),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={["flex items-center justify-center", size_class(@size, :text)]}>
-        <div :for={icon <- @icon} class={[icon[:size], icon[:color], icon[:class]]}>
-          <.icon name={icon[:name]} class={icon[:icon_class] || size_class(@size, :icon)} />
-        </div>
-        {render_slot(@inner_block)}
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  The `avatar_group` component is used to display a group of avatars with customizable spacing and layout.
-  It supports different types of avatars such as `default`, `placeholder`, and `placeholder_icon`,
-  allowing for flexible content presentation within a group.
-
-  ## Examples
-
-  ```elixir
-  <.avatar_group>
-    <.avatar src="https://example.com/profile.jpg" size="large" rounded="full"/>
-    <.avatar src="https://example.com/profile.jpg" size="large" border="extra_large" rounded="full"/>
-    <.avatar src="https://example.com/profile.jpg" size="large" color="warning" rounded="full"/>
-    <.avatar src="https://example.com/profile.jpg" size="large" rounded="full"/>
-    <.avatar size="large" rounded="full" border="medium">+20</.avatar>
-  </.avatar_group>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :space, :string, default: "medium", doc: "Space between items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def avatar_group(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "flex items-center rtl:space-x-reverse",
-        space_class(@space),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp image_color("transparent") do
-    nil
-  end
-
-  defp image_color("base") do
-    "border-[#e4e4e7] dark:border-[#27272a]"
-  end
-
-  defp image_color("white") do
-    "border-white"
-  end
-
-  defp image_color("dark") do
-    "border-[#282828]"
-  end
-
-  defp image_color("natural") do
-    "border-[#282828] dark:border-[#E8E8E8]"
-  end
-
-  defp image_color("primary") do
-    "border-[#016974] dark:border-[#77D5E3]"
-  end
-
-  defp image_color("secondary") do
-    "border-[#175BCC] dark:border-[#A9C9FF]"
-  end
-
-  defp image_color("success") do
-    "border-[#166C3B] dark:border-[#7FD99A]"
-  end
-
-  defp image_color("warning") do
-    "border-[#FFF7E6] dark:border-[#FDD067]"
-  end
-
-  defp image_color("danger") do
-    "border-[#BB032A] dark:border-[#FFB2AB]"
-  end
-
-  defp image_color("info") do
-    "border-[#08638C] dark:border-[#6EC9F2]"
-  end
-
-  defp image_color("misc") do
-    "border-[#653C94] dark:border-[#653C94]"
-  end
-
-  defp image_color("dawn") do
-    "border-[#7E4B2A] dark:border-[#E4B190]"
-  end
-
-  defp image_color("silver") do
-    "border-[#727272] dark:border-[#BBBBBB]"
-  end
-
-  defp image_color(params), do: params
-
-  defp color_class("base") do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_class("white") do
-    ["bg-white text-black border-[#DDDDDD]"]
-  end
-
-  defp color_class("dark") do
-    ["bg-[#282828] text-white border-[#727272]"]
-  end
-
-  defp color_class("natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp border_class("extra_small"), do: "border-avatar border"
-  defp border_class("small"), do: "border-avatar border-2"
-  defp border_class("medium"), do: "border-avatar border-[3px]"
-  defp border_class("large"), do: "border-avatar border-4"
-  defp border_class("extra_large"), do: "border-avatar border-[5px]"
-  defp border_class("none"), do: nil
-  defp border_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "size-8 text-xs"
-
-  defp size_class("small"), do: "size-9 text-sm"
-
-  defp size_class("medium"), do: "size-10 text-base"
-
-  defp size_class("large"), do: "size-12 text-lg"
-
-  defp size_class("extra_large"), do: "size-14 text-xl"
-
-  defp size_class(params) when is_binary(params), do: params
-  defp size_class(_), do: size_class("small")
-
-  defp size_class("extra_small", :icon), do: "size-4"
-
-  defp size_class("small", :icon), do: "size-5"
-
-  defp size_class("medium", :icon), do: "size-6"
-
-  defp size_class("large", :icon), do: "size-7"
-
-  defp size_class("extra_large", :icon), do: "size-8"
-
-  defp size_class(params, :icon) when is_binary(params), do: params
-  defp size_class(_, :icon), do: size_class("small", :icon)
-
-  defp size_class("extra_small", :image) do
-    [
-      "[&>img]:size-8 [&_.indicator-top-left]:!top-0 [&_.indicator-top-left]:!left-0",
-      "[&_.indicator-top-right]:!top-0 [&_.indicator-top-right]:!right-0",
-      "[&_.indicator-bottom-right]:!bottom-0 [&_.indicator-bottom-right]:!right-0",
-      "[&_.indicator-bottom-left]:!bottom-0 [&_.indicator-bottom-left]:!left-0",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("small", :image) do
-    [
-      "[&>img]:size-9 [&_.indicator-top-left]:!top-0 [&_.indicator-top-left]:!left-0",
-      "[&_.indicator-top-right]:!top-0 [&_.indicator-top-right]:!right-0",
-      "[&_.indicator-bottom-right]:!bottom-0 [&_.indicator-bottom-right]:!right-0",
-      "[&_.indicator-bottom-left]:!bottom-0 [&_.indicator-bottom-left]:!left-0",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("medium", :image) do
-    [
-      "[&>img]:size-10 [&_.indicator-top-left]:!top-0 [&_.indicator-top-left]:!left-0",
-      "[&_.indicator-top-right]:!top-0 [&_.indicator-top-right]:!right-0",
-      "[&_.indicator-bottom-right]:!bottom-0 [&_.indicator-bottom-right]:!right-0",
-      "[&_.indicator-bottom-left]:!bottom-0 [&_.indicator-bottom-left]:!left-0",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("large", :image) do
-    [
-      "[&>img]:size-11 [&_.indicator-top-left]:!top-0.5 [&_.indicator-top-left]:!left-0.5",
-      "[&_.indicator-top-right]:!top-0.5 [&_.indicator-top-right]:!right-0.5",
-      "[&_.indicator-bottom-right]:!bottom-0.5 [&_.indicator-bottom-right]:!right-0.5",
-      "[&_.indicator-bottom-left]:!bottom-0.5 [&_.indicator-bottom-left]:!left-0.5",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("extra_large", :image) do
-    [
-      "[&>img]:size-12 [&_.indicator-top-left]:!top-0.5 [&_.indicator-top-left]:!left-0.5",
-      "[&_.indicator-top-right]:!top-0.5 [&_.indicator-top-right]:!right-0.5",
-      "[&_.indicator-bottom-right]:!bottom-0.5 [&_.indicator-bottom-right]:!right-0.5",
-      "[&_.indicator-bottom-left]:!bottom-0.5 [&_.indicator-bottom-left]:!left-0.5",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class(params, :image) when is_binary(params), do: params
-  defp size_class(_, :image), do: size_class("small", :image)
-
-  defp size_class("extra_small", :text) do
-    [
-      "size-8 text-xs [&_.indicator-top-left]:!top-0 [&_.indicator-top-left]:!left-0",
-      "[&_.indicator-top-right]:!top-0 [&_.indicator-top-right]:!right-0",
-      "[&_.indicator-bottom-right]:!bottom-0 [&_.indicator-bottom-right]:!right-0",
-      "[&_.indicator-bottom-left]:!bottom-0 [&_.indicator-bottom-left]:!left-0",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("small", :text) do
-    [
-      "size-9 text-sm [&_.indicator-top-left]:!top-0 [&_.indicator-top-left]:!left-0",
-      "[&_.indicator-top-right]:!top-0 [&_.indicator-top-right]:!right-0",
-      "[&_.indicator-bottom-right]:!bottom-0 [&_.indicator-bottom-right]:!right-0",
-      "[&_.indicator-bottom-left]:!bottom-0 [&_.indicator-bottom-left]:!left-0",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("medium", :text) do
-    [
-      "size-10 text-base [&_.indicator-top-left]:!top-0 [&_.indicator-top-left]:!left-0",
-      "[&_.indicator-top-right]:!top-0 [&_.indicator-top-right]:!right-0",
-      "[&_.indicator-bottom-right]:!bottom-0 [&_.indicator-bottom-right]:!right-0",
-      "[&_.indicator-bottom-left]:!bottom-0 [&_.indicator-bottom-left]:!left-0",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("large", :text) do
-    [
-      "size-11 text-lg [&_.indicator-top-left]:!top-0.5 [&_.indicator-top-left]:!left-0.5",
-      "[&_.indicator-top-right]:!top-0.5 [&_.indicator-top-right]:!right-0.5",
-      "[&_.indicator-bottom-right]:!bottom-0.5 [&_.indicator-bottom-right]:!right-0.5",
-      "[&_.indicator-bottom-left]:!bottom-0.5 [&_.indicator-bottom-left]:!left-0.5",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class("extra_large", :text) do
-    [
-      "size-12 text-xl [&_.indicator-top-left]:!top-0.5 [&_.indicator-top-left]:!left-0.5",
-      "[&_.indicator-top-right]:!top-0.5 [&_.indicator-top-right]:!right-0.5",
-      "[&_.indicator-bottom-right]:!bottom-0.5 [&_.indicator-bottom-right]:!right-0.5",
-      "[&_.indicator-bottom-left]:!bottom-0.5 [&_.indicator-bottom-left]:!left-0.5",
-      "[&_.indicator-top-left]:!translate-y-0 [&_.indicator-top-left]:!translate-x-0",
-      "[&_.indicator-top-right]:!translate-y-0 [&_.indicator-top-right]:!translate-x-0",
-      "[&_.indicator-bottom-right]:!translate-y-0 [&_.indicator-bottom-right]:!translate-x-0",
-      "[&_.indicator-bottom-left]:!translate-y-0 [&_.indicator-bottom-left]:!translate-x-0"
-    ]
-  end
-
-  defp size_class(params, :text) when is_binary(params), do: params
-
-  defp shadow_class("extra_small"), do: "shadow-sm"
-  defp shadow_class("small"), do: "shadow"
-  defp shadow_class("medium"), do: "shadow-md"
-  defp shadow_class("large"), do: "shadow-lg"
-  defp shadow_class("extra_large"), do: "shadow-xl"
-  defp shadow_class("none"), do: "shadow-none"
-  defp shadow_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "-space-x-2"
-
-  defp space_class("small"), do: "-space-x-3"
-
-  defp space_class("medium"), do: "-space-x-4"
-
-  defp space_class("large"), do: "-space-x-5"
-
-  defp space_class("extra_large"), do: "-space-x-6"
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/badge.ex b/lib/geo_web/components/badge.ex
deleted file mode 100644
index d287be7..0000000
--- a/lib/geo_web/components/badge.ex
+++ /dev/null
@@ -1,992 +0,0 @@
-defmodule GeoWeb.Components.Badge do
-  @moduledoc """
-  Provides customizable and flexible badge components for use in Phoenix LiveView.
-
-  The `GeoWeb.Components.Badge` module allows you to create badge elements with various styles,
-  sizes, and colors. You can add icons, indicators, and dismiss buttons, and configure
-  the badge's appearance and behavior using a range of attributes.
-  This module also provides helper functions to show and hide badges with smooth transition effects.
-
-  > The badges can be customized further with global attributes such as position, padding, and more.
-  > Utilize the built-in helper functions to dynamically show and hide badges as needed.
-
-  This module is designed to be highly customizable, enabling you to create badges
-  that fit your application's needs seamlessly.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @icon_positions [
-    "right_icon",
-    "left_icon"
-  ]
-
-  @indicator_positions [
-    "indicator",
-    "right_indicator",
-    "left_indicator",
-    "top_left_indicator",
-    "top_center_indicator",
-    "top_right_indicator",
-    "middle_left_indicator",
-    "middle_right_indicator",
-    "bottom_left_indicator",
-    "bottom_center_indicator",
-    "bottom_right_indicator"
-  ]
-
-  @dismiss_positions ["dismiss", "right_dismiss", "left_dismiss"]
-
-  @doc """
-  The `badge` component is used to display badges with various styles and indicators.
-
-  It supports customization of attributes such as `variant`, `size`, and `color`,
-  along with optional icons and indicator styles.
-
-  ## Examples
-
-  ```elixir
-  <.badge icon="hero-arrow-down-tray" color="warning" dismiss indicator>Default warning</.badge>
-  <.badge variant="shadow" rounded="large" indicator>Active</.badge>
-
-  <.badge icon="hero-square-2-stack" color="danger" size="medium" bottom_center_indicator pinging>
-    Duplicate
-  </.badge>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-
-  attr :size, :string,
-    default: "extra_small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :icon_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :content_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :dismiss_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling of dismiss button"
-
-  attr :badge_position, :string, default: "", doc: "poistion of badge"
-
-  attr :indicator_class, :string,
-    default: nil,
-    doc: "CSS class for additional styling of the badge indicator"
-
-  attr :indicator_size, :string, default: "", doc: "Specifies the size of the badge indicator"
-
-  attr :params, :map,
-    default: %{kind: "badge"},
-    doc: "A map of additional parameters used for element configuration, such as type or kind"
-
-  attr :rest, :global,
-    include:
-      ["pinging", "circle"] ++ @dismiss_positions ++ @indicator_positions ++ @icon_positions,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def badge(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="status"
-      class={
-        default_classes(@rest[:pinging]) ++
-          size_class(@size, @rest[:circle]) ++
-          [
-            color_variant(@variant, @color),
-            border_size(@border, @variant),
-            rounded_size(@rounded),
-            badge_position(@badge_position),
-            @badge_position != "" && "absolute",
-            @font_weight,
-            @class
-          ]
-      }
-      {drop_rest(@rest)}
-    >
-      <.badge_dismiss
-        :if={dismiss_position(@rest) == "left"}
-        id={@id}
-        class={@dismiss_class}
-        params={@params}
-      />
-      <.badge_indicator position="left" size={@indicator_size} class={@indicator_class} {@rest} />
-      <.icon
-        :if={icon_position(@icon, @rest) == "left"}
-        name={@icon}
-        class={["badge-icon", @icon_class]}
-      />
-      <div class={["leading-5", @content_class]}>
-        {render_slot(@inner_block)}
-      </div>
-      <.icon
-        :if={icon_position(@icon, @rest) == "right"}
-        name={@icon}
-        class={["badge-icon", @icon_class]}
-      />
-      <.badge_indicator size={@indicator_size} class={@indicator_class} {@rest} />
-      <.badge_dismiss
-        :if={dismiss_position(@rest) == "right"}
-        id={@id}
-        class={@dismiss_class}
-        params={@params}
-      />
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :dismiss, :boolean,
-    default: false,
-    doc: "Determines if the badge should include a dismiss button"
-
-  attr :icon_class, :string, default: "size-4", doc: "Determines custom class for the icon"
-  attr :class, :string, default: "size-4", doc: "Determines custom class"
-
-  attr :params, :map,
-    default: %{kind: "badge"},
-    doc: "A map of additional parameters used for badge configuration, such as type or kind"
-
-  defp badge_dismiss(assigns) do
-    ~H"""
-    <button
-      class={["dismmiss-button inline-flex justify-center items-center w-fit shrink-0", @class]}
-      aria-label={gettext("close")}
-      phx-click={JS.push("dismiss", value: Map.merge(%{id: @id}, @params)) |> hide_badge("##{@id}")}
-    >
-      <.icon name="hero-x-mark" class={"#{@icon_class}"} />
-    </button>
-    """
-  end
-
-  @doc type: :component
-  attr :position, :string, default: "none", doc: "Determines the element position"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :size, :string,
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  defp badge_indicator(%{position: "left", rest: %{left_indicator: true}} = assigns) do
-    ~H"""
-    <span class={["indicator", indicator_size(@size), @class]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "left", rest: %{indicator: true}} = assigns) do
-    ~H"""
-    <span class={["indicator", indicator_size(@size), @class]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{right_indicator: true}} = assigns) do
-    ~H"""
-    <span class={["indicator", indicator_size(@size), @class]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{top_left_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute -translate-y-1/2 -translate-x-1/2 right-auto top-0 left-0"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{top_center_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute top-0 -translate-y-1/2 translate-x-1/2 right-1/2"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{top_right_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute -translate-y-1/2 translate-x-1/2 left-auto top-0 right-0"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{middle_left_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute -translate-y-1/2 -translate-x-1/2 right-auto left-0 top-2/4"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{middle_right_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute -translate-y-1/2 translate-x-1/2 left-auto right-0 top-2/4"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{bottom_left_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute translate-y-1/2 -translate-x-1/2 right-auto bottom-0 left-0"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{bottom_center_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute translate-y-1/2 translate-x-1/2 bottom-0 right-1/2"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(%{position: "none", rest: %{bottom_right_indicator: true}} = assigns) do
-    ~H"""
-    <span class={[
-      "indicator",
-      indicator_size(@size),
-      @class || "absolute translate-y-1/2 translate-x-1/2 left-auto bottom-0 right-0"
-    ]} />
-    """
-  end
-
-  defp badge_indicator(assigns) do
-    ~H"""
-    """
-  end
-
-  defp badge_position("top-left"), do: "-translate-y-1/2 -translate-x-1/2 right-auto top-0 left-0"
-
-  defp badge_position("top-right"), do: "-translate-y-1/2 translate-x-1/2 left-auto top-0 right-0"
-
-  defp badge_position("bottom-left"),
-    do: "translate-y-1/2 -translate-x-1/2 right-auto bottom-0 left-0"
-
-  defp badge_position("bottom-right"),
-    do: "translate-y-1/2 translate-x-1/2 left-auto bottom-0 right-0"
-
-  defp badge_position(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm [&>.indicator]:bg-[#e4e4e7]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a] dark:[&>.indicator]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black [&>.indicator]:bg-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white [&>.indicator]:bg-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "[&>.indicator]:bg-white dark:[&>.indicator]:bg-black "
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      "[&>.indicator]:bg-[#047857] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "[&>.indicator]:bg-[#FF8B08] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "[&>.indicator]:bg-[#E73B3B] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "[&>.indicator]:bg-[#004FC4] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "[&>.indicator]:bg-[#52059C] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "[&>.indicator]:bg-[#4D4137] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "[&>.indicator]:bg-[#707483] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "bg-transparent text-[#007F8C] border-[#007F8C]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "bg-transparent text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "bg-transparent text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]",
-      "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "bg-transparent text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]",
-      "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "bg-transparent text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "bg-transparent text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "bg-transparent text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "bg-transparent text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]",
-      "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "bg-transparent text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B]",
-      "dark:text-[#DDDDDD] border-transparent",
-      "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "bg-transparent text-[#007F8C]",
-      "dark:text-[#01B8CA] border-transparent",
-      "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "bg-transparent text-[#266EF1]",
-      "dark:text-[#6DAAFB] border-transparent",
-      "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "bg-transparent text-[#0E8345]",
-      "dark:text-[#06C167] border-transparent",
-      "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "bg-transparent text-[#CA8D01]",
-      "dark:text-[#FDC034] border-transparent",
-      "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "bg-transparent text-[#DE1135]",
-      "dark:text-[#FC7F79] border-transparent",
-      "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "bg-transparent text-[#0B84BA]",
-      "dark:text-[#3EB7ED] border-transparent",
-      "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "bg-transparent text-[#8750C5]",
-      "dark:text-[#BA83F9] border-transparent",
-      "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "bg-transparent text-[#A86438]",
-      "dark:text-[#DB976B] border-transparent",
-      "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "bg-transparent text-[#868686]",
-      "dark:text-[#A6A6A6] border-transparent",
-      "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "[&>.indicator]:bg-white dark:[&>.indicator]:bg-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      "[&>.indicator]:bg-[#047857] dark:[&>.indicator]:bg-[#B1EAC2]",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "[&>.indicator]:bg-[#FF8B08] dark:[&>.indicator]:bg-[#FEDF99]",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "[&>.indicator]:bg-[#E73B3B] dark:[&>.indicator]:bg-[#FFD2CD]",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "[&>.indicator]:bg-[#004FC4] dark:[&>.indicator]:bg-[#9FDBF6]",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "[&>.indicator]:bg-[#52059C dark:[&>.indicator]:bg-[#DDC1FC]]",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "[&>.indicator]:bg-[#4D4137] dark:[&>.indicator]:bg-[#EDCBB5]",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "[&>.indicator]:bg-[#707483] dark:[&>.indicator]:bg-[#DDDDDD]",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    ["bg-white text-black border-[#DDDDDD] [&>.indicator]:bg-black"]
-  end
-
-  defp color_variant("bordered", "dark") do
-    ["bg-[#282828] text-white border-[#727272] [&>.indicator]:bg-white"]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]",
-      "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]",
-      "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]",
-      "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]",
-      "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]",
-      "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]",
-      "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]",
-      "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]",
-      "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]",
-      "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]",
-      "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black",
-      "[&>.indicator]:bg-white dark:[&>.indicator]:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black",
-      "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#CDEEF3]"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black",
-      "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#DEE9FE]"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black",
-      "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#D3EFDA]"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black",
-      "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEEFCC]"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black",
-      "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFE1DE]"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black",
-      "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#CFEDFB]"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black",
-      "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#EEE0FD]"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black",
-      "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#F6E5DA]"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black",
-      "[&>.indicator]:bg-[#4B4B4B] dark:[&>.indicator]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_size(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_size("none", _), do: nil
-  defp border_size("extra_small", _), do: "border"
-  defp border_size("small", _), do: "border-2"
-  defp border_size("medium", _), do: "border-[3px]"
-  defp border_size("large", _), do: "border-4"
-  defp border_size("extra_large", _), do: "border-[5px]"
-  defp border_size(params, _) when is_binary(params), do: params
-
-  defp indicator_size("extra_small"), do: "!size-2"
-  defp indicator_size("small"), do: "!size-2.5"
-  defp indicator_size("medium"), do: "!size-3"
-  defp indicator_size("large"), do: "!size-3.5"
-  defp indicator_size("extra_large"), do: "!size-4"
-  defp indicator_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small", circle) do
-    [
-      is_nil(circle) && "px-2 py-px",
-      "text-[12px] [&>.indicator]:size-1",
-      !is_nil(circle) && "size-6"
-    ]
-  end
-
-  defp size_class("small", circle) do
-    [
-      is_nil(circle) && "px-2.5 py-0.5",
-      "text-[13px] [&>.indicator]:size-1.5",
-      !is_nil(circle) && "size-7"
-    ]
-  end
-
-  defp size_class("medium", circle) do
-    [
-      is_nil(circle) && "px-2.5 py-1",
-      "text-[14px] [&>.indicator]:size-2",
-      !is_nil(circle) && "size-8"
-    ]
-  end
-
-  defp size_class("large", circle) do
-    [
-      is_nil(circle) && "px-3 py-1.5",
-      "text-[15px] [&>.indicator]:size-2.5",
-      !is_nil(circle) && "size-9"
-    ]
-  end
-
-  defp size_class("extra_large", circle) do
-    [
-      is_nil(circle) && "px-3.5 py-2",
-      "text-[16px] [&>.indicator]:size-3",
-      !is_nil(circle) && "size-10"
-    ]
-  end
-
-  defp size_class(params, _circle) when is_binary(params), do: [params]
-
-  defp icon_position(nil, _), do: false
-  defp icon_position(_icon, %{left_icon: true}), do: "left"
-  defp icon_position(_icon, %{right_icon: true}), do: "right"
-  defp icon_position(_icon, _), do: "left"
-
-  defp dismiss_position(%{right_dismiss: true}), do: "right"
-  defp dismiss_position(%{left_dismiss: true}), do: "left"
-  defp dismiss_position(%{dismiss: true}), do: "right"
-  defp dismiss_position(_), do: false
-
-  defp default_classes(pinging) do
-    [
-      "has-[.indicator]:relative inline-flex gap-1.5 justify-center items-center",
-      "[&>.indicator]:inline-block [&>.indicator]:shrink-0 [&>.indicator]:rounded-full",
-      !is_nil(pinging) && "[&>.indicator]:animate-ping"
-    ]
-  end
-
-  defp drop_rest(rest) do
-    all_rest =
-      (["pinging", "circle"] ++ @dismiss_positions ++ @indicator_positions ++ @icon_positions)
-      |> Enum.map(&if(is_binary(&1), do: String.to_atom(&1), else: &1))
-
-    Map.drop(rest, all_rest)
-  end
-
-  ## JS Commands
-  @doc """
-  Displays a badge element by applying a transition effect.
-
-  ## Parameters
-
-    - `js`: (optional) An existing `Phoenix.LiveView.JS` structure to apply
-    transformations on. Defaults to a new `%JS{}`.
-    - `selector`: A string representing the CSS selector of the badge element to be shown.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to show the badge element with a
-    smooth transition effect.
-
-  ## Transition Details
-
-    - The element transitions from an initial state of reduced opacity and
-    scale (`opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95`) to full opacity
-    and scale (`opacity-100 translate-y-0 sm:scale-100`) over a duration of 300 milliseconds.
-
-  ## Example
-
-  ```elixir
-  show_badge(%JS{}, "#badge-element")
-  ```
-
-  This example will show the badge element with the ID badge-element using the defined transition effect.
-  """
-  def show_badge(js \\ %JS{}, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  @doc """
-  Hides a badge element by applying a transition effect.
-
-  ## Parameters
-
-    - `js`: (optional) An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `selector`: A string representing the CSS selector of the badge element to be hidden.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to hide the badge element
-    with a smooth transition effect.
-
-  ## Transition Details
-
-    - The element transitions from full opacity and scale (`opacity-100 translate-y-0 sm:scale-100`)
-    to reduced opacity and scale (`opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95`)
-    over a duration of 200 milliseconds.
-
-  ## Example
-
-  ```elixir
-  hide_badge(%JS{}, "#badge-element")
-  ```
-
-  This example will hide the badge element with the ID badge-element using the defined transition effect.
-  """
-
-  def hide_badge(js \\ %JS{}, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-end
diff --git a/lib/geo_web/components/banner.ex b/lib/geo_web/components/banner.ex
deleted file mode 100644
index b3b491e..0000000
--- a/lib/geo_web/components/banner.ex
+++ /dev/null
@@ -1,823 +0,0 @@
-defmodule GeoWeb.Components.Banner do
-  @moduledoc """
-  GeoWeb.Components.Banner module provides components for rendering customizable banners in your **Phoenix LiveView**
-  application.
-
-  ## Features
-
-  - **Banner Component**: Create visually appealing banners with various styles, colors, and sizes.
-  - **Dismissable Banners**: Add dismiss buttons to banners to allow users to hide them with a
-  smooth transition.
-  - **Positioning Options**: Control the positioning of the banners on the screen with flexible
-  vertical and horizontal alignment options.
-  - **Custom Styles**: Customize the look and feel of your banners using various attributes for size,
-  border, padding, and more.
-  - **Animation Transitions**: Use built-in JavaScript commands to show and hide banners with
-  smooth animation transitions.
-
-  > The main component for rendering a banner with optional inner content and dismiss functionality.
-
-  ## JS Commands
-
-  - `show_banner/2`: Displays the banner element with a smooth transition.
-  - `hide_banner/2`: Hides the banner element with a smooth transition.
-
-  Use this module to create interactive and aesthetically pleasing banner elements for
-  your **LiveView** applications.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  use Gettext, backend: GeoWeb.Gettext
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @positions ["top_left", "top_right", "bottom_left", "bottom_right", "center", "full"]
-
-  @doc """
-  The `banner` component is used to display fixed position banners with various customization
-  options such as size, color, and position. It supports displaying content through an inner block,
-  and attributes like `vertical_position` and `rounded_position` for flexible layout configuration.
-
-  ## Examples
-
-  ```elixir
-  <.banner id="banner">
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea
-      atque soluta praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-  </.banner>
-
-  <.banner id="banner" color="primary" space="large" vertical_position="bottom">
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta
-      praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque
-      soluta praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-  </.banner>
-
-  <.banner id="banner" color="secondary" space="large" vertical_position="top" vertical_size="top-24">
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-  </.banner>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :border_position, :string,
-    values: ["top", "bottom", "full", "none"],
-    default: "top",
-    doc: ""
-
-  attr :rounded, :string, default: "none", doc: "Determines the border radius"
-
-  attr :rounded_position, :string,
-    values: ["top", "bottom", "all", "none"],
-    default: "none",
-    doc: ""
-
-  attr :space, :string, default: "extra_small", doc: "Space between items"
-
-  attr :vertical_position, :string, values: ["top", "bottom"], default: "top", doc: ""
-  attr :vertical_size, :string, default: "none", doc: "Specifies the vertical size of the element"
-
-  attr :hide_dismiss, :boolean, default: false, doc: "Show or hide dismiss classes"
-
-  attr :dismiss_size, :string,
-    default: "small",
-    doc: "Add custom classes to control dismiss sizes"
-
-  attr :position, :string,
-    values: @positions,
-    default: "full",
-    doc: "Determines the element position"
-
-  attr :position_size, :string,
-    default: "none",
-    doc: "Determines the size for positioning the element"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "extra_small", doc: "Determines padding for items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :dismiss_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :content_wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling"
-
-  attr :params, :map,
-    default: %{kind: "banner"},
-    doc: "A map of additional parameters used for element configuration, such as type or kind"
-
-  attr :rest, :global,
-    include: ~w(right_dismiss left_dismiss),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def banner(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="status"
-      aria-live="polite"
-      aria-atomic="true"
-      class={[
-        "overflow-hidden fixed z-50",
-        vertical_position(@vertical_size, @vertical_position),
-        rounded_size(@rounded, @rounded_position),
-        border_class(@border, @border_position, @variant),
-        color_variant(@variant, @color),
-        position_class(@position_size, @position),
-        space_class(@space),
-        padding_size(@padding),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={["flex gap-2 items-center justify-between", @content_wrapper_class]}>
-        {render_slot(@inner_block)}
-        <.banner_dismiss
-          :if={!@hide_dismiss}
-          id={@id}
-          dismiss_size={@dismiss_size}
-          class={@dismiss_class}
-          params={@params}
-        />
-      </div>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :dismiss_size, :string,
-    default: "small",
-    doc: "Add custom classes to control dismiss sizes"
-
-  attr :params, :map,
-    default: %{kind: "badge"},
-    doc: "A map of additional parameters used for element configuration, such as type or kind"
-
-  defp banner_dismiss(assigns) do
-    ~H"""
-    <button
-      type="button"
-      class="group shrink-0"
-      aria-label={gettext("close")}
-      phx-click={JS.push("dismiss", value: Map.merge(%{id: @id}, @params)) |> hide_banner("##{@id}")}
-    >
-      <.icon
-        name="hero-x-mark-solid"
-        class={[
-          "banner-icon opacity-80 group-hover:opacity-70",
-          dismiss_size(@dismiss_size),
-          @class
-        ]}
-      />
-    </button>
-    """
-  end
-
-  defp dismiss_size("extra_small"), do: "size-3.5"
-
-  defp dismiss_size("small"), do: "size-4"
-
-  defp dismiss_size("medium"), do: "size-5"
-
-  defp dismiss_size("large"), do: "size-6"
-
-  defp dismiss_size("extra_large"), do: "size-7"
-
-  defp dismiss_size(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-2"
-
-  defp padding_size("small"), do: "p-3"
-
-  defp padding_size("medium"), do: "p-4"
-
-  defp padding_size("large"), do: "p-5"
-
-  defp padding_size("extra_large"), do: "p-6"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp vertical_position("none", "top"), do: "top-0"
-  defp vertical_position("extra_small", "top"), do: "top-1"
-  defp vertical_position("small", "top"), do: "top-2"
-  defp vertical_position("medium", "top"), do: "top-3"
-  defp vertical_position("large", "top"), do: "top-4"
-  defp vertical_position("extra_large", "top"), do: "top-5"
-
-  defp vertical_position("none", "bottom"), do: "bottom-0"
-  defp vertical_position("extra_small", "bottom"), do: "bottom-1"
-  defp vertical_position("small", "bottom"), do: "bottom-2"
-  defp vertical_position("medium", "bottom"), do: "bottom-3"
-  defp vertical_position("large", "bottom"), do: "bottom-4"
-  defp vertical_position("extra_large", "bottom"), do: "bottom-5"
-
-  defp vertical_position(params, _) when is_binary(params), do: params
-
-  defp position_class("none", "top_left"), do: "left-0 ml-0"
-  defp position_class("extra_small", "top_left"), do: "left-1 ml-1"
-  defp position_class("small", "top_left"), do: "left-2 ml-2"
-  defp position_class("medium", "top_left"), do: "left-3 ml-3"
-  defp position_class("large", "top_left"), do: "left-4 ml-4"
-  defp position_class("extra_large", "top_left"), do: "left-5 ml-5"
-
-  defp position_class("none", "top_right"), do: "right-0"
-  defp position_class("extra_small", "top_right"), do: "right-1"
-  defp position_class("small", "top_right"), do: "right-2"
-  defp position_class("medium", "top_right"), do: "right-3"
-  defp position_class("large", "top_right"), do: "right-4"
-  defp position_class("extra_large", "top_right"), do: "right-5"
-
-  defp position_class("none", "bottom_left"), do: "left-0 ml-0"
-  defp position_class("extra_small", "bottom_left"), do: "left-1 ml-1"
-  defp position_class("small", "bottom_left"), do: "left-2 ml-2"
-  defp position_class("medium", "bottom_left"), do: "left-3 ml-3"
-  defp position_class("large", "bottom_left"), do: "left-4 ml-4"
-  defp position_class("extra_large", "bottom_left"), do: "left-5 ml-5"
-
-  defp position_class("none", "bottom_right"), do: "right-0"
-  defp position_class("extra_small", "bottom_right"), do: "right-1"
-  defp position_class("small", "bottom_right"), do: "right-2"
-  defp position_class("medium", "bottom_right"), do: "right-3"
-  defp position_class("large", "bottom_right"), do: "right-4"
-  defp position_class("extra_large", "bottom_right"), do: "right-5"
-
-  defp position_class(_, "center"), do: "mx-auto"
-  defp position_class(_, "full"), do: "inset-x-0"
-
-  defp position_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small", "top"), do: "rounded-b-sm"
-
-  defp rounded_size("small", "top"), do: "rounded-b"
-
-  defp rounded_size("medium", "top"), do: "rounded-b-md"
-
-  defp rounded_size("large", "top"), do: "rounded-b-lg"
-
-  defp rounded_size("extra_large", "top"), do: "rounded-b-xl"
-
-  defp rounded_size("extra_small", "bottom"), do: "rounded-t-sm"
-
-  defp rounded_size("small", "bottom"), do: "rounded-t"
-
-  defp rounded_size("medium", "bottom"), do: "rounded-t-md"
-
-  defp rounded_size("large", "bottom"), do: "rounded-t-lg"
-
-  defp rounded_size("extra_large", "bottom"), do: "rounded-t-xl"
-
-  defp rounded_size("extra_small", "all"), do: "rounded-sm"
-
-  defp rounded_size("small", "all"), do: "rounded"
-
-  defp rounded_size("medium", "all"), do: "rounded-md"
-
-  defp rounded_size("large", "all"), do: "rounded-lg"
-
-  defp rounded_size("extra_large", "all"), do: "rounded-xl"
-
-  defp rounded_size("none", _), do: nil
-
-  defp rounded_size(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp border_class(_, _, variant)
-       when variant in ["default", "shadow", "transparent", "gradient"],
-       do: nil
-
-  defp border_class("none", _, _), do: nil
-  defp border_class("extra_small", "top", _), do: "border-b"
-  defp border_class("small", "top", _), do: "border-b-2"
-  defp border_class("medium", "top", _), do: "border-b-[3px]"
-  defp border_class("large", "top", _), do: "border-b-4"
-  defp border_class("extra_large", "top", _), do: "border-b-[5px]"
-
-  defp border_class("extra_small", "bottom", _), do: "border"
-  defp border_class("small", "bottom", _), do: "border-b-2"
-  defp border_class("medium", "bottom", _), do: "border-b-[3px]"
-  defp border_class("large", "bottom", _), do: "border-b-4"
-  defp border_class("extra_large", "bottom", _), do: "border-b-[5px]"
-
-  defp border_class("extra_small", "full", _), do: "border"
-  defp border_class("small", "full", _), do: "border-2"
-  defp border_class("medium", "full", _), do: "border-[3px]"
-  defp border_class("large", "full", _), do: "border-4"
-  defp border_class("extra_large", "full", _), do: "border-[5px]"
-
-  defp border_class(params, _, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    ["bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"]
-  end
-
-  defp color_variant("default", "primary") do
-    ["bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"]
-  end
-
-  defp color_variant("default", "secondary") do
-    ["bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"]
-  end
-
-  defp color_variant("default", "success") do
-    ["bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"]
-  end
-
-  defp color_variant("default", "warning") do
-    ["bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"]
-  end
-
-  defp color_variant("default", "danger") do
-    ["bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"]
-  end
-
-  defp color_variant("default", "info") do
-    ["bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"]
-  end
-
-  defp color_variant("default", "misc") do
-    ["bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"]
-  end
-
-  defp color_variant("default", "dawn") do
-    ["bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"]
-  end
-
-  defp color_variant("default", "silver") do
-    ["bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    ["text-[#4B4B4B] dark:text-[#DDDDDD]"]
-  end
-
-  defp color_variant("transparent", "primary") do
-    ["text-[#007F8C] dark:text-[#01B8CA]"]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    ["text-[#266EF1] dark:text-[#6DAAFB]"]
-  end
-
-  defp color_variant("transparent", "success") do
-    ["text-[#0E8345] dark:text-[#06C167]"]
-  end
-
-  defp color_variant("transparent", "warning") do
-    ["text-[#CA8D01] dark:text-[#FDC034]"]
-  end
-
-  defp color_variant("transparent", "danger") do
-    ["text-[#DE1135] dark:text-[#FC7F79]"]
-  end
-
-  defp color_variant("transparent", "info") do
-    ["text-[#0B84BA] dark:text-[#3EB7ED]"]
-  end
-
-  defp color_variant("transparent", "misc") do
-    ["text-[#8750C5] dark:text-[#BA83F9]"]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    ["text-[#A86438] dark:text-[#DB976B]"]
-  end
-
-  defp color_variant("transparent", "silver") do
-    ["text-[#868686] dark:text-[#A6A6A6]"]
-  end
-
-  defp color_variant("bordered", "white") do
-    ["bg-white text-black border-[#DDDDDD]"]
-  end
-
-  defp color_variant("bordered", "dark") do
-    ["bg-[#282828] text-white border-[#727272]"]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  ## JS Commands
-  @doc """
-  Displays a banner element with a smooth transition effect.
-
-  ## Parameters
-
-    - `js` (optional): An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `selector`: A string representing the CSS selector of the banner element to be shown.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to show the banner element with a
-    smooth transition effect.
-
-  ## Transition Details
-
-    - The element transitions from an initial state of reduced opacity and scale
-    (`opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95`) to full opacity and scale
-    (`opacity-100 translate-y-0 sm:scale-100`) over a duration of 300 milliseconds.
-
-  ## Example
-
-    ```elixir
-    show_banner(%JS{}, "#banner-element")
-    ```
-
-    This example will show the banner element with the ID banner-element using the defined transition effect.
-  """
-  def show_banner(js \\ %JS{}, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  @doc """
-  Hides a banner element with a smooth transition effect.
-
-  ## Parameters
-
-    - `js` (optional): An existing `Phoenix.LiveView.JS` structure to apply transformations on.
-    Defaults to a new `%JS{}`.
-    - `selector`: A string representing the CSS selector of the banner element to be hidden.
-
-  ## Returns
-
-    - A `Phoenix.LiveView.JS` structure with commands to hide the banner element with a
-    smooth transition effect.
-
-  ## Transition Details
-
-    - The element transitions from full opacity and scale (`opacity-100 translate-y-0 sm:scale-100`)
-    to reduced opacity and scale (`opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95`)
-    over a duration of 200 milliseconds.
-
-  ## Example
-
-    ```elixir
-    hide_banner(%JS{}, "#banner-element")
-    ```
-
-  This example will hide the banner element with the ID banner-element using the defined transition effect.
-  """
-  def hide_banner(js \\ %JS{}, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-end
diff --git a/lib/geo_web/components/blockquote.ex b/lib/geo_web/components/blockquote.ex
deleted file mode 100644
index 2c08712..0000000
--- a/lib/geo_web/components/blockquote.ex
+++ /dev/null
@@ -1,740 +0,0 @@
-defmodule GeoWeb.Components.Blockquote do
-  @moduledoc """
-  This module provides a versatile `GeoWeb.Components.Blockquote` component for creating
-  stylish and customizable blockquotes in your Phoenix LiveView application.
-
-  ## Features
-
-  - **Customizable Styles**: Choose from multiple `variant` styles like `default`,
-  `outline`, `transparent`, `shadow`, and `bordered` to match your design needs.
-  - **Color Themes**: Apply different color themes, including `primary`, `secondary`,
-  `success`, `warning`, and more.
-  - **Flexible Sizing**: Control the overall size of the blockquote, as well as specific
-  attributes like padding, border radius, and font weight.
-  - **Icon and Caption Support**: Add icons and captions to your blockquotes for
-  enhanced visual appeal and content clarity.
-  - **Positioning Options**: Fine-tune the positioning and spacing of content within the
-  blockquote for a polished layout.
-  - **Global Attributes**: Utilize global attributes such as `left_border`, `right_border`,
-  `hide_border`, and `full_border` to easily customize the border display and positioning.
-
-  Use this module to create visually appealing and content-rich blockquotes that enhance
-  the readability and aesthetics of your LiveView applications.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  The `blockquote` component is used to display stylized quotations with customizable attributes
-  such as `variant`, `color`, and `padding`. It supports optional captions and icons to
-  enhance the visual presentation.
-
-  ## Examples
-
-  ```elixir
-  <.blockquote left_border hide_icon>
-    <p>
-      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem nihil commodi,
-      facere voluptatum dolores tempora vero soluta harum nam esse
-    </p>
-    <:caption
-      image="https://example.com/profile.jpg"
-      position="left"
-    >
-      Shahryar Tavakkoli | CEO
-    </:caption>
-  </.blockquote>
-
-  <.blockquote left_border icon="hero-chat-bubble-left-ellipsis">
-    <p>
-      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem nihil commodi,
-      facere voluptatum dolores tempora vero soluta harum nam esse
-    </p>
-    <:caption
-      image="https://example.com/profile.jpg"
-      position="left"
-    >
-      Shahryar Tavakkoli | CEO
-    </:caption>
-  </.blockquote>
-
-  <.blockquote variant="transparent" color="primary">
-    <p>
-      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem nihil commodi,
-      facere voluptatum dolores tempora vero soluta harum nam esse
-    </p>
-    <:caption image="https://example.com/profile.jpg">
-      Shahryar Tavakkoli | CEO
-    </:caption>
-  </.blockquote>
-
-  <.blockquote variant="shadow" color="dark">
-    <p>
-      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rem nihil commodi,
-      facere voluptatum dolores tempora vero soluta harum nam esse
-    </p>
-    <:caption image="https://example.com/profile.jpg">
-      Shahryar Tavakkoli | CEO
-    </:caption>
-  </.blockquote>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "medium", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "small", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :icon, :string, default: "hero-quote", doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Determines custom class for the icon"
-  attr :blockquote_class, :string, default: nil, doc: "Determines custom class for the blockquote"
-
-  slot :caption, required: false do
-    attr :image, :string, doc: "Image displayed alongside of an item"
-    attr :image_class, :string, doc: "Determines custom class for the image"
-    attr :alt, :string, doc: "Determines alt of image"
-    attr :class, :string, doc: "Determines custom class for caption wrapper"
-    attr :content_class, :string, doc: "Determines custom class for caption content"
-
-    attr :position, :string,
-      values: ["right", "left", "center"],
-      doc: "Determines the element position"
-  end
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  attr :rest, :global,
-    include: ~w(left_border right_border hide_border full_border hide_icon),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def blockquote(assigns) do
-    ~H"""
-    <div class={[
-      space_class(@space),
-      border_class(@border, border_position(@rest), @variant),
-      color_variant(@variant, @color),
-      rounded_size(@rounded),
-      padding_size(@padding),
-      size_class(@size),
-      @font_weight,
-      @class
-    ]}>
-      <.blockquote_icon
-        :if={is_nil(@rest[:hide_icon])}
-        name={@icon}
-        class={["quote-icon", @icon_class]}
-      />
-      <blockquote class={["p-2 italic", @blockquote_class]} cite={@rest[:cite] && @rest[:cite]}>
-        <p>
-          {render_slot(@inner_block)}
-        </p>
-      </blockquote>
-      <div
-        :for={caption <- @caption}
-        class={[
-          "flex items-center space-x-3 rtl:space-x-reverse",
-          !is_nil(caption[:position]) && caption_position(caption[:position]),
-          caption[:class]
-        ]}
-      >
-        <img
-          :if={!is_nil(caption[:image])}
-          class={["w-6 h-6 rounded-full", caption[:image_class]]}
-          src={caption[:image]}
-          alt={caption[:alt] || gettext("Author image")}
-        />
-        <div class={["flex items-center divide-x-2 rtl:divide-x-reverse", caption[:content_class]]}>
-          {render_slot(caption)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :name, :string, required: true, doc: "Specifies the name of the element"
-  attr :class, :list, default: nil, doc: "Custom CSS class for additional styling"
-
-  defp blockquote_icon(%{name: "hero-quote"} = assigns) do
-    ~H"""
-    <svg
-      class={["w-8 h-8", @class]}
-      xmlns="http://www.w3.org/2000/svg"
-      fill="currentColor"
-      viewBox="0 0 18 14"
-    >
-      <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z" />
-    </svg>
-    """
-  end
-
-  defp blockquote_icon(assigns) do
-    ~H"""
-    <.icon
-      :if={!is_nil(@name)}
-      name={@name}
-      class={Enum.reject(@class, &is_nil(&1)) |> Enum.join(" ")}
-    />
-    """
-  end
-
-  defp caption_position("right") do
-    "ltr:justify-end rtl:justify-start"
-  end
-
-  defp caption_position("left") do
-    "ltr:justify-start rtl:justify-end"
-  end
-
-  defp caption_position("center") do
-    "justify-center"
-  end
-
-  defp caption_position(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp border_class(_, _, variant)
-       when variant in ["default", "shadow", "transparent", "gradient"],
-       do: nil
-
-  defp border_class(_, "none", _), do: nil
-
-  defp border_class("extra_small", position, _) do
-    [
-      position == "left" && "border-s",
-      position == "right" && "border-e",
-      position == "full" && "border"
-    ]
-  end
-
-  defp border_class("small", position, _) do
-    [
-      position == "left" && "border-s-2",
-      position == "right" && "border-s-2",
-      position == "full" && "border-2"
-    ]
-  end
-
-  defp border_class("medium", position, _) do
-    [
-      position == "left" && "border-s-[3px]",
-      position == "right" && "border-e-[3px]",
-      position == "full" && "border-[3px]"
-    ]
-  end
-
-  defp border_class("large", position, _) do
-    [
-      position == "left" && "border-s-4",
-      position == "right" && "border-e-4",
-      position == "full" && "border-4"
-    ]
-  end
-
-  defp border_class("extra_large", position, _) do
-    [
-      position == "left" && "border-s-[5px]",
-      position == "right" && "border-e-[5px]",
-      position == "full" && "border-[5px]"
-    ]
-  end
-
-  defp border_class(params, _, _) when is_binary(params), do: [params]
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-[12px] [&>.quote-icon]:size-7"
-
-  defp size_class("small"), do: "text-[13px] [&>.quote-icon]:size-8"
-
-  defp size_class("medium"), do: "text-[14px] [&>.quote-icon]:size-9"
-
-  defp size_class("large"), do: "text-[15px] [&>.quote-icon]:size-10"
-
-  defp size_class("extra_large"), do: "text-[16px] [&>.quote-icon]:size-12"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    ["bg-white text-black border-[#DDDDDD]"]
-  end
-
-  defp color_variant("bordered", "dark") do
-    ["bg-[#282828] text-white border-[#727272]"]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp border_position(%{hide_border: true}), do: "none"
-  defp border_position(%{left_border: true}), do: "left"
-  defp border_position(%{right_border: true}), do: "right"
-  defp border_position(%{full_border: true}), do: "full"
-  defp border_position(_), do: "left"
-end
diff --git a/lib/geo_web/components/breadcrumb.ex b/lib/geo_web/components/breadcrumb.ex
deleted file mode 100644
index 69eb206..0000000
--- a/lib/geo_web/components/breadcrumb.ex
+++ /dev/null
@@ -1,254 +0,0 @@
-defmodule GeoWeb.Components.Breadcrumb do
-  @moduledoc """
-  Provides a flexible and customizable `GeoWeb.Components.Breadcrumb` component for displaying
-  breadcrumb navigation in your Phoenix LiveView applications.
-
-  ## Features
-
-  - **Customizable Appearance**: Choose from various color themes and sizes to match your design needs.
-  - **Icon and Separator Support**: Easily add icons and separators between breadcrumb items
-  for improved navigation.
-  - **Flexible Structure**: Use slots to define breadcrumb items, each with optional icons,
-  links, and custom separators.
-  - **Global Attributes**: Utilize global attributes to customize and extend the component's
-  behavior and appearance.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `breadcrumb` component is used to display a navigational path with customizable
-  attributes such as `color`, `size`, and `separator`.
-
-  It supports defining individual items with optional icons and links, allowing for flexible
-  breadcrumb trails.
-
-  ## Examples
-
-  ```elixir
-  <.breadcrumb>
-    <:item icon="hero-academic-cap" link="/">Route1</:item>
-    <:item icon="hero-beaker" link="/">Route2</:item>
-    <:item icon="hero-computer-desktop" link="/">Route3</:item>
-    <:item>Route3</:item>
-  </.breadcrumb>
-
-  <.breadcrumb color="info" size="medium">
-    <:item icon="hero-academic-cap">Route1</:item>
-    <:item icon="hero-beaker">Route2</:item>
-    <:item icon="hero-computer-desktop">Route3</:item>
-    <:item>Route3</:item>
-  </.breadcrumb>
-
-  <.breadcrumb color="secondary" size="small">
-    <:item link="/">Route1</:item>
-    <:item link="/">Route2</:item>
-    <:item link="/">Route3</:item>
-    <:item link="/">Route3</:item>
-  </.breadcrumb>
-  ```
-  """
-  @doc type: :component
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :items_wrapper_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :separator_icon, :string,
-    default: "hero-chevron-right",
-    doc: "Determines a separator for items of an element"
-
-  attr :separator_icon_class, :string,
-    default: "rtl:rotate-180",
-    doc: "Custom CSS class for additional styling"
-
-  attr :separator_text, :string,
-    default: nil,
-    doc: "Determines a separator for items of an element"
-
-  attr :separator_text_class, :string,
-    default: nil,
-    doc: "Determines a separator for items of an element"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  slot :item, required: false, doc: "Specifies item slot of a breadcrumb" do
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :link, :string, doc: "Renders a navigation, patch link or normal link"
-    attr :title, :string, doc: "Renders a navigation, patch link or normal link"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon_class, :string, doc: "Custom CSS class for additional styling"
-    attr :link_class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def breadcrumb(assigns) do
-    ~H"""
-    <nav class={@class} id={@id} {@rest}>
-      <ol class={[default_classes(), color_class(@color), size_class(@size), @items_wrapper_class]}>
-        <li :for={{item, _} <- Enum.with_index(@item, 1)} class={["flex items-center", item[:class]]}>
-          <.icon
-            :if={!is_nil(item[:icon])}
-            name={item[:icon]}
-            class={["breadcrumb-icon", item[:icon_class]]}
-          />
-          <.link
-            :if={!is_nil(item[:link])}
-            navigate={item[:link]}
-            title={item[:tile]}
-            class={item[:link_class]}
-          >
-            {render_slot(item)}
-          </.link>
-
-          <div :if={is_nil(item[:link])}>{render_slot(item)}</div>
-
-          <.icon
-            :if={@separator_icon}
-            name={@separator_icon}
-            class={["separator-icon", @separator_icon_class]}
-          />
-          <span
-            :if={@separator_text && !@separator_icon}
-            class={["separator-text", @separator_text_class]}
-          >
-            {@separator_text}
-          </span>
-        </li>
-        {render_slot(@inner_block)}
-      </ol>
-    </nav>
-    """
-  end
-
-  defp color_class("base") do
-    [
-      "text-[#09090b] hover:[&>li_a]:text-[#1b1b1f]",
-      "dark:text-[#FAFAFA] dark:hover:[&>li_a]:text-[#ededed]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "text-white hover:[&>li_a]:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "text-[#282828] hover:[&>li_a]:text-[#727272]"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "text-[#4B4B4B] hover:[&>li_a]:text-[#282828]",
-      "dark:text-[#DDDDDD] dark:hover:[&>li_a]:text-[#E8E8E8]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "text-[#007F8C] hover:[&>li_a]:text-[#016974]",
-      "dark:text-[#01B8CA] dark:hover:[&>li_a]:text-[#77D5E3]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "text-[#266EF1] hover:[&>li_a]:text-[#175BCC]",
-      "dark:text-[#6DAAFB] dark:hover:[&>li_a]:text-[#A9C9FF]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "text-[#0E8345] hover:[&>li_a]:text-[#166C3B]",
-      "dark:text-[#06C167] dark:hover:[&>li_a]:text-[#7FD99A]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "text-[#CA8D01] hover:[&>li_a]:text-[#CA8D01]",
-      "dark:text-[#FDC034] dark:hover:[&>li_a]:text-[#FDD067]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "text-[#DE1135] hover:[&>li_a]:text-[#BB032A]",
-      "dark:text-[#FC7F79] dark:hover:[&>li_a]:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "text-[#0B84BA] hover:[&>li_a]:text-[#08638C]",
-      "dark:text-[#3EB7ED] dark:hover:[&>li_a]:text-[#6EC9F2]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "text-[#8750C5] hover:[&>li_a]:text-[#653C94]",
-      "dark:text-[#BA83F9] dark:hover:[&>li_a]:text-[#CBA2FA]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "text-[#A86438] hover:[&>li_a]:text-[#7E4B2A]",
-      "dark:text-[#DB976B] dark:hover:[&>li_a]:text-[#E4B190]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "text-[#868686] hover:[&>li_a]:text-[#727272]",
-      "dark:text-[#A6A6A6] dark:hover:[&>li_a]:text-[#BBBBBB]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    "text-xs gap-1.5 [&>li]:gap-1.5 [&>li>.separator-icon]:size-3 [&>li>.breadcrumb-icon]:size-4"
-  end
-
-  defp size_class("small") do
-    "text-sm gap-2 [&>li]:gap-2 [&>li>.separator-icon]:size-3.5 [&>li>.breadcrumb-icon]:size-5"
-  end
-
-  defp size_class("medium") do
-    "text-base gap-2.5 [&>li]:gap-2.5 [&>li>.separator-icon]:size-4 [&>li>.breadcrumb-icon]:size-6"
-  end
-
-  defp size_class("large") do
-    "text-lg gap-3 [&>li]:gap-3 [&>li>.separator-icon]:size-5 [&>li>.breadcrumb-icon]:size-7"
-  end
-
-  defp size_class("extra_large") do
-    "text-xl gap-3.5 [&>li]:gap-3.5 [&>li>.separator-icon]:size-6 [&>li>.breadcrumb-icon]:size-8"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp default_classes() do
-    [
-      "flex items-center transition-all ease-in-ou duration-100 group"
-    ]
-  end
-end
diff --git a/lib/geo_web/components/button.ex b/lib/geo_web/components/button.ex
deleted file mode 100644
index 22ce13b..0000000
--- a/lib/geo_web/components/button.ex
+++ /dev/null
@@ -1,2022 +0,0 @@
-defmodule GeoWeb.Components.Button do
-  @moduledoc """
-  Provides a comprehensive set of button components for the `GeoWeb.Components.Button` project.
-  These components are highly customizable, allowing various styles, sizes, colors,
-  and configurations, including buttons with icons, gradients, and different indicator positions.
-
-  ## Components
-
-    - `button/1`: Renders a standard button with extensive customization options.
-    - `button_group/1`: Renders a group of buttons with configurable layout and styling.
-    - `input_button/1`: Renders a button with input attributes, useful for form submissions.
-    - `button_link/1`: Renders a button as a link, supporting different navigation types.
-    - `button_indicator/1`: A utility component to render indicators on buttons based on configuration.
-
-  ## Configuration Options
-
-  The module supports various predefined options for attributes like size, color,
-  variant, and border style. These can be customized through the attributes of each
-  component function to match specific design requirements.
-
-  > This module makes it easy to render buttons with consistent styling and behavior
-  > across your application while offering the flexibility needed for various use cases.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @indicator_positions [
-    "indicator",
-    "right_indicator",
-    "left_indicator",
-    "top_left_indicator",
-    "top_center_indicator",
-    "top_right_indicator",
-    "middle_left_indicator",
-    "middle_right_indicator",
-    "bottom_left_indicator",
-    "bottom_center_indicator",
-    "bottom_right_indicator"
-  ]
-
-  @doc """
-  The `button_group` component is used to group multiple buttons together with customizable
-  attributes like `variant`, `color`, and `variation`.
-
-  It supports different layout orientations, allowing buttons to be displayed horizontally or vertically.
-
-  ## Examples
-
-  ```elixir
-  <.button_group>
-    <.button icon="hero-adjustments-vertical">Button 1</.button>
-    <.button icon="hero-adjustments-vertical" />
-    <.button icon="hero-adjustments-vertical" />
-    <.button>Button 3</.button>
-  </.button_group>
-
-  <.button_group>
-    <.button>Button 1</.button>
-    <.button>Button 2</.button>
-    <.button>Button 3</.button>
-    <.button>Button 4</.button>
-    <.button>Button 5</.button>
-  </.button_group>
-
-  <.button_group color="success">
-    <.button icon="hero-adjustments-vertical">Button 1</.button>
-    <.button icon="hero-adjustments-vertical" color="success" />
-    <.button icon="hero-adjustments-vertical" />
-    <.button color="success">Button 3</.button>
-  </.button_group>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variation, :string,
-    values: ["horizontal", "vertical"],
-    default: "horizontal",
-    doc: "Defines the layout orientation of the component"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def button_group(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="group"
-      class={[
-        default_classes(:grouped, false),
-        variation(@variation),
-        rounded_size(@rounded),
-        border_class(@color),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `button` component is used to create customizable buttons with various styles, icons, and indicators.
-
-  It supports different types such as `button`, `submit`, and `reset`, and provides
-  options for configuring size, color, and border radius.
-
-  ## Examples
-
-  ```elixir
-  <.button variant="inverted_gradient" color="danger">Button 4</.button>
-  <.button variant="inverted_gradient" color="info">Button 2</.button>
-  <.button icon="hero-adjustments-vertical" variant="inverted_gradient" color="success"/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-
-  attr :type, :any,
-    values: ["button", "submit", "reset", nil],
-    default: nil,
-    doc: "Specifies the type of the element"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :rounded, :string, default: "large", doc: "Determines the border radius"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :content_position, :string,
-    default: "center",
-    doc: "Determines the alignment of the element's content"
-
-  attr :display, :string,
-    default: "inline-flex",
-    doc: "Specifies the CSS display property for the element"
-
-  attr :line_height, :string, default: "leading-5", doc: "Line height"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Determines custom class for the icon"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :full_width, :boolean, default: false, doc: "Make button full width"
-
-  attr :indicator_class, :string,
-    default: nil,
-    doc: "Custom CSS class for styling the indicator element"
-
-  attr :indicator_size, :string,
-    default: "extra_small",
-    doc: "Defines the size of the indicator element"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :content_class, :string, default: "block", doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    include:
-      ~w(disabled form name value right_icon left_icon pinging circle) ++ @indicator_positions,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :loading, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-
-    attr :position, :string,
-      values: ["start", "end"],
-      doc: "Determines the element position"
-  end
-
-  def button(assigns) do
-    assigns = assign_new(assigns, :indicator, fn -> is_indicators?(assigns[:rest]) end)
-
-    ~H"""
-    <button
-      type={@type}
-      id={@id}
-      class={[
-        default_classes(@rest[:pinging], @indicator),
-        size_class(@size, @rest[:circle]),
-        color_variant(@variant, @color, @indicator),
-        content_position(@content_position),
-        rounded_size(@rounded),
-        border_size(@border, @variant),
-        @full_width && "w-full",
-        @line_height,
-        @font_weight,
-        @display,
-        @class
-      ]}
-      {drop_rest(@rest)}
-    >
-      <span
-        :for={loading <- @loading}
-        :if={is_nil(loading[:position]) || loading[:position] == "start"}
-        class={loading[:class]}
-      >
-        {render_slot(loading)}
-      </span>
-
-      <.button_indicator position="left" size={@indicator_size} class={@indicator_class} {@rest} />
-      <.icon :if={icon_position(@icon, @rest) == "left"} name={@icon} class={@icon_class} />
-      <span :if={@inner_block && render_slot(@inner_block)} class={[@content_class]}>
-        {render_slot(@inner_block)}
-      </span>
-      <.icon :if={icon_position(@icon, @rest) == "right"} name={@icon} class={@icon_class} />
-      <.button_indicator size={@indicator_size} class={@indicator_class} {@rest} />
-
-      <span :for={loading <- @loading} :if={loading[:position] == "end"} class={loading[:class]}>
-        {render_slot(loading)}
-      </span>
-    </button>
-    """
-  end
-
-  @doc """
-  The `input_button` component is used to create input elements with button-like styles and various
-  customization options such as `color`, `size`, and `border`.
-
-  It supports different input types like `button`, `submit`, and `reset`, allowing for
-  flexible usage in forms and interactive elements.
-
-  ## Examples
-
-  ```elixir
-  <.input_button value="input button" color="warning" />
-  <.input_button value="input submit" type="submit" />
-  <.input_button value="input reset" type="reset" color="silver" />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :rounded, :string, default: "large", doc: "Determines the border radius"
-  attr :value, :string, default: "", doc: "Value of input"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :type, :string, default: "button", doc: "Determines type of input"
-  attr :line_height, :string, default: "leading-5", doc: "Line height"
-
-  attr :content_position, :string,
-    default: "center",
-    doc: "Determines the alignment of the element's content"
-
-  attr :display, :string,
-    default: "inline-block",
-    doc: "Specifies the CSS display property for the element"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :full_width, :boolean, default: false, doc: "Make button full width"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def input_button(assigns) do
-    ~H"""
-    <input
-      type={@type}
-      id={@id}
-      value={@value}
-      class={[
-        default_classes(@rest[:pinging], false),
-        size_class(@size, @rest[:circle]),
-        color_variant(@variant, @color, false),
-        content_position(@content_position),
-        rounded_size(@rounded),
-        border_size(@border, @variant),
-        @full_width && "w-full",
-        @font_weight,
-        @line_height,
-        @display,
-        @class
-      ]}
-      {@rest}
-    />
-    """
-  end
-
-  @doc """
-  The `button_link` component is used to create stylized link elements that resemble buttons.
-
-  It supports different navigation methods like `navigate`, `patch`, and `href` along with
-  customizable attributes for appearance and behavior.
-
-  ## Examples
-
-  ```elixir
-  <.button_link navigate="/admin" icon="hero-adjustments-vertical" />
-  <.button_link navigate="/admin">Button 3</.button_link>
-
-  <.button_link navigate="/admin" icon="hero-adjustments-vertical">
-    Button 1
-  </.button_link>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-
-  attr :navigate, :string,
-    doc: "Defines the path for navigation within the application using a `navigate` attribute."
-
-  attr :patch, :string, doc: "Specifies the path for navigation using a LiveView patch"
-  attr :href, :string, doc: "Sets the URL for an external link"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :rounded, :string, default: "large", doc: ""
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :content_class, :string, default: "block", doc: "Custom CSS class for additional styling"
-
-  attr :display, :string,
-    default: "inline-flex",
-    doc: "Specifies the CSS display property for the element"
-
-  attr :line_height, :string, default: "leading-5", doc: "Line height"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Determines custom class for the icon"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :full_width, :boolean, default: false, doc: "Make button full width"
-
-  attr :indicator_class, :string,
-    default: nil,
-    doc: "Custom CSS class for styling the indicator element"
-
-  attr :indicator_size, :string,
-    default: "extra_small",
-    doc: "Defines the size of the indicator element"
-
-  attr :rest, :global,
-    include:
-      ~w(right_icon left_icon pinging circle download hreflang referrerpolicy rel target type csrf_token method replace) ++
-        @indicator_positions,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :loading, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-
-    attr :position, :string,
-      values: ["start", "end"],
-      doc: "Determines the element position"
-  end
-
-  def button_link(%{navigate: _navigate} = assigns) do
-    assigns = assign_new(assigns, :indicator, fn -> is_indicators?(assigns[:rest]) end)
-
-    ~H"""
-    <.link
-      navigate={@navigate}
-      id={@id}
-      class={[
-        default_classes(@rest[:pinging], @indicator),
-        size_class(@size, @rest[:circle]),
-        color_variant(@variant, @color, @indicator),
-        rounded_size(@rounded),
-        border_size(@border, @variant),
-        @full_width && "w-full",
-        @font_weight,
-        @line_height,
-        @display,
-        @class
-      ]}
-      {drop_rest(@rest)}
-    >
-      <span
-        :for={loading <- @loading}
-        :if={is_nil(loading[:position]) || loading[:position] == "start"}
-        class={loading[:class]}
-      >
-        {render_slot(loading)}
-      </span>
-
-      <.button_indicator position="left" size={@indicator_size} class={@indicator_class} {@rest} />
-      <.icon :if={icon_position(@icon, @rest) == "left"} name={@icon} class={@icon_class} />
-      <span :if={(@inner_block && render_slot(@inner_block)) || @title} class={[@content_class]}>
-        {render_slot(@inner_block) || @title}
-      </span>
-      <.icon :if={icon_position(@icon, @rest) == "right"} name={@icon} class={@icon_class} />
-      <.button_indicator size={@indicator_size} class={@indicator_class} {@rest} />
-
-      <span :for={loading <- @loading} :if={loading[:position] == "end"} class={loading[:class]}>
-        {render_slot(loading)}
-      </span>
-    </.link>
-    """
-  end
-
-  def button_link(%{patch: _patch} = assigns) do
-    assigns = assign_new(assigns, :indicator, fn -> is_indicators?(assigns[:rest]) end)
-
-    ~H"""
-    <.link
-      patch={@patch}
-      id={@id}
-      class={[
-        default_classes(@rest[:pinging], @indicator),
-        size_class(@size, @rest[:circle]),
-        color_variant(@variant, @color, @indicator),
-        rounded_size(@rounded),
-        border_size(@border, @variant),
-        @full_width && "w-full",
-        @font_weight,
-        @line_height,
-        @class
-      ]}
-      {drop_rest(@rest)}
-    >
-      <span
-        :for={loading <- @loading}
-        :if={is_nil(loading[:position]) || loading[:position] == "start"}
-        class={loading[:class]}
-      >
-        {render_slot(loading)}
-      </span>
-
-      <.button_indicator position="left" size={@indicator_size} class={@indicator_class} {@rest} />
-      <.icon :if={icon_position(@icon, @rest) == "left"} name={@icon} />
-      <span :if={(@inner_block && render_slot(@inner_block)) || @title} class={[@content_class]}>
-        {render_slot(@inner_block) || @title}
-      </span>
-      <.icon :if={icon_position(@icon, @rest) == "right"} name={@icon} />
-      <.button_indicator size={@indicator_size} class={@indicator_class} {@rest} />
-
-      <span :for={loading <- @loading} :if={loading[:position] == "end"} class={loading[:class]}>
-        {render_slot(loading)}
-      </span>
-    </.link>
-    """
-  end
-
-  def button_link(%{href: _href} = assigns) do
-    assigns = assign_new(assigns, :indicator, fn -> is_indicators?(assigns[:rest]) end)
-
-    ~H"""
-    <.link
-      href={@href}
-      id={@id}
-      class={[
-        default_classes(@rest[:pinging], @indicator),
-        size_class(@size, @rest[:circle]),
-        color_variant(@variant, @color, @indicator),
-        rounded_size(@rounded),
-        border_size(@border, @variant),
-        @full_width && "w-full",
-        @font_weight,
-        @line_height,
-        @class
-      ]}
-      {drop_rest(@rest)}
-    >
-      <span
-        :for={loading <- @loading}
-        :if={is_nil(loading[:position]) || loading[:position] == "start"}
-        class={loading[:class]}
-      >
-        {render_slot(loading)}
-      </span>
-
-      <.button_indicator position="left" size={@indicator_size} class={@indicator_class} {@rest} />
-      <.icon :if={icon_position(@icon, @rest) == "left"} name={@icon} />
-      <span :if={(@inner_block && render_slot(@inner_block)) || @title} class={[@content_class]}>
-        {render_slot(@inner_block) || @title}
-      </span>
-      <.icon :if={icon_position(@icon, @rest) == "right"} name={@icon} />
-      <.button_indicator size={@indicator_size} class={@indicator_class} {@rest} />
-
-      <span :for={loading <- @loading} :if={loading[:position] == "end"} class={loading[:class]}>
-        {render_slot(loading)}
-      </span>
-    </.link>
-    """
-  end
-
-  @doc """
-  Renders a back navigation link.
-
-  ## Examples
-
-      <.back navigate={~p"/posts"}>Back to posts</.back>
-  """
-  @doc type: :component
-  attr :navigate, :any, required: true
-  slot :inner_block, required: true
-
-  def back(assigns) do
-    ~H"""
-    <div class="mt-16">
-      <.link
-        navigate={@navigate}
-        class="text-sm font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
-      >
-        <.icon name="hero-arrow-left-solid" class="h-3 w-3" />
-        {render_slot(@inner_block)}
-      </.link>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :position, :string, default: "none", doc: "Determines the element position"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :size, :string,
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  defp button_indicator(%{position: "left", rest: %{left_indicator: true}} = assigns) do
-    ~H"""
-    <span aria-hidden="true" class={["indicator", indicator_size(@size), @class]} />
-    """
-  end
-
-  defp button_indicator(%{position: "left", rest: %{indicator: true}} = assigns) do
-    ~H"""
-    <span aria-hidden="true" class={["indicator", indicator_size(@size), @class]} />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{right_indicator: true}} = assigns) do
-    ~H"""
-    <span aria-hidden="true" class={["indicator", indicator_size(@size), @class]} />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{top_left_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute -translate-y-1/2 -translate-x-1/2 right-auto top-0 left-0"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{top_center_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute top-0 -translate-y-1/2 translate-x-1/2 right-1/2"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{top_right_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute -translate-y-1/2 translate-x-1/2 left-auto top-0 right-0"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{middle_left_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute -translate-y-1/2 -translate-x-1/2 right-auto left-0 top-2/4"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{middle_right_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute -translate-y-1/2 translate-x-1/2 left-auto right-0 top-2/4"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{bottom_left_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute translate-y-1/2 -translate-x-1/2 right-auto bottom-0 left-0"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{bottom_center_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute translate-y-1/2 translate-x-1/2 bottom-0 right-1/2"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(%{position: "none", rest: %{bottom_right_indicator: true}} = assigns) do
-    ~H"""
-    <span
-      aria-hidden="true"
-      class={[
-        "indicator",
-        indicator_size(@size),
-        @class || "absolute translate-y-1/2 translate-x-1/2 left-auto bottom-0 right-0"
-      ]}
-    />
-    """
-  end
-
-  defp button_indicator(assigns) do
-    ~H"""
-    """
-  end
-
-  defp border_size(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "transparent",
-              "subtle",
-              "default_gradient",
-              "outline_gradient",
-              "inverted_gradient"
-            ],
-       do: nil
-
-  defp border_size("none", _), do: nil
-  defp border_size("extra_small", _), do: "border"
-  defp border_size("small", _), do: "border-2"
-  defp border_size("medium", _), do: "border-[3px]"
-  defp border_size("large", _), do: "border-4"
-  defp border_size("extra_large", _), do: "border-[5px]"
-  defp border_size(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _, indicator) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] hover:bg-[#F8F9FA]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a] dark:hover:bg-[#242424]",
-      "disabled:bg-[#f1f3f5] disabled:text-[#adb5bd] dark:disabled:bg-[#2e2e2e] dark:disabled:text-[#696969]",
-      "disabled:border-[#dee2e6] dark:disabled:border-[#424242]",
-      "shadow-sm",
-      indicator && "[&>.indicator]:bg-[#e4e4e7] dark:[&>.indicator]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white", _) do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", "dark", _) do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", "natural", indicator) do
-    [
-      "bg-[#4B4B4B] text-white hover:bg-[#282828] dark:bg-[#DDDDDD]",
-      "dark:text-black dark:hover:bg-[#E8E8E8]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-white dark:[&>.indicator]:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "primary", indicator) do
-    [
-      "bg-[#007F8C] text-white hover:bg-[#016974] dark:bg-[#01B8CA] ",
-      "dark:text-black dark:hover:bg-[#77D5E3]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", indicator) do
-    [
-      "bg-[#266EF1] text-white hover:bg-[#175BCC] dark:bg-[#6DAAFB]",
-      "dark:text-black dark:hover:bg-[#A9C9FF]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("default", "success", indicator) do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167]",
-      "dark:text-black dark:hover:bg-[#7FD99A]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#047857] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("default", "warning", indicator) do
-    [
-      "bg-[#CA8D01] text-white hover:bg-[#976A01] dark:bg-[#FDC034]",
-      "dark:text-black dark:hover:bg-[#FDD067]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#FF8B08] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("default", "danger", indicator) do
-    [
-      "bg-[#DE1135] text-white hover:bg-[#BB032A] dark:bg-[#FC7F79]",
-      "dark:text-black dark:hover:bg-[#FFB2AB]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#E73B3B] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("default", "info", indicator) do
-    [
-      "bg-[#0B84BA] text-white hover:bg-[#08638C] dark:bg-[#3EB7ED]",
-      "dark:text-black dark:hover:bg-[#6EC9F2]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#004FC4] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("default", "misc", indicator) do
-    [
-      "bg-[#8750C5] text-white hover:bg-[#653C94] dark:bg-[#BA83F9]",
-      "dark:text-black dark:hover:bg-[#CBA2FA]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#52059C] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", indicator) do
-    [
-      "bg-[#A86438] text-white hover:bg-[#7E4B2A] dark:bg-[#DB976B]",
-      "dark:text-black dark:hover:bg-[#E4B190]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#4D4137] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("default", "silver", indicator) do
-    [
-      "bg-[#868686] text-white hover:bg-[#727272] dark:bg-[#A6A6A6]",
-      "dark:text-black dark:hover:bg-[#BBBBBB]",
-      "disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      indicator && "[&>.indicator]:bg-[#707483] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", indicator) do
-    [
-      "bg-transparent text-[#4B4B4B] border-[#4B4B4B] hover:text-[#282828]",
-      "hover:border-[#282828] dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "dark:hover:text-[#E8E8E8] dark:hover:border-[#E8E8E8] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white "
-    ]
-  end
-
-  defp color_variant("outline", "primary", indicator) do
-    [
-      "bg-transparent text-[#007F8C] border-[#007F8C] hover:text-[#016974]",
-      "hover:border-[#016974] dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "dark:hover:text-[#77D5E3] dark:hover:border-[#77D5E3] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", indicator) do
-    [
-      "bg-transparent text-[#266EF1] border-[#266EF1] hover:text-[#175BCC]",
-      "hover:border-[#175BCC] dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "dark:hover:text-[#A9C9FF] dark:hover:border-[#A9C9FF] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline", "success", indicator) do
-    [
-      "bg-transparent text-[#0E8345] border-[#0E8345] hover:text-[#166C3B]",
-      "hover:border-[#166C3B] dark:text-[#06C167] dark:border-[#06C167]",
-      "dark:hover:text-[#7FD99A] dark:hover:border-[#7FD99A] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", indicator) do
-    [
-      "bg-transparent text-[#CA8D01] border-[#CA8D01] hover:text-[#976A01]",
-      "hover:border-[#976A01] dark:text-[#FDC034] dark:border-[#FDC034]",
-      "dark:hover:text-[#FDD067] dark:hover:border-[#FDD067]  disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", indicator) do
-    [
-      "bg-transparent text-[#DE1135] border-[#DE1135] hover:text-[#BB032A]",
-      "hover:border-[#BB032A] dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "dark:hover:text-[#FFB2AB] dark:hover:border-[#FFB2AB] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline", "info", indicator) do
-    [
-      "bg-transparent text-[#0B84BA] border-[#0B84BA] hover:text-[#08638C]",
-      "hover:border-[#08638C] dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "dark:hover:text-[#6EC9F2] dark:hover:border-[#6EC9F2] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", indicator) do
-    [
-      "bg-transparent text-[#8750C5] border-[#8750C5] hover:text-[#653C94]",
-      "hover:border-[#653C94] dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "dark:hover:text-[#CBA2FA] dark:hover:border-[#CBA2FA] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", indicator) do
-    [
-      "bg-transparent text-[#A86438] border-[#A86438] hover:text-[#7E4B2A]",
-      "hover:border-[#7E4B2A] dark:text-[#DB976B] dark:border-[#DB976B]",
-      "dark:hover:text-[#E4B190] dark:hover:border-[#E4B190] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", indicator) do
-    [
-      "bg-transparent text-[#868686] border-[#868686] hover:text-[#727272]",
-      "hover:border-[#727272] dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "dark:hover:text-[#BBBBBB] dark:hover:border-[#BBBBBB] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", indicator) do
-    [
-      "bg-transparent text-[#4B4B4B] hover:text-[#282828]",
-      "dark:text-[#DDDDDD] dark:hover:text-[#E8E8E8]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", indicator) do
-    [
-      "bg-transparent text-[#007F8C] hover:text-[#016974]",
-      "dark:text-[#01B8CA] dark:hover:text-[#77D5E3]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", indicator) do
-    [
-      "bg-transparent text-[#266EF1] hover:text-[#175BCC]",
-      "dark:text-[#6DAAFB] dark:hover:text-[#A9C9FF]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("transparent", "success", indicator) do
-    [
-      "bg-transparent text-[#0E8345] hover:text-[#166C3B]",
-      "dark:text-[#06C167] dark:hover:text-[#7FD99A]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", indicator) do
-    [
-      "bg-transparent text-[#CA8D01] hover:text-[#CA8D01]",
-      "dark:text-[#FDC034] dark:hover:text-[#FDD067]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", indicator) do
-    [
-      "bg-transparent text-[#DE1135] hover:text-[#BB032A]",
-      "dark:text-[#FC7F79] dark:hover:text-[#FFB2AB]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("transparent", "info", indicator) do
-    [
-      "bg-transparent text-[#0B84BA] hover:text-[#08638C]",
-      "dark:text-[#3EB7ED] dark:hover:text-[#6EC9F2]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", indicator) do
-    [
-      "bg-transparent text-[#8750C5] hover:text-[#653C94]",
-      "dark:text-[#BA83F9] dark:hover:text-[#CBA2FA]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", indicator) do
-    [
-      "bg-transparent text-[#A86438] hover:text-[#7E4B2A]",
-      "dark:text-[#DB976B] dark:hover:text-[#E4B190]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", indicator) do
-    [
-      "bg-transparent text-[#868686] hover:text-[#727272]",
-      "dark:text-[#A6A6A6] dark:hover:text-[#BBBBBB]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("subtle", "natural", indicator) do
-    [
-      "bg-transparent text-[#4B4B4B] hover:text-[#282828] hover:bg-[#F3F3F3]",
-      "dark:text-[#DDDDDD] dark:hover:text-[#E8E8E8] dark:hover:bg-[#4B4B4B]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("subtle", "primary", indicator) do
-    [
-      "bg-transparent text-[#007F8C] hover:text-[#016974] hover:bg-[#E2F8FB]",
-      "dark:text-[#01B8CA] dark:hover:text-[#77D5E3] dark:hover:bg-[#002D33]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("subtle", "secondary", indicator) do
-    [
-      "bg-transparent text-[#266EF1] hover:text-[#175BCC] hover:bg-[#EFF4FE]",
-      "dark:text-[#6DAAFB] dark:hover:text-[#A9C9FF] dark:hover:bg-[#002661]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("subtle", "success", indicator) do
-    [
-      "bg-transparent text-[#0E8345] hover:text-[#166C3B] hover:bg-[#EAF6ED]",
-      "dark:text-[#06C167] dark:hover:text-[#7FD99A] dark:hover:bg-[#002F14]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("subtle", "warning", indicator) do
-    [
-      "bg-transparent text-[#CA8D01] hover:text-[#CA8D01] hover:bg-[#FFF7E6]",
-      "dark:text-[#FDC034] dark:hover:text-[#FDD067] dark:hover:bg-[#322300]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("subtle", "danger", indicator) do
-    [
-      "bg-transparent text-[#DE1135] hover:text-[#BB032A] hover:bg-[#FFF0EE]",
-      "dark:text-[#FC7F79] dark:hover:text-[#FFB2AB] dark:hover:bg-[#520810]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("subtle", "info", indicator) do
-    [
-      "bg-transparent text-[#0B84BA] hover:text-[#08638C] hover:bg-[#E7F6FD]",
-      "dark:text-[#3EB7ED] dark:hover:text-[#6EC9F2] dark:hover:bg-[#03212F]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("subtle", "misc", indicator) do
-    [
-      "bg-transparent text-[#8750C5] hover:text-[#653C94] hover:bg-[#F6F0FE]",
-      "dark:text-[#BA83F9] dark:hover:text-[#CBA2FA] dark:hover:bg-[#221431]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("subtle", "dawn", indicator) do
-    [
-      "bg-transparent text-[#A86438] hover:text-[#7E4B2A] hover:bg-[#FBF2ED]",
-      "dark:text-[#DB976B] dark:hover:text-[#E4B190] dark:hover:bg-[#2A190E]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("subtle", "silver", indicator) do
-    [
-      "bg-transparent text-[#868686] hover:text-[#727272] hover:bg-[#F3F3F3]",
-      "dark:text-[#A6A6A6] dark:hover:text-[#BBBBBB] dark:hover:bg-[#4B4B4B]",
-      "disabled:text-[#DDDDDD] dark:disabled:text-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#4B4B4B] border-[#4B4B4B] hover:text-[#282828]",
-      "hover:border-[#282828] dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "dark:hover:text-[#E8E8E8] dark:hover:border-[#E8E8E8] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#007F8C] border-[#007F8C] hover:text-[#016974]",
-      "hover:border-[#016974] dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "dark:hover:text-[#77D5E3] dark:hover:border-[#77D5E3] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#266EF1] border-[#266EF1] hover:text-[#175BCC]",
-      "hover:border-[#175BCC] dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "dark:hover:text-[#A9C9FF] dark:hover:border-[#A9C9FF] disabled:text-[#DDDDDD]",
-      " disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#0E8345] border-[#0E8345] hover:text-[#166C3B]",
-      "hover:border-[#166C3B] dark:text-[#06C167] dark:border-[#06C167]",
-      "dark:hover:text-[#7FD99A] dark:hover:border-[#7FD99A] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#CA8D01] border-[#CA8D01] hover:text-[#976A01]",
-      "hover:border-[#976A01] dark:text-[#FDC034] dark:border-[#FDC034]",
-      "dark:hover:text-[#FDD067] dark:hover:border-[#FDD067] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#DE1135] border-[#DE1135] hover:text-[#BB032A]",
-      "hover:border-[#BB032A] dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "dark:hover:text-[#FFB2AB] dark:hover:border-[#FFB2AB] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#0B84BA] border-[#0B84BA] hover:text-[#0B84BA]",
-      "hover:border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "dark:hover:text-[#6EC9F2] dark:hover:border-[#6EC9F2] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#8750C5] border-[#8750C5] hover:text-[#653C94]",
-      "hover:border-[#653C94] dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "dark:hover:text-[#CBA2FA] dark:hover:border-[#CBA2FA] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#A86438] border-[#A86438] hover:text-[#7E4B2A]",
-      "hover:border-[#7E4B2A] dark:text-[#DB976B] dark:border-[#DB976B]",
-      "dark:hover:text-[#E4B190] dark:hover:border-[#E4B190] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", indicator) do
-    [
-      "bg-white dark:bg-[#282828] text-[#868686] border-[#868686] hover:text-[#727272]",
-      "hover:border-[#727272] dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "dark:hover:text-[#BBBBBB] dark:hover:border-[#BBBBBB] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      indicator && "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", indicator) do
-    [
-      "bg-[#4B4B4B] text-white hover:bg-[#282828] dark:bg-[#DDDDDD]",
-      "dark:text-black dark:hover:bg-[#E8E8E8] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-white dark:[&>.indicator]:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", indicator) do
-    [
-      "bg-[#007F8C] text-white hover:bg-[#016974] dark:bg-[#01B8CA]",
-      "dark:text-black dark:hover:bg-[#77D5E3] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", indicator) do
-    [
-      "bg-[#266EF1] text-white hover:bg-[#175BCC] dark:bg-[#6DAAFB]",
-      "dark:text-black dark:hover:bg-[#A9C9FF] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", indicator) do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167]",
-      "dark:text-black dark:hover:bg-[#7FD99A] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#047857] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", indicator) do
-    [
-      "bg-[#CA8D01] text-white hover:bg-[#976A01] dark:bg-[#FDC034]",
-      "dark:text-black dark:hover:bg-[#FDD067] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#FF8B08] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", indicator) do
-    [
-      "bg-[#DE1135] text-white hover:bg-[#BB032A] dark:bg-[#FC7F79]",
-      "dark:text-black dark:hover:bg-[#FFB2AB] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#E73B3B] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", indicator) do
-    [
-      "bg-[#0B84BA] text-white hover:bg-[#08638C] dark:bg-[#3EB7ED]",
-      "dark:text-black dark:hover:bg-[#6EC9F2] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#004FC4] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", indicator) do
-    [
-      "bg-[#8750C5] text-white hover:bg-[#653C94] dark:bg-[#BA83F9]",
-      "dark:text-black dark:hover:bg-[#CBA2FA] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#52059C] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", indicator) do
-    [
-      "bg-[#A86438] text-white hover:bg-[#7E4B2A] dark:bg-[#DB976B]",
-      "dark:text-black dark:hover:bg-[#E4B190] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#4D4137] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", indicator) do
-    [
-      "bg-[#868686] text-white hover:bg-[#727272] dark:bg-[#A6A6A6]",
-      "dark:text-black dark:hover:bg-[#BBBBBB] disabled:bg-[#F3F3F3] disabled:text-[#BBBBBB]",
-      "dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      indicator && "[&>.indicator]:bg-[#707483] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("inverted", "natural", indicator) do
-    [
-      "bg-transparent text-[#4B4B4B] border-[#4B4B4B] hover:text-[#282828]",
-      "hover:border-[#282828] hover:bg-[#F3F3F3]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD] dark:hover:text-[#E8E8E8]",
-      "dark:hover:border-[#E8E8E8] dark:hover:bg-[#4B4B4B] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("inverted", "primary", indicator) do
-    [
-      "bg-transparent text-[#007F8C] border-[#007F8C] hover:text-[#016974]",
-      "hover:border-[#016974] hover:bg-[#E2F8FB]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA] dark:hover:text-[#77D5E3]",
-      "dark:hover:border-[#77D5E3] dark:hover:bg-[#002D33] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("inverted", "secondary", indicator) do
-    [
-      "bg-transparent text-[#266EF1] border-[#266EF1] hover:text-[#175BCC]",
-      "hover:border-[#175BCC] hover:bg-[#EFF4FE]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB] dark:hover:text-[#A9C9FF]",
-      "dark:hover:border-[#A9C9FF] dark:hover:bg-[#002661] disabled:text-[#DDDDDD]",
-      " disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("inverted", "success", indicator) do
-    [
-      "bg-transparent text-[#0E8345] border-[#0E8345] hover:text-[#166C3B]",
-      "hover:border-[#166C3B] hover:bg-[#EAF6ED]",
-      "dark:text-[#06C167] dark:border-[#06C167] dark:hover:text-[#7FD99A]",
-      "dark:hover:border-[#7FD99A] dark:hover:bg-[#002F14] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("inverted", "warning", indicator) do
-    [
-      "bg-transparent text-[#CA8D01] border-[#CA8D01] hover:text-[#976A01]",
-      "hover:border-[#976A01] hover:bg-[#FFF7E6]",
-      "dark:text-[#FDC034] dark:border-[#FDC034] dark:hover:text-[#FDD067]",
-      "dark:hover:border-[#FDD067] dark:hover:bg-[#322300] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("inverted", "danger", indicator) do
-    [
-      "bg-transparent text-[#DE1135] border-[#DE1135] hover:text-[#BB032A]",
-      "hover:border-[#BB032A] hover:bg-[#FFF0EE]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79] dark:hover:text-[#FFB2AB]",
-      "dark:hover:border-[#FFB2AB] dark:hover:bg-[#520810] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("inverted", "info", indicator) do
-    [
-      "bg-transparent text-[#0B84BA] border-[#0B84BA] hover:text-[#0B84BA]",
-      "hover:border-[#0B84BA] hover:bg-[#E7F6FD]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED] dark:hover:text-[#6EC9F2]",
-      "dark:hover:border-[#6EC9F2] dark:hover:bg-[#03212F] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("inverted", "misc", indicator) do
-    [
-      "bg-transparent text-[#8750C5] border-[#8750C5] hover:text-[#653C94]",
-      "hover:border-[#653C94] hover:bg-[#F6F0FE]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9] dark:hover:text-[#CBA2FA]",
-      "dark:hover:border-[#CBA2FA] dark:hover:bg-[#221431] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("inverted", "dawn", indicator) do
-    [
-      "bg-transparent text-[#A86438] border-[#A86438] hover:text-[#7E4B2A]",
-      "hover:border-[#7E4B2A] hover:bg-[#FBF2ED]",
-      "dark:text-[#DB976B] dark:border-[#DB976B] dark:hover:text-[#E4B190]",
-      "dark:hover:border-[#E4B190] dark:hover:bg-[#2A190E] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("inverted", "silver", indicator) do
-    [
-      "bg-transparent text-[#868686] border-[#868686] hover:text-[#727272]",
-      "hover:border-[#727272] hover:bg-[#F3F3F3]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6] dark:hover:text-[#BBBBBB]",
-      "dark:hover:border-[#BBBBBB] dark:hover:bg-[#4B4B4B] disabled:text-[#DDDDDD]",
-      "disabled:border-[#DDDDDD] dark:disabled:text-[#727272] dark:disabled:border-[#727272]",
-      "disabled:hover:bg-transparent dark:disabled:hover:bg-transparent",
-      indicator && "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "natural", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-white dark:[&>.indicator]:bg-black"
-    ]
-  end
-
-  defp color_variant("default_gradient", "primary", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#CDEEF3]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "secondary", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#DEE9FE]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "success", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#D3EFDA]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "warning", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEEFCC]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "danger", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFE1DE]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "info", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#CFEDFB]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "misc", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#EEE0FD]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "dawn", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#F6E5DA]"
-    ]
-  end
-
-  defp color_variant("default_gradient", "silver", indicator) do
-    [
-      "bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black",
-      "disabled:text-[#BBBBBB] dark:disabled:bg-[#4B4B4B] dark:disabled:text-[#868686]",
-      "disabled:from-[#F3F3F3] disabled:to-[#F3F3F3]",
-      "dark:disabled:from-[#4B4B4B] dark:disabled:to-[#4B4B4B]",
-      indicator && "[&>.indicator]:bg-[#4B4B4B] dark:[&>.indicator]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "natural", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#282828] to-[#727272] text-[#4B4B4B] hover:text-[#282828]",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-[#DDDDDD] dark:hover:text-[#E8E8E8]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "primary", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#016974] to-[#01B8CA] text-[#007F8C] hover:text-[#016974]",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-[#01B8CA] dark:hover:text-[#77D5E3]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "secondary", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#175BCC] to-[#6DAAFB] text-[#266EF1] hover:text-[#175BCC]",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-[#6DAAFB] dark:hover:text-[#A9C9FF]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "success", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#166C3B] to-[#06C167] text-[#0E8345] hover:text-[#166C3B]",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-[#06C167] dark:hover:text-[#7FD99A]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "warning", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#976A01] to-[#FDC034] text-[#CA8D01] hover:text-[#976A01]",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-[#FDC034] dark:hover:text-[#FDD067]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "danger", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#BB032A] to-[#FC7F79] text-[#DE1135] hover:text-[#BB032A]",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-[#FC7F79] dark:hover:text-[#FFB2AB]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "info", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#08638C] to-[#3EB7ED] text-[#0B84BA] hover:text-[#08638C]",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-[#3EB7ED] dark:hover:text-[#6EC9F2]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "misc", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#653C94] to-[#BA83F9] text-[#8750C5] hover:text-[#653C94]",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-[#BA83F9] dark:hover:text-[#CBA2FA]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "dawn", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#7E4B2A] to-[#DB976B] text-[#A86438] hover:text-[#7E4B2A]",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-[#DB976B] dark:hover:text-[#DB976B]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline_gradient", "silver", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#5E5E5E] to-[#A6A6A6] text-[#868686] hover:text-[#727272]",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-[#A6A6A6] dark:hover:text-[#BBBBBB]",
-      "before:bg-white dark:before:bg-[#282828] before:absolute before:inset-[2px] before:z-0",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      indicator && "[&>.indicator]:bg-[#5E5E5E] dark:[&>.indicator]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "natural", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#282828] to-[#727272] text-[#4B4B4B] hover:text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-[#DDDDDD] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-black dark:[&>.indicator]:bg-white",
-      indicator && "[&:hover>.indicator]:bg-white dark:[&:hover>.indicator]:bg-black"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "primary", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#016974] to-[#01B8CA] text-[#007F8C] hover:text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-[#01B8CA] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#1A535A] dark:[&>.indicator]:bg-[#CDEEF3]",
-      indicator && "[&:hover>.indicator]:bg-[#CDEEF3] dark:[&:hover>.indicator]:bg-[#1A535A]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "secondary", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#175BCC] to-[#6DAAFB] text-[#266EF1] hover:text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-[#6DAAFB] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#1948A3] dark:[&>.indicator]:bg-[#CDDEFF]",
-      indicator && "[&:hover>.indicator]:bg-[#CDDEFF] dark:[&:hover>.indicator]:bg-[#1948A3]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "success", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#166C3B] to-[#06C167] text-[#0E8345] hover:text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-[#06C167] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#0D572D] dark:[&>.indicator]:bg-[#B1EAC2]",
-      indicator && "[&:hover>.indicator]:bg-[#B1EAC2] dark:[&:hover>.indicator]:bg-[#0D572D]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "warning", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#976A01] to-[#FDC034] text-[#CA8D01] hover:text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-[#FDC034] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#654600] dark:[&>.indicator]:bg-[#FEDF99]",
-      indicator && "[&:hover>.indicator]:bg-[#FEDF99] dark:[&:hover>.indicator]:bg-[#654600]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "danger", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#BB032A] to-[#FC7F79] text-[#DE1135] hover:text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-[#FC7F79] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#950F22] dark:[&>.indicator]:bg-[#FFD2CD]",
-      indicator && "[&:hover>.indicator]:bg-[#FFD2CD] dark:[&:hover>.indicator]:bg-[#950F22]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "info", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#08638C] to-[#3EB7ED] text-[#0B84BA] hover:text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-[#3EB7ED] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#06425D] dark:[&>.indicator]:bg-[#9FDBF6]",
-      indicator && "[&:hover>.indicator]:bg-[#9FDBF6] dark:[&:hover>.indicator]:bg-[#06425D]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "misc", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#653C94] to-[#BA83F9] text-[#8750C5] hover:text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-[#BA83F9] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#442863] dark:[&>.indicator]:bg-[#DDC1FC]",
-      indicator && "[&:hover>.indicator]:bg-[#DDC1FC] dark:[&:hover>.indicator]:bg-[#442863]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "dawn", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#7E4B2A] to-[#DB976B] text-[#A86438] hover:text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-[#DB976B] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#54321C] dark:[&>.indicator]:bg-[#EDCBB5]",
-      indicator && "[&:hover>.indicator]:bg-[#EDCBB5] dark:[&:hover>.indicator]:bg-[#54321C]"
-    ]
-  end
-
-  defp color_variant("inverted_gradient", "silver", indicator) do
-    [
-      "gradient-button [&>*]:relative [&>*]:z-[1] relative bg-gradient-to-br hover:bg-gradient-to-bl",
-      "from-[#5E5E5E] to-[#A6A6A6] text-[#868686] hover:text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-[#A6A6A6] dark:hover:text-black",
-      "before:bg-white dark:before:bg-[#282828] before:transition",
-      "before:ease-in-ou before:duration-100 duration before:absolute before:inset-[2px] before:z-0",
-      "hover:before:bg-transparent dark:hover:before:bg-transparent",
-      "disabled:from-[#DDDDDD] disabled:to-[#DDDDDD] disabled:text-[#DDDDDD]",
-      "dark:disabled:from-[#727272] dark:disabled:to-[#727272] dark:disabled:text-[#727272]",
-      "hover:disabled:bg-white dark:hover:disabled:before:bg-[#282828]",
-      indicator && "[&>.indicator]:bg-[#E8E8E8] dark:[&>.indicator]:bg-[#DDDDDD]",
-      indicator && "[&:hover>.indicator]:bg-[#DDDDDD] dark:[&:hover>.indicator]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp border_class("base") do
-    "border-[#e4e4e7] dark:border-[#27272a]"
-  end
-
-  defp border_class("natural") do
-    "border-black dark:border-white"
-  end
-
-  defp border_class("transparent") do
-    "border-transparent dark:border-transparent"
-  end
-
-  defp border_class("primary") do
-    "border-[#000000] dark:border-[#B0E7EF]"
-  end
-
-  defp border_class("secondary") do
-    "border-[#1948A3] dark:border-[#CDDEFF]"
-  end
-
-  defp border_class("success") do
-    "border-[#0D572D] dark:border-[#B1EAC2]"
-  end
-
-  defp border_class("warning") do
-    "border-[#654600] dark:border-[#FEDF99]"
-  end
-
-  defp border_class("danger") do
-    "border-[#950F22] dark:border-[#FFD2CD]"
-  end
-
-  defp border_class("info") do
-    "border-[#06425D] dark:border-[#9FDBF6]"
-  end
-
-  defp border_class("misc") do
-    "border-[#442863] dark:border-[#DDC1FC]"
-  end
-
-  defp border_class("dawn") do
-    "border-[#54321C] dark:border-[#EDCBB5]"
-  end
-
-  defp border_class("silver") do
-    "border-[#5E5E5E] dark:border-[#DDDDDD]"
-  end
-
-  defp border_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm [&.gradient-button:before]:rounded-[1px]"
-
-  defp rounded_size("small"), do: "rounded [&.gradient-button:before]:rounded-[2px]"
-
-  defp rounded_size("medium"), do: "rounded-md [&.gradient-button:before]:rounded-[4px]"
-
-  defp rounded_size("large"), do: "rounded-lg [&.gradient-button:before]:rounded-[5px]"
-
-  defp rounded_size("extra_large"), do: "rounded-xl [&.gradient-button:before]:rounded-[9px]"
-
-  defp rounded_size("full"), do: "rounded-full [&.gradient-button:before]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small", circle) do
-    [
-      is_nil(circle) && "py-1 px-2",
-      "text-[12px] [&>.indicator]:size-1",
-      !is_nil(circle) && "size-6"
-    ]
-  end
-
-  defp size_class("small", circle) do
-    [
-      is_nil(circle) && "py-1.5 px-3",
-      "text-[13px] [&>.indicator]:size-1.5",
-      !is_nil(circle) && "size-7"
-    ]
-  end
-
-  defp size_class("medium", circle) do
-    [
-      is_nil(circle) && "py-2 px-4",
-      "text-[14px] [&>.indicator]:size-2",
-      !is_nil(circle) && "size-8"
-    ]
-  end
-
-  defp size_class("large", circle) do
-    [
-      is_nil(circle) && "py-2.5 px-5",
-      "text-[15px] [&>.indicator]:size-2.5",
-      !is_nil(circle) && "size-9"
-    ]
-  end
-
-  defp size_class("extra_large", circle) do
-    [
-      is_nil(circle) && "py-3 px-5",
-      "text-[16px] [&>.indicator]:size-3",
-      !is_nil(circle) && "size-10"
-    ]
-  end
-
-  defp size_class(params, _circle) when is_binary(params), do: [params]
-
-  defp icon_position(nil, _), do: false
-  defp icon_position(_icon, %{left_icon: true}), do: "left"
-  defp icon_position(_icon, %{right_icon: true}), do: "right"
-  defp icon_position(_icon, _), do: "left"
-
-  defp variation("horizontal") do
-    "flex-row [&>*:not(:last-child)]:border-r"
-  end
-
-  defp variation("vertical") do
-    "flex-col [&>*:not(:last-child)]:border-b"
-  end
-
-  defp indicator_size("extra_small"), do: "!size-2"
-  defp indicator_size("small"), do: "!size-2.5"
-  defp indicator_size("medium"), do: "!size-3"
-  defp indicator_size("large"), do: "!size-3.5"
-  defp indicator_size("extra_large"), do: "!size-4"
-  defp indicator_size(params) when is_binary(params), do: params
-
-  defp content_position("start") do
-    "justify-start"
-  end
-
-  defp content_position("end") do
-    "justify-end"
-  end
-
-  defp content_position("center") do
-    "justify-center"
-  end
-
-  defp content_position("between") do
-    "justify-between"
-  end
-
-  defp content_position("around") do
-    "justify-around"
-  end
-
-  defp content_position(params) when is_binary(params), do: params
-
-  defp default_classes(:grouped, _) do
-    [
-      "phx-submit-loading:opacity-75 overflow-hidden flex w-fit rounded-lg border",
-      "[&>*]:rounded-none [&>*]:border-0"
-    ]
-  end
-
-  defp default_classes(pinging, indicator) do
-    [
-      "phx-submit-loading:opacity-75 relative gap-2 items-center",
-      "transition-all ease-in-ou duration-100 group",
-      "disabled:cursor-not-allowed",
-      "focus:outline-none",
-      indicator &&
-        "[&>.indicator]:inline-block [&>.indicator]:shrink-0 [&>.indicator]:rounded-full",
-      !is_nil(pinging) && "[&>.indicator]:animate-ping"
-    ]
-  end
-
-  defp drop_rest(rest) do
-    all_rest =
-      (["pinging", "circle", "right_icon", "left_icon"] ++ @indicator_positions)
-      |> Enum.map(&if(is_binary(&1), do: String.to_atom(&1), else: &1))
-
-    Map.drop(rest, all_rest)
-  end
-
-  defp is_indicators?(rest) do
-    Enum.any?(@indicator_positions, &Map.get(rest, String.to_atom(&1)))
-  end
-end
diff --git a/lib/geo_web/components/card.ex b/lib/geo_web/components/card.ex
deleted file mode 100644
index 486537d..0000000
--- a/lib/geo_web/components/card.ex
+++ /dev/null
@@ -1,868 +0,0 @@
-defmodule GeoWeb.Components.Card do
-  @moduledoc """
-  Provides a set of card components for the `GeoWeb.Components.Card` project. These components
-  allow for flexible and customizable card layouts, including features such as card titles,
-  media, content sections, and footers.
-
-  ## Components
-
-    - `card/1`: Renders a basic card container with customizable size, color, border,
-    padding, and other styling options.
-    - `card_title/1`: Renders a title section for the card with support for icons and
-    custom positioning.
-    - `card_media/1`: Renders a media section within the card, such as an image or other media types.
-    - `card_content/1`: Renders a content section within the card to display various information.
-    - `card_footer/1`: Renders a footer section for the card, suitable for additional
-    information or actions.
-
-  ## Configuration Options
-
-  The module supports various attributes such as size, color, variant, and border
-  styles to match different design requirements. Components can be nested and
-  combined to create complex card layouts with ease.
-
-  This module offers a powerful and easy-to-use way to create cards with consistent
-  styling and behavior while providing the flexibility to adapt to various use cases.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @positions [
-    "start",
-    "center",
-    "end",
-    "between",
-    "around"
-  ]
-
-  @doc """
-  The `card` component is used to display content in a structured container with various customization options such as `variant`, `color`, and `padding`. It supports an inner block for rendering nested content like media, titles, and footers, allowing for flexible layout designs.
-
-  ## Examples
-
-  ```elixir
-  <.card>
-    <.card_title title="This is a title in inner content" icon="hero-home" size="extra_large" />
-    <.card_content>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta praesentium
-      quidem dicta sapiente accusamus nihil.
-    </.card_content>
-  </.card>
-
-  <.card>
-    <.card_media src="https://example.com/bg.png" alt="test"/>
-    <.card_content padding="large">
-      <p>
-        Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta praesentium
-        quidem dicta sapiente accusamus nihil.
-      </p>
-    </.card_content>
-    <.card_footer padding="large">
-      <.button size="full">See more</.button>
-    </.card_footer>
-  </.card>
-
-  <.card padding="small">
-    <.card_title class="flex items-center gap-2 justify-between">
-      <div>Title</div>
-      <div>Link</div>
-    </.card_title>
-    <.hr />
-    <.card_content space="large">
-      <.card_media rounded="large" src="https://example.com/bg.png" alt="test"/>
-      <p>
-        Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta
-        praesentium quidem dicta sapiente accusamus nihil.
-      </p>
-    </.card_content>
-    <.hr />
-    <.card_footer class="flex items-center gap-2">
-      <.card_media src="https://example.com/bg.png" alt="test"/>
-      <.card_media src="https://example.com/bg.png" alt="test"/>
-      <.card_media src="https://example.com/bg.png" alt="test"/>
-    </.card_footer>
-  </.card>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def card(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role={@rest[:role] || "region"}
-      class={[
-        "overflow-hidden [&:has(.overlay)]:relative",
-        space_class(@space),
-        border_class(@border, @variant),
-        color_variant(@variant, @color),
-        rounded_size(@rounded),
-        wrapper_padding(@padding),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `card_title` component is used to display the title section of a card with customizable
-  attributes such as `position`, `size`, and `padding`.
-
-  It supports adding an optional icon alongside the title and includes an inner block for additional content.
-
-  ## Examples
-
-  ```elixir
-  <.card_title class="border-b" padding="small" position="between">
-    <div>Title</div>
-    <div><.icon name="hero-ellipsis-horizontal" /></div>
-  </.card_title>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-
-  attr :position, :string,
-    values: @positions,
-    default: "start",
-    doc: "Determines the element position"
-
-  attr :font_weight, :string,
-    default: "font-semibold",
-    doc: "Determines custom class for the font weight"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def card_title(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "card-section flex items-center gap-2",
-        padding_size(@padding),
-        content_position(@position),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :if={@title || @icon}
-        class="flex gap-2 items-center"
-        aria-labelledby={if @title && @id, do: "#{@id}-title"}
-      >
-        <.icon :if={@icon} name={@icon} class="card-title-icon" />
-        <h3 :if={@title}>{@title}</h3>
-      </div>
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `card_media` component is used to display media elements, such as images, within a card.
-
-  It supports customizable attributes like `rounded` and `class` for styling and can include an inner
-  block for additional content.
-
-  ## Examples
-
-  ```elixir
-  <.card_media src="https://example.com/bg.png" alt="test"/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :alt, :string, default: nil, doc: "Media link description"
-  attr :src, :string, required: true, doc: "Media link"
-  attr :width, :string, default: "w-full", doc: "Media width"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def card_media(assigns) do
-    ~H"""
-    <div id={@id} class={["card-media overflow-hidden", rounded_size(@rounded), @width, @class]}>
-      <img
-        src={@src}
-        alt={@alt}
-        role={if !is_nil(@alt) && @alt == "", do: "presentation"}
-        class={[
-          "max-w-full"
-        ]}
-      />
-    </div>
-    """
-  end
-
-  @doc """
-  The `card_content` component is used to display the main content of a card with customizable attributes
-  such as `padding` and `space` between items.
-
-  It supports an inner block for rendering additional content, allowing for flexible layout and styling.
-
-  ## Examples
-
-  ```elixir
-  <.card_content padding="large">
-    <p>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta praesentium
-      quidem dicta sapiente accusamus nihil.
-    </p>
-  </.card_content>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def card_content(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "card-section",
-        space_class(@space),
-        padding_size(@padding),
-        @class
-      ]}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `card_footer` component is used to display the footer section of a card, allowing for
-  additional actions or information at the bottom of the card.
-
-  It supports customizable attributes such as `padding` and `class` for styling and includes an
-  inner block for rendering content.
-
-  ## Examples
-
-  ```elixir
-  <.card_footer padding="large">
-    <.button size="full">See more</.button>
-  </.card_footer>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def card_footer(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "card-section",
-        padding_size(@padding),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs [&_.card-title-icon]:size-3"
-
-  defp size_class("small"), do: "text-sm [&_.card-title-icon]:size-3.5"
-
-  defp size_class("medium"), do: "text-base [&_.card-title-icon]:size-4"
-
-  defp size_class("large"), do: "text-lg [&_.card-title-icon]:size-5"
-
-  defp size_class("extra_large"), do: "text-xl [&_.card-title-icon]:size-6"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp content_position("start") do
-    "justify-start"
-  end
-
-  defp content_position("end") do
-    "justify-end"
-  end
-
-  defp content_position("center") do
-    "justify-center"
-  end
-
-  defp content_position("between") do
-    "justify-between"
-  end
-
-  defp content_position("around") do
-    "justify-around"
-  end
-
-  defp content_position(params) when is_binary(params), do: params
-
-  defp wrapper_padding("extra_small"),
-    do: "[&:has(.card-section)>.card-section]:p-1 [&:not(:has(.card-section))]:p-1"
-
-  defp wrapper_padding("small"),
-    do: "[&:has(.card-section)>.card-section]:p-2 [&:not(:has(.card-section))]:p-2"
-
-  defp wrapper_padding("medium"),
-    do: "[&:has(.card-section)>.card-section]:p-3 [&:not(:has(.card-section))]:p-3"
-
-  defp wrapper_padding("large"),
-    do: "[&:has(.card-section)>.card-section]:p-4 [&:not(:has(.card-section))]:p-4"
-
-  defp wrapper_padding("extra_large"),
-    do: "[&:has(.card-section)>.card-section]:p-5 [&:not(:has(.card-section))]:p-5"
-
-  defp wrapper_padding(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "[&:not(:has(.overlay))]:bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:[&:not(:has(.overlay))]:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&:not(:has(.overlay))]:bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#4B4B4B] text-white dark:[&:not(:has(.overlay))]:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#007F8C] text-white dark:[&:not(:has(.overlay))]:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#266EF1] text-white dark:[&:not(:has(.overlay))]:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#0E8345] text-white dark:[&:not(:has(.overlay))]:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#CA8D01] text-white dark:[&:not(:has(.overlay))]:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#DE1135] text-white dark:[&:not(:has(.overlay))]:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#0B84BA] text-white dark:[&:not(:has(.overlay))]:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#8750C5] text-white dark:[&:not(:has(.overlay))]:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#A86438] text-white dark:[&:not(:has(.overlay))]:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#868686] text-white dark:[&:not(:has(.overlay))]:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#4B4B4B] text-white dark:[&:not(:has(.overlay))]:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#007F8C] text-white dark:[&:not(:has(.overlay))]:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#266EF1] text-white dark:[&:not(:has(.overlay))]:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#0E8345] text-white hover:[&:not(:has(.overlay))]:bg-[#166C3B] dark:[&:not(:has(.overlay))]:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#CA8D01] text-white dark:[&:not(:has(.overlay))]:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#DE1135] text-white dark:[&:not(:has(.overlay))]:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#0B84BA] text-white dark:[&:not(:has(.overlay))]:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#8750C5] text-white dark:[&:not(:has(.overlay))]:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#A86438] text-white dark:[&:not(:has(.overlay))]:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#868686] text-white dark:[&:not(:has(.overlay))]:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "[&:not(:has(.overlay))]:bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "[&:not(:has(.overlay))]:bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] [&:not(:has(.overlay))]:bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:[&:not(:has(.overlay))]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] [&:not(:has(.overlay))]:bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:[&:not(:has(.overlay))]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] [&:not(:has(.overlay))]:bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:[&:not(:has(.overlay))]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] [&:not(:has(.overlay))]:bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:[&:not(:has(.overlay))]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] [&:not(:has(.overlay))]:bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:[&:not(:has(.overlay))]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] [&:not(:has(.overlay))]:bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:[&:not(:has(.overlay))]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] [&:not(:has(.overlay))]:bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:[&:not(:has(.overlay))]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] [&:not(:has(.overlay))]:bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:[&:not(:has(.overlay))]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] [&:not(:has(.overlay))]:bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:[&:not(:has(.overlay))]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] [&:not(:has(.overlay))]:bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:[&:not(:has(.overlay))]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&:not(:has(.overlay))]:bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/carousel.ex b/lib/geo_web/components/carousel.ex
deleted file mode 100644
index c41889a..0000000
--- a/lib/geo_web/components/carousel.ex
+++ /dev/null
@@ -1,475 +0,0 @@
-defmodule GeoWeb.Components.Carousel do
-  @moduledoc """
-  Provides a versatile and customizable carousel component for the `GeoWeb.Components.Carousel`
-  project.
-
-  This component enables the creation of image carousels with various features such as
-  slide indicators, navigation controls, and dynamic slide content.
-
-  ## Features
-
-  - **Slides**: Define multiple slides, each with custom images, titles, descriptions, and links.
-  - **Navigation Controls**: Include previous and next buttons to manually navigate through the slides.
-  - **Indicators**: Optional indicators show the current slide and allow direct navigation to any slide.
-  - **Overlay Options**: Customize the appearance of the overlay for a more distinct visual style.
-  - **Responsive Design**: Supports various sizes and padding options to adapt to different screen sizes.
-  - **Image Loading**: Shows loading state while images are being loaded.
-
-  This module offers an easy-to-use interface for building carousels with consistent
-  styling and behavior across your application, while providing the flexibility to
-  meet various design requirements.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Image, only: [image: 1]
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  The `carousel` component is used to create interactive image carousels with customizable attributes
-  such as `size`, `padding`, and `overlay`. It supports adding multiple slides with different content,
-  and includes options for navigation controls and indicators.
-
-  ## Examples
-
-  ```elixir
-  <.carousel id="carousel-test-one" indicator={true}>
-    <:slide
-      content_position="end"
-      title="This is a dummy title 1"
-      description="This is a description for our carousel and this is a dummy text"
-      image="https://example.com/slides/1.webp"
-      navigate="/examples/navbar"
-    />
-    <:slide
-      content_position="center"
-      title="This is a dummy title 2"
-      image="https://example.com/slides/2.webp"
-    />
-    <:slide
-      content_position="start"
-      title="This is a dummy title 3"
-      image="https://example.com/slides/3.webp"
-    />
-  </.carousel>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string, doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :overlay, :string, default: "base", doc: "Determines an overlay"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :padding, :string, default: "medium", doc: "Determines padding for items"
-  attr :text_position, :string, default: "center", doc: "Determines the element' text position"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :indicator, :boolean, default: false, doc: "Specifies whether to show element indicators"
-  attr :control, :boolean, default: true, doc: "Determines whether to show navigation controls"
-  attr :active_index, :integer, default: 0, doc: "Index of the active slide (starts at 0)"
-  attr :autoplay, :boolean, default: false, doc: "Enable or disable autoplay functionality"
-
-  attr :autoplay_interval, :integer,
-    default: 5000,
-    doc: "Time between slides in ms (if autoplay is enabled)"
-
-  attr :active_slide_class, :string,
-    default: "active-slide z-10",
-    doc: "CSS class for active slide"
-
-  attr :hidden_slide_class, :string,
-    default: "opacity-0",
-    doc: "CSS class for hidden (inactive) slides"
-
-  attr :active_indicator_class, :string,
-    default: "active-indicator",
-    doc: "CSS class for active indicator"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :slide, required: true do
-    attr :image, :string, doc: "Image displayed alongside of an item"
-    attr :image_class, :string, doc: "Determines custom class for the image"
-
-    attr :navigate, :string,
-      doc: "Defines the path for navigation within the application using a `navigate` attribute."
-
-    attr :patch, :string, doc: "Specifies the path for navigation using a LiveView patch."
-    attr :href, :string, doc: "Sets the URL for an external link."
-    attr :title, :string, doc: "Specifies the title of the element"
-    attr :description, :string, doc: "Determines a short description"
-    attr :title_class, :string, doc: "Determines custom class for the title"
-    attr :description_class, :string, doc: "Determines custom class for the description"
-    attr :wrapper_class, :string, doc: "Determines custom class for the wrapper"
-    attr :content_position, :string, doc: "Determines the alignment of the element's content"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :active, :boolean, doc: "Indicates whether the element is currently active and visible"
-  end
-
-  def carousel(assigns) do
-    assigns =
-      assigns
-      |> assign_new(:id, fn -> "carousel-#{random_id()}" end)
-      |> assign_new(:actived_carousel, fn ->
-        Enum.find_index(assigns.slide, &(Map.get(&1, :active) == true)) || 0
-      end)
-
-    ~H"""
-    <div
-      id={@id}
-      phx-hook="Carousel"
-      phx-update="ignore"
-      data-active-index={@active_index + 1}
-      data-autoplay={to_string(@autoplay)}
-      data-autoplay-interval={@autoplay_interval}
-      data-active-slide-class={@active_slide_class}
-      data-hidden-slide-class={@hidden_slide_class}
-      data-active-indicator-class={@active_indicator_class}
-      class={[
-        "relative w-full overflow-hidden",
-        "[&_.slide:not(.active-slide)]:absolute [&_.slide]:inset-0 [&_.slide]:opacity-0 [&_.slide.active-slide]:opacity-100 [&_.slide:not(.active-slide)]:pointer-events-none [&_.slide:not(.active-slide)]:z-0",
-        "[&_.slide.active-slide]:z-10",
-        "[&_.slide]:transition-opacity [&_.slide]:delay-[50ms] [&_.slide]:duration-[700ms] [&_.slide]:ease-in-out",
-        text_position(@text_position),
-        padding_size(@padding),
-        color_class(@overlay),
-        size_class(@size),
-        @class
-      ]}
-    >
-      <button
-        :if={@control}
-        id={"#{@id}-carousel-prev"}
-        class="absolute left-0 inset-y-0 z-20 p-4 bg-black/10 hover:bg-black/30 transition focus:outline-none"
-      >
-        <.icon name="hero-chevron-left" class="size-7 text-white" />
-      </button>
-
-      <button
-        :if={@control}
-        id={"#{@id}-carousel-next"}
-        class="absolute right-0 inset-y-0 z-20 p-4 bg-black/10 hover:bg-black/30 transition focus:outline-none"
-      >
-        <.icon name="hero-chevron-right" class="size-7 text-white" />
-      </button>
-
-      <div
-        :for={{slide, index} <- Enum.with_index(@slide, 1)}
-        id={"#{@id}-carousel-slide-#{index}"}
-        class={["slide h-full", slide[:class]]}
-        aria-hidden={@actived_carousel + 1 != index}
-      >
-        <div class="relative w-full h-full">
-          <.slide_image id={@id} index={index} {slide}>
-            <.slide_content id={@id} index={index} {slide} />
-          </.slide_image>
-        </div>
-      </div>
-
-      <.slide_indicators :if={@indicator} id={@id} count={length(@slide)} />
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :navigate, :string,
-    default: nil,
-    doc: "Defines the path for navigation within the application using a `navigate` attribute."
-
-  attr :patch, :string,
-    default: nil,
-    doc: "Specifies the path for navigation using a LiveView patch."
-
-  attr :href, :string, default: nil, doc: "Sets the URL for an external link."
-  attr :image, :string, required: true, doc: "Image displayed alongside of an item"
-  attr :image_class, :string, default: nil, doc: "Sets classes for images"
-  attr :index, :integer, required: true, doc: "Determines item index"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  defp slide_image(%{navigate: nav, patch: pat, href: hrf} = assigns)
-       when is_binary(nav) or is_binary(pat) or is_binary(hrf) do
-    ~H"""
-    <.link navigate={@navigate} patch={@patch} href={@href}>
-      <div class="relative">
-        <.image
-          class={["max-w-full", @image_class]}
-          src={@image}
-          id={"#{@id}-carousel-slide-image-#{@index}"}
-        />
-      </div>
-      {render_slot(@inner_block)}
-    </.link>
-    """
-  end
-
-  defp slide_image(assigns) do
-    ~H"""
-    <div class="relative">
-      <.image
-        class={["max-w-full", @image_class]}
-        src={@image}
-        id={"#{@id}-carousel-slide-image-#{@index}"}
-      />
-    </div>
-    {render_slot(@inner_block)}
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :title_class, :string, default: "text-white", doc: "Determines custom class for the title"
-
-  attr :description_class, :string,
-    default: nil,
-    doc: "Determines custom class for the description"
-
-  attr :wrapper_class, :string, default: nil, doc: "Determines custom class for the wrapper"
-
-  attr :content_position, :string,
-    default: "",
-    doc: "Determines the alignment of the element's content"
-
-  attr :index, :integer, required: true, doc: "Determines item index"
-
-  defp slide_content(assigns) do
-    ~H"""
-    <div
-      :if={!is_nil(@title) || !is_nil(@description)}
-      class="carousel-overlay absolute inset-0"
-      id={"#{@id}-carousel-slide-content-#{@index}"}
-    >
-      <div
-        class={[
-          "description-wrapper h-full mx-auto flex flex-col gap-5",
-          content_position(@content_position),
-          @wrapper_class
-        ]}
-        id={"#{@id}-carousel-slide-content-position-#{@index}"}
-      >
-        <div
-          :if={!is_nil(@title)}
-          id={"#{@id}-carousel-slide-content-title-#{@index}"}
-          class={["carousel-title", @title_class]}
-        >
-          {@title}
-        </div>
-        <p
-          :if={!is_nil(@description)}
-          id={"#{@id}-carousel-slide-content-description-#{@index}"}
-          class={["carousel-description", @description_class]}
-        >
-          {@description}
-        </p>
-      </div>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :count, :integer, required: true, doc: "Count of items"
-
-  defp slide_indicators(assigns) do
-    ~H"""
-    <div
-      id={"#{@id}-carousel-slide-indicator"}
-      class={[
-        "absolute inset-x-0 bottom-0 z-10 flex justify-center gap-3 py-2.5",
-        "[&>.carousel-indicator]:h-1 [&>.carousel-indicator]:w-6 [&>.carousel-indicator]:bg-white",
-        "[&>.carousel-indicator.active-indicator]:opacity-100",
-        "[&>.carousel-indicator]:opacity-40 [&>.carousel-indicator]:transition-all",
-        "[&>.carousel-indicator]:duration-500 [&>.carousel-indicator]:ease-in-out shadow"
-      ]}
-    >
-      <button
-        :for={indicator_item <- 1..@count}
-        id={"#{@id}-carousel-indicator-#{indicator_item}"}
-        data-indicator-index={"#{indicator_item}"}
-        class="carousel-indicator"
-        aria-label={gettext("Go to slide %{index}", index: indicator_item)}
-      />
-    </div>
-    """
-  end
-
-  defp size_class("extra_small") do
-    "text-xs [&_.description-wrapper]:max-w-80 [&_.carousel-title]:md:text-xl [&_.carousel-title]:md:text-3xl"
-  end
-
-  defp size_class("small") do
-    "text-sm [&_.description-wrapper]:max-w-96 [&_.carousel-title]:md:text-xl [&_.carousel-title]:md:text-4xl"
-  end
-
-  defp size_class("medium") do
-    "text-base [&_.description-wrapper]:max-w-xl [&_.carousel-title]:md:text-2xl [&_.carousel-title]:md:text-5xl"
-  end
-
-  defp size_class("large") do
-    "text-lg [&_.description-wrapper]:max-w-2xl [&_.carousel-title]:md:text-3xl [&_.carousel-title]:md:text-6xl"
-  end
-
-  defp size_class("extra_large") do
-    "text-xl [&_.description-wrapper]:max-w-3xl [&_.carousel-title]:md:text-3xl [&_.carousel-title]:md:text-7xl"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"),
-    do: "[&_.description-wrapper]:p-2.5 md:[&_.description-wrapper]:p-6"
-
-  defp padding_size("small"), do: "[&_.description-wrapper]:p-3 md:[&_.description-wrapper]:p-7"
-
-  defp padding_size("medium"),
-    do: "[&_.description-wrapper]:p-3.5 md:[&_.description-wrapper]:p-8"
-
-  defp padding_size("large"), do: "[&_.description-wrapper]:p-4 md:[&_.description-wrapper]:p-9"
-
-  defp padding_size("extra_large"),
-    do: "[&_.description-wrapper]:p-5 md:[&_.description-wrapper]:p-10"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp content_position("start") do
-    "justify-start"
-  end
-
-  defp content_position("end") do
-    "justify-end"
-  end
-
-  defp content_position("center") do
-    "justify-center"
-  end
-
-  defp content_position("between") do
-    "justify-between"
-  end
-
-  defp content_position("around") do
-    "justify-around"
-  end
-
-  defp content_position(params) when is_binary(params), do: params
-
-  defp text_position("start") do
-    "[&_.description-wrapper]:text-start"
-  end
-
-  defp text_position("end") do
-    "[&_.description-wrapper]:text-end"
-  end
-
-  defp text_position("center") do
-    "[&_.description-wrapper]:text-center"
-  end
-
-  defp text_position(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "[&_.carousel-overlay]:bg-white/30 text-[#09090b] hover:[&_.carousel-controls]:bg-[#e4e4e7]/5",
-      "dark:[&_.carousel-overlay]:bg-[#18181B]/30 dark:text-[#FAFAFA] dark:hover:[&_.carousel-controls]:bg-[#27272a]/5"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&_.carousel-overlay]:bg-[#4B4B4B]/30 text-white hover:[&_.carousel-controls]:bg-[#4B4B4B]/5",
-      "dark:[&_.carousel-overlay]:bg-[#DDDDDD]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#DDDDDD]/5"
-    ]
-  end
-
-  defp color_class("white") do
-    "[&_.carousel-overlay]:bg-white/30 text-[#3E3E3E] hover:[&_.carousel-controls]:bg-white/5"
-  end
-
-  defp color_class("primary") do
-    [
-      "[&_.carousel-overlay]:bg-[#007F8C]/30 text-white hover:[&_.carousel-controls]:bg-[#007F8C]/5",
-      "dark:[&_.carousel-overlay]:bg-[#01B8CA]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#01B8CA]/5"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&_.carousel-overlay]:bg-[#266EF1]/30 text-white hover:[&_.carousel-controls]:bg-[#266EF1]/5",
-      "dark:[&_.carousel-overlay]:bg-[#6DAAFB]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#6DAAFB]/5"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&_.carousel-overlay]:bg-[#0E8345]/30 text-white hover:[&_.carousel-controls]:bg-[#0E8345]/5",
-      "dark:[&_.carousel-overlay]:bg-[#06C167]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#06C167]/5"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&_.carousel-overlay]:bg-[#CA8D01]/30 text-white hover:[&_.carousel-controls]:bg-[#CA8D01]/5",
-      "dark:[&_.carousel-overlay]:bg-[#FDC034]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#FDC034]/5"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&_.carousel-overlay]:bg-[#DE1135]/30 text-white hover:[&_.carousel-controls]:bg-[#DE1135]/5",
-      "dark:[&_.carousel-overlay]:bg-[#FC7F79]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#FC7F79]/5"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&_.carousel-overlay]:bg-[#0B84BA]/30 text-white hover:[&_.carousel-controls]:bg-[#0B84BA]/5",
-      "dark:[&_.carousel-overlay]:bg-[#3EB7ED]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#3EB7ED]/5"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&_.carousel-overlay]:bg-[#8750C5]/30 text-white hover:[&_.carousel-controls]:bg-[#8750C5]/5",
-      "dark:[&_.carousel-overlay]:bg-[#BA83F9]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#BA83F9]/5"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&_.carousel-overlay]:bg-[#A86438]/30 text-white hover:[&_.carousel-controls]:bg-[#A86438]/5",
-      "dark:[&_.carousel-overlay]:bg-[#DB976B]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#DB976B]/5"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&_.carousel-overlay]:bg-[#868686]/30 text-white hover:[&_.carousel-controls]:bg-[#868686]/5",
-      "dark:[&_.carousel-overlay]:bg-[#A6A6A6]/30 text-black dark:hover:[&_.carousel-controls]:bg-[#A6A6A6]/5"
-    ]
-  end
-
-  defp color_class("dark") do
-    "[&_.carousel-overlay]:bg-[#282828]/30 text-white hover:[&_.carousel-controls]:bg-[#282828]/5"
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/chat.ex b/lib/geo_web/components/chat.ex
deleted file mode 100644
index f41e868..0000000
--- a/lib/geo_web/components/chat.ex
+++ /dev/null
@@ -1,777 +0,0 @@
-defmodule GeoWeb.Components.Chat do
-  @moduledoc """
-  `GeoWeb.Components.Chat` is a Phoenix LiveView component module for creating customizable chat interfaces.
-
-  This module provides components to display chat messages with various styles, colors,
-  sizes, and configurations. The main component, `chat/1`, acts as a container for chat
-  messages, and `chat_section/1` is used to render individual chat messages with optional
-  metadata and status information.
-  """
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  The `chat` component is used to create a chat message container with customizable attributes such
-  as `variant`, `color`, and `position`.
-
-  It supports different layouts for normal and flipped chat bubbles and allows for nested content
-  using an inner block for flexible message design.
-
-  ## Examples
-
-  ```elixir
-  <.chat>
-    <.avatar
-      src="example.com/images/1.jpg"
-      size="extra_large"
-      rounded="full"
-      border="small"
-    />
-
-    <.chat_section>
-      <div class="flex items-center space-x-2 rtl:space-x-reverse">
-        <div class="">Bonnie Green</div>
-      </div>
-      <p class="">
-        That's awesome. I think our users will really appreciate the improvements.
-      </p>
-      <:status time="22:10" deliver="Delivered" />
-      <:meta><div class="">Bonnie Green</div></:meta>
-    </.chat_section>
-    <div><.icon name="hero-ellipsis-vertical" class="size-4" /></div>
-  </.chat>
-
-  <.chat position="flipped">
-    <.avatar src="https://example.com/picture.jpg" size="extra_large" rounded="full" border="small"/>
-
-    <.chat_section>
-      <div class="flex items-center space-x-2 rtl:space-x-reverse">
-        <div class="">Bonnie Green</div>
-      </div>
-      <p class="">
-        That's awesome. I think our users will really appreciate the improvements.
-      </p>
-      <:status time="22:10" deliver="Delivered" />
-    </.chat_section>
-    <div><.icon name="hero-ellipsis-vertical" class="size-4" /></div>
-  </.chat>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "extra_large", doc: "Determines the border radius"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "extra_small", doc: "Space between items"
-
-  attr :position, :string,
-    values: ["normal", "flipped"],
-    default: "normal",
-    doc: "Determines the element position"
-
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def chat(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="log"
-      aria-live="polite"
-      aria-atomic="false"
-      class={[
-        "flex items-start gap-3",
-        position_class(@position),
-        rounded_size(@rounded, @position),
-        border_class(@border, @variant),
-        color_variant(@variant, @color),
-        space_class(@space),
-        padding_size(@padding),
-        size_class(@size),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `chat_section` component is used to display individual chat messages or sections with customizable
-  attributes such as `font_weight` and `class`.
-
-  It supports slots for adding status information and metadata, making it easy to create detailed
-  chat message layouts.
-
-  ## Examples
-
-  ```elixir
-  <.chat_section>
-    <div class="flex items-center space-x-2 rtl:space-x-reverse">
-      <div class="">Bonnie Green</div>
-    </div>
-    <p class="">
-      That's awesome. I think our users will really appreciate the improvements.
-    </p>
-    <:status time="22:10" deliver="Delivered" />
-    <:meta><div class="">Bonnie Green</div></:meta>
-  </.chat_section>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :status, required: false, doc: "Defines a slot for displaying status information" do
-    attr :time, :string, doc: "Displays the time"
-    attr :deliver, :string, doc: "Indicates the delivery status"
-    attr :time_class, :string, doc: "Custom classes for time"
-    attr :deliver_class, :string, doc: "Custom classes for delivery status"
-  end
-
-  slot :meta,
-    required: false,
-    doc: "Defines a slot for adding custom metadata or additional information"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def chat_section(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="group"
-      tabindex="0"
-      class={[
-        "chat-section-bubble leading-1.5 overflow-hidden",
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-      <div :for={status <- @status} class="flex items-center justify-between gap-2 text-xs">
-        <div :if={status[:time]} class={status[:time_class]}>
-          <span class="sr-only">{gettext("Time:")}</span>
-          {status[:time]}
-        </div>
-        <div :if={status[:deliver]} class={["font-semibold", status[:deliver_class]]}>
-          <span class="sr-only">{gettext("Status:")}</span>
-          {status[:deliver]}
-        </div>
-      </div>
-
-      <div :for={meta <- @meta} aria-hidden="true">{render_slot(meta)}</div>
-    </div>
-    """
-  end
-
-  defp position_class("normal"), do: "justify-start flex-row"
-  defp position_class("flipped"), do: "justify-start flex-row-reverse"
-  defp position_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small", "normal") do
-    [
-      "[&>.chat-section-bubble]:rounded-e-sm [&>.chat-section-bubble]:rounded-es-sm"
-    ]
-  end
-
-  defp rounded_size("small", "normal") do
-    [
-      "[&>.chat-section-bubble]:rounded-e [&>.chat-section-bubble]:rounded-es"
-    ]
-  end
-
-  defp rounded_size("medium", "normal") do
-    [
-      "[&>.chat-section-bubble]:rounded-e-md [&>.chat-section-bubble]:rounded-es-md"
-    ]
-  end
-
-  defp rounded_size("large", "normal") do
-    [
-      "[&>.chat-section-bubble]:rounded-e-lg [&>.chat-section-bubble]:rounded-es-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large", "normal") do
-    [
-      "[&>.chat-section-bubble]:rounded-e-xl [&>.chat-section-bubble]:rounded-es-xl"
-    ]
-  end
-
-  defp rounded_size("extra_small", "flipped") do
-    [
-      "[&>.chat-section-bubble]:rounded-s-sm [&>.chat-section-bubble]:rounded-ee-sm"
-    ]
-  end
-
-  defp rounded_size("small", "flipped") do
-    [
-      "[&>.chat-section-bubble]:rounded-s [&>.chat-section-bubble]:rounded-ee"
-    ]
-  end
-
-  defp rounded_size("medium", "flipped") do
-    [
-      "[&>.chat-section-bubble]:rounded-s-md [&>.chat-section-bubble]:rounded-ee-md"
-    ]
-  end
-
-  defp rounded_size("large", "flipped") do
-    [
-      "[&>.chat-section-bubble]:rounded-s-lg [&>.chat-section-bubble]:rounded-ee-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large", "flipped") do
-    [
-      "[&>.chat-section-bubble]:rounded-s-xl [&>.chat-section-bubble]:rounded-ee-xl"
-    ]
-  end
-
-  defp rounded_size("none", _), do: nil
-
-  defp rounded_size(params, _) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "[&>.chat-section-bubble]:space-y-2"
-
-  defp space_class("small"), do: "[&>.chat-section-bubble]:space-y-3"
-
-  defp space_class("medium"), do: "[&>.chat-section-bubble]:space-y-4"
-
-  defp space_class("large"), do: "[&>.chat-section-bubble]:space-y-5"
-
-  defp space_class("extra_large"), do: "[&>.chat-section-bubble]:space-y-6"
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "[&>.chat-section-bubble]:p-1"
-
-  defp padding_size("small"), do: "[&>.chat-section-bubble]:p-2"
-
-  defp padding_size("medium"), do: "[&>.chat-section-bubble]:p-3"
-
-  defp padding_size("large"), do: "[&>.chat-section-bubble]:p-4"
-
-  defp padding_size("extra_large"), do: "[&>.chat-section-bubble]:p-5"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("extra_small", _), do: "[&>.chat-section-bubble]:border"
-  defp border_class("small", _), do: "[&>.chat-section-bubble]:border-2"
-  defp border_class("medium", _), do: "[&>.chat-section-bubble]:border-[3px]"
-  defp border_class("large", _), do: "[&>.chat-section-bubble]:border-4"
-  defp border_class("extra_large", _), do: "[&>.chat-section-bubble]:border-[5px]"
-  defp border_class("none", _), do: "[&>.chat-section-bubble]:border-0"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs [&>.chat-section-bubble]:max-w-[12rem]"
-
-  defp size_class("small"), do: "text-sm [&>.chat-section-bubble]:max-w-[14rem]"
-
-  defp size_class("medium"), do: "text-base [&>.chat-section-bubble]:max-w-[16rem]"
-
-  defp size_class("large"), do: "text-lg [&>.chat-section-bubble]:max-w-[18rem]"
-
-  defp size_class("extra_large"), do: "text-xl [&>.chat-section-bubble]:max-w-[20rem]"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "[&>.chat-section-bubble]:bg-white [&>.chat-section-bubble]:text-[#09090b]",
-      "[&>.chat-section-bubble]:border-[#e4e4e7] [&>.chat-section-bubble]:shadow-sm",
-      "dark:[&>.chat-section-bubble]:bg-[#18181B] dark:[&>.chat-section-bubble]:text-[#FAFAFA]",
-      "dark:[&>.chat-section-bubble]:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&>.chat-section-bubble]:bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&>.chat-section-bubble]:bg-[#282828] [&>.chat-section-bubble]:text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&>.chat-section-bubble]:bg-[#4B4B4B] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#DDDDDD] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&>.chat-section-bubble]:bg-[#007F8C] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#01B8CA] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&>.chat-section-bubble]:bg-[#266EF1] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#6DAAFB] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&>.chat-section-bubble]:bg-[#0E8345] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#06C167] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&>.chat-section-bubble]:bg-[#CA8D01] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#FDC034] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&>.chat-section-bubble]:bg-[#DE1135] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#FC7F79] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&>.chat-section-bubble]:bg-[#0B84BA] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#3EB7ED] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&>.chat-section-bubble]:bg-[#8750C5] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#BA83F9] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&>.chat-section-bubble]:bg-[#A86438] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#DB976B] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&>.chat-section-bubble]:bg-[#868686] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#A6A6A6] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "[&>.chat-section-bubble]:text-[#4B4B4B] [&>.chat-section-bubble]:border-[#4B4B4B]",
-      "dark:[&>.chat-section-bubble]:text-[#DDDDDD] dark:[&>.chat-section-bubble]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "[&>.chat-section-bubble]:text-[#007F8C] [&>.chat-section-bubble]:border-[#007F8C] ",
-      "dark:[&>.chat-section-bubble]:text-[#01B8CA] dark:[&>.chat-section-bubble]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "[&>.chat-section-bubble]:text-[#266EF1] [&>.chat-section-bubble]:border-[#266EF1]",
-      "dark:[&>.chat-section-bubble]:text-[#6DAAFB] dark:[&>.chat-section-bubble]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "[&>.chat-section-bubble]:text-[#0E8345] [&>.chat-section-bubble]:border-[#0E8345]",
-      "dark:[&>.chat-section-bubble]:text-[#06C167] dark:[&>.chat-section-bubble]:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "[&>.chat-section-bubble]:text-[#CA8D01] [&>.chat-section-bubble]:border-[#CA8D01]",
-      "dark:[&>.chat-section-bubble]:text-[#FDC034] dark:[&>.chat-section-bubble]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "[&>.chat-section-bubble]:text-[#DE1135] [&>.chat-section-bubble]:border-[#DE1135]",
-      "dark:[&>.chat-section-bubble]:text-[#FC7F79] dark:[&>.chat-section-bubble]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "[&>.chat-section-bubble]:text-[#0B84BA] [&>.chat-section-bubble]:border-[#0B84BA]",
-      "dark:[&>.chat-section-bubble]:text-[#3EB7ED] dark:[&>.chat-section-bubble]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "[&>.chat-section-bubble]:text-[#8750C5] [&>.chat-section-bubble]:border-[#8750C5]",
-      "dark:[&>.chat-section-bubble]:text-[#BA83F9] dark:[&>.chat-section-bubble]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "[&>.chat-section-bubble]:text-[#A86438] [&>.chat-section-bubble]:border-[#A86438]",
-      "dark:[&>.chat-section-bubble]:text-[#DB976B] dark:[&>.chat-section-bubble]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "[&>.chat-section-bubble]:text-[#868686] [&>.chat-section-bubble]:border-[#868686]",
-      "dark:[&>.chat-section-bubble]:text-[#A6A6A6] dark:[&>.chat-section-bubble]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&>.chat-section-bubble]:bg-[#4B4B4B] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#DDDDDD] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&>.chat-section-bubble]:bg-[#007F8C] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#01B8CA] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&>.chat-section-bubble]:bg-[#266EF1] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#6DAAFB] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&>.chat-section-bubble]:bg-[#0E8345] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#06C167] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&>.chat-section-bubble]:bg-[#CA8D01] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#FDC034] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&>.chat-section-bubble]:bg-[#DE1135] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#FC7F79] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&>.chat-section-bubble]:bg-[#0B84BA] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#3EB7ED] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&>.chat-section-bubble]:bg-[#8750C5] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#BA83F9] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&>.chat-section-bubble]:bg-[#A86438] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#DB976B] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&>.chat-section-bubble]:bg-[#868686] [&>.chat-section-bubble]:text-white",
-      "dark:[&>.chat-section-bubble]:bg-[#A6A6A6] dark:[&>.chat-section-bubble]:text-black",
-      "[&>.chat-section-bubble]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)]",
-      "[&>.chat-section-bubble]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] [&>.chat-section-bubble]:dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "[&>.chat-section-bubble]:bg-white [&>.chat-section-bubble]:text-black [&>.chat-section-bubble]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "[&>.chat-section-bubble]:bg-[#282828] [&>.chat-section-bubble]:text-white [&>.chat-section-bubble]:border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "[&>.chat-section-bubble]:text-[#282828] [&>.chat-section-bubble]:border-[#282828] [&>.chat-section-bubble]:bg-[#F3F3F3]",
-      "dark:[&>.chat-section-bubble]:text-[#E8E8E8] dark:[&>.chat-section-bubble]:border-[#E8E8E8] dark:[&>.chat-section-bubble]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "[&>.chat-section-bubble]:text-[#016974] [&>.chat-section-bubble]:border-[#016974] [&>.chat-section-bubble]:bg-[#E2F8FB]",
-      "dark:[&>.chat-section-bubble]:text-[#77D5E3] dark:[&>.chat-section-bubble]:border-[#77D5E3] dark:[&>.chat-section-bubble]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "[&>.chat-section-bubble]:text-[#175BCC] [&>.chat-section-bubble]:border-[#175BCC] [&>.chat-section-bubble]:bg-[#EFF4FE]",
-      "dark:[&>.chat-section-bubble]:text-[#A9C9FF] dark:[&>.chat-section-bubble]:border-[#A9C9FF] dark:[&>.chat-section-bubble]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "[&>.chat-section-bubble]:text-[#166C3B] [&>.chat-section-bubble]:border-[#166C3B] [&>.chat-section-bubble]:bg-[#EAF6ED]",
-      "dark:[&>.chat-section-bubble]:text-[#7FD99A] dark:[&>.chat-section-bubble]:border-[#7FD99A] dark:[&>.chat-section-bubble]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "[&>.chat-section-bubble]:text-[#976A01] [&>.chat-section-bubble]:border-[#976A01] [&>.chat-section-bubble]:bg-[#FFF7E6]",
-      "dark:[&>.chat-section-bubble]:text-[#FDD067] dark:[&>.chat-section-bubble]:border-[#FDD067] dark:[&>.chat-section-bubble]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "[&>.chat-section-bubble]:text-[#BB032A] [&>.chat-section-bubble]:border-[#BB032A] [&>.chat-section-bubble]:bg-[#FFF0EE]",
-      "dark:[&>.chat-section-bubble]:text-[#FFB2AB] dark:[&>.chat-section-bubble]:border-[#FFB2AB] dark:[&>.chat-section-bubble]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "[&>.chat-section-bubble]:text-[#0B84BA] [&>.chat-section-bubble]:border-[#0B84BA] [&>.chat-section-bubble]:bg-[#E7F6FD]",
-      "dark:[&>.chat-section-bubble]:text-[#6EC9F2] dark:[&>.chat-section-bubble]:border-[#6EC9F2] dark:[&>.chat-section-bubble]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "[&>.chat-section-bubble]:text-[#653C94] [&>.chat-section-bubble]:border-[#653C94] [&>.chat-section-bubble]:bg-[#F6F0FE]",
-      "dark:[&>.chat-section-bubble]:text-[#CBA2FA] dark:[&>.chat-section-bubble]:border-[#CBA2FA] dark:[&>.chat-section-bubble]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "[&>.chat-section-bubble]:text-[#7E4B2A] [&>.chat-section-bubble]:border-[#7E4B2A] [&>.chat-section-bubble]:bg-[#FBF2ED]",
-      "dark:[&>.chat-section-bubble]:text-[#E4B190] dark:[&>.chat-section-bubble]:border-[#E4B190] dark:[&>.chat-section-bubble]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "[&>.chat-section-bubble]:text-[#727272] [&>.chat-section-bubble]:border-[#727272] [&>.chat-section-bubble]:bg-[#F3F3F3]",
-      "dark:[&>.chat-section-bubble]:text-[#BBBBBB] dark:[&>.chat-section-bubble]:border-[#BBBBBB] dark:[&>.chat-section-bubble]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "[&>.chat-section-bubble]:text-[#4B4B4B] dark:[&>.chat-section-bubble]:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "[&>.chat-section-bubble]:text-[#007F8C] dark:[&>.chat-section-bubble]:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "[&>.chat-section-bubble]:text-[#266EF1] dark:[&>.chat-section-bubble]:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "[&>.chat-section-bubble]:text-[#0E8345] dark:[&>.chat-section-bubble]:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "[&>.chat-section-bubble]:text-[#CA8D01] dark:[&>.chat-section-bubble]:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "[&>.chat-section-bubble]:text-[#DE1135] dark:[&>.chat-section-bubble]:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "[&>.chat-section-bubble]:text-[#0B84BA] dark:[&>.chat-section-bubble]:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "[&>.chat-section-bubble]:text-[#8750C5] dark:[&>.chat-section-bubble]:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "[&>.chat-section-bubble]:text-[#A86438] dark:[&>.chat-section-bubble]:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "[&>.chat-section-bubble]:text-[#868686] dark:[&>.chat-section-bubble]:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#282828] to-[#727272] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#016974] to-[#01B8CA] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#166C3B] to-[#06C167] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#976A01] to-[#FDC034] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#BB032A] to-[#FC7F79] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#08638C] to-[#3EB7ED] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#653C94] to-[#BA83F9] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&>.chat-section-bubble]:bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] [&>.chat-section-bubble]:text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:[&>.chat-section-bubble]:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/checkbox_card.ex b/lib/geo_web/components/checkbox_card.ex
deleted file mode 100644
index 243df2b..0000000
--- a/lib/geo_web/components/checkbox_card.ex
+++ /dev/null
@@ -1,886 +0,0 @@
-defmodule GeoWeb.Components.CheckboxCard do
-  @moduledoc """
-  The `GeoWeb.Components.CheckboxCard` module provides a customizable checkbox card component for Phoenix LiveView
-  applications. This component extends beyond basic checkbox buttons by offering a card-based interface
-  with rich styling options.
-
-  ## Key Features
-  - Multiple visual variants: base, default, outline, shadow, and bordered
-  - Comprehensive color themes including natural, primary, secondary, etc.
-  - Customizable borders, padding, and spacing
-  - Support for icons and descriptions within cards
-  - Grid layout options for organizing multiple cards
-  - Built-in dark mode support
-  - Accessible form integration
-
-  ## Example Usage
-  ```heex
-  <.checkbox_card name="plan" class="w-full" icon="hero-home">
-    <:checkbox value="basic" title="Basic Plan" description="For small teams">
-    </:checkbox>
-    <:checkbox value="pro" title="Pro Plan" description="For growing businesses">
-    </:checkbox>
-    <:checkbox value="pro">
-      <p>$25/month</p>
-    </:checkbox>
-  </.checkbox_card>
-  ```
-
-  The component handles form integration automatically when used with Phoenix.HTML.Form fields
-  and includes built-in error handling and validation display.
-  """
-  use Phoenix.Component
-  alias Phoenix.HTML.Form
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines variant theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "medium", doc: "Radius size"
-  attr :padding, :string, default: "small", doc: "Padding size"
-  attr :space, :string, default: "small", doc: "Determines space between elements"
-  attr :cols, :string, default: "one", doc: "Determines cols of elements"
-  attr :cols_gap, :string, default: "small", doc: "Determines gap between elements"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :show_checkbox, :boolean, default: false, doc: "Boolean to show and hide checkbox"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :error_icon_class, :string, default: nil, doc: "Custom classes for error Icon"
-  attr :content_wrapper_class, :string, default: nil, doc: "Custom classes for content wrapper"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :description_class, :string, default: nil, doc: "Custom classes for description"
-
-  attr :checkbox_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for checkbox main wrapper"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :rest, :global,
-    include:
-      ~w(autocomplete disabled form indeterminate multiple readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  slot :checkbox, required: true do
-    attr :value, :string, required: true
-    attr :checked, :boolean, required: false
-    attr :icon, :string, doc: "Icon displayed alongside of a checkbox"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :content_class, :string, doc: "Determines custom class for the content"
-    attr :description_class, :string, doc: "Determines custom class for the description"
-    attr :title_class, :string, doc: "Determines custom class for the title"
-    attr :card_content_class, :string, doc: "Determines custom class for the card content"
-    attr :title, :string, required: false
-    attr :description, :string, required: false
-  end
-
-  slot :inner_block
-
-  @spec checkbox_card(map()) :: Phoenix.LiveView.Rendered.t()
-  def checkbox_card(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil)
-    |> assign(id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name <> "[]" end)
-    |> assign_new(:value, fn -> field.value end)
-    |> assign(:multiple, true)
-    |> checkbox_card()
-  end
-
-  def checkbox_card(assigns) do
-    ~H"""
-    <div class={["leading-5", space_class(@space)]}>
-      <input type="hidden" name={@name} value="" disabled={@rest[:disabled]} />
-
-      <div
-        :if={@label || @description}
-        class={["checkbox-card-label-wrapper", @description_wrapper_class]}
-      >
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={["text-[12px]", @description_class]}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={["grid", grid_cols(@cols), grid_gap(@cols_gap), @class]}>
-        <label
-          :for={{checkbox, index} <- Enum.with_index(@checkbox, 1)}
-          for={"#{@id}-#{index}"}
-          aria-checked={(checkbox[:checked] && "true") || "false"}
-          aria-labelledby={"#{@id}-#{index}-label"}
-          class={[
-            "checkbox-card-wrapper flex items-start cursor-pointer",
-            "has-[:disabled]:pointer-events-none has-[:disabled]:opacity-50",
-            "has-[:focus-visible]:outline has-[:focus-visible]:outline-2 has-[:focus-visible]:outline-blue-400",
-            "has-[:focus-visible]:outline-offset-[-2px] transition-all",
-            @reverse && "flex-row-reverse",
-            border_class(@border, @variant),
-            color_variant(@variant, @color),
-            rounded_size(@rounded),
-            padding_size(@padding),
-            size_class(@size),
-            @checkbox_wrapper_class
-          ]}
-          {@rest}
-        >
-          <input
-            type="checkbox"
-            name={@name}
-            id={"#{@id}-#{index}"}
-            value={checkbox[:value]}
-            checked={checkbox[:checked]}
-            aria-describedby={"#{@id}-#{index}-description"}
-            class={[
-              "checkbox-card-input shrink-0 focus:ring-0 focus:ring-offset-0 appearance-none rounded-sm",
-              "cursor-pointer disabled:opacity-50",
-              !@show_checkbox && "opacity-0 absolute"
-            ]}
-          />
-          <div
-            data-part="label"
-            class={["checkbox-card-content-wrapper flex-1", @content_wrapper_class]}
-          >
-            <div
-              :if={!is_nil(checkbox[:icon]) || checkbox[:title] || checkbox[:description]}
-              class={["checkbox-slot-content flex flex-col", checkbox[:content_class]]}
-            >
-              <.icon
-                :if={!is_nil(checkbox[:icon])}
-                name={checkbox[:icon]}
-                class={["block mx-auto", checkbox[:icon_class]]}
-              />
-              <div
-                :if={checkbox[:title]}
-                class={[
-                  "block checkbox-card-title leading-[16px] font-semibold",
-                  checkbox[:title_class]
-                ]}
-              >
-                {checkbox[:title]}
-              </div>
-
-              <p
-                :if={checkbox[:description]}
-                class={["checkbox-card-description", checkbox[:description_class]]}
-              >
-                {checkbox[:description]}
-              </p>
-            </div>
-            <div class={["checkbox-card-content leading-[17px]", checkbox[:card_content_class]]}>
-              {render_slot(checkbox)}
-            </div>
-          </div>
-        </label>
-      </div>
-    </div>
-
-    <.error :for={msg <- @errors} icon={@error_icon} icon_class={@error_icon_class}>{msg}</.error>
-    """
-  end
-
-  def checkbox_card_check(:list, {field, value}, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      new_value = if is_atom(value), do: Atom.to_string(value), else: value
-      new_value in params[Atom.to_string(field)]
-    else
-      Map.get(data, field) == value
-    end
-  end
-
-  def checkbox_card_check(:boolean, field, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      Form.normalize_value("checkbox", params[Atom.to_string(field)])
-    else
-      Map.get(data, field, false)
-    end
-  end
-
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-4 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc type: :component
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Custom classes for error Icon"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-[14px] text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class={["shrink-0", @error_icon_class]} /> {render_slot(
-        @inner_block
-      )}
-    </p>
-    """
-  end
-
-  defp border_class(_, variant) when variant in ["default", "shadow"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "py-1 px-2"
-
-  defp padding_size("small"), do: "py-2 px-3"
-
-  defp padding_size("medium"), do: "py-3 px-4"
-
-  defp padding_size("large"), do: "py-4 px-5"
-
-  defp padding_size("extra_large"), do: "py-5 px-6"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp grid_cols("one"), do: "grid-cols-1"
-  defp grid_cols("two"), do: "grid-cols-2"
-  defp grid_cols("three"), do: "grid-cols-2 md:grid-cols-3"
-  defp grid_cols("four"), do: "grid-cols-2 md:grid-cols-4"
-  defp grid_cols("five"), do: "grid-cols-2 md:grid-cols-5"
-  defp grid_cols("six"), do: "grid-cols-2 md:grid-cols-6"
-  defp grid_cols("seven"), do: "grid-cols-2 md:grid-cols-7"
-  defp grid_cols("eight"), do: "grid-cols-2 md:grid-cols-8"
-  defp grid_cols("nine"), do: "grid-cols-2 md:grid-cols-9"
-  defp grid_cols("ten"), do: "grid-cols-2 md:grid-cols-10"
-  defp grid_cols("eleven"), do: "grid-cols-2 md:grid-cols-11"
-  defp grid_cols("twelve"), do: "grid-cols-2 md:grid-cols-12"
-  defp grid_cols(params) when is_binary(params), do: params
-
-  defp grid_gap("extra_small"), do: "gap-1"
-  defp grid_gap("small"), do: "gap-2"
-  defp grid_gap("medium"), do: "gap-3"
-  defp grid_gap("large"), do: "gap-4"
-  defp grid_gap("extra_large"), do: "gap-5"
-  defp grid_gap(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "text-[13px]",
-      "[&_.checkbox-card-icon]:size-5",
-      "[&_.checkbox-card-description]:text-[11px]"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "text-[14px]",
-      "[&_.checkbox-card-icon]:size-6",
-      "[&_.checkbox-card-description]:text-[12px]"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "text-[15px]",
-      "[&_.checkbox-card-icon]:size-7",
-      "[&_.checkbox-card-description]:text-[13px]"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "text-[16px]",
-      "[&_.checkbox-card-icon]:size-8",
-      "[&_.checkbox-card-description]:text-[14px]"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "text-[17px]",
-      "[&_.checkbox-card-icon]:size-9",
-      "[&_.checkbox-card-description]:text-[15px]"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small") do
-    [
-      "[&_.checkbox-card-label-wrapper]:space-y-1",
-      "[&_.checkbox-card-label-wrapper]:mb-1",
-      "[&_.checkbox-card-wrapper]:gap-1 [&_.checkbox-slot-content]:gap-1"
-    ]
-  end
-
-  defp space_class("small") do
-    [
-      "[&_.checkbox-card-label-wrapper]:space-y-1.5",
-      "[&_.checkbox-card-label-wrapper]:mb-2",
-      "[&_.checkbox-card-wrapper]:gap-2 [&_.checkbox-slot-content]:gap-2"
-    ]
-  end
-
-  defp space_class("medium") do
-    [
-      "[&_.checkbox-card-label-wrapper]:space-y-2",
-      "[&_.checkbox-card-label-wrapper]:mb-3",
-      "[&_.checkbox-card-wrapper]:gap-3 [&_.checkbox-slot-content]:gap-3"
-    ]
-  end
-
-  defp space_class("large") do
-    [
-      "[&_.checkbox-card-label-wrapper]:space-y-2.5",
-      "[&_.checkbox-card-label-wrapper]:mb-4",
-      "[&_.checkbox-card-wrapper]:gap-4 [&_.checkbox-slot-content]:gap-4"
-    ]
-  end
-
-  defp space_class("extra_large") do
-    [
-      "[&_.checkbox-card-label-wrapper]:space-y-3",
-      "[&_.checkbox-card-label-wrapper]:mb-5",
-      "[&_.checkbox-card-wrapper]:gap-5 [&_.checkbox-slot-content]:gap-5"
-    ]
-  end
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]",
-      "checked:[&_.checkbox-card-input]:text-[#09090b]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#757373]",
-      "[&_.checkbox-card-input]:border-[#e4e4e7] dark:[&_.checkbox-card-input]:border-[#27272a]",
-      "[&_.checkbox-card-input:checked]:border-[#09090b] dark:[&_.checkbox-card-input:checked]:border-[#27272a]",
-      "has-[:checked]:bg-[#F8F9FA] dark:has-[:checked]:bg-[#242424]",
-      "has-[:checked]:border-[#09090b] dark:has-[:checked]:border-[#757373]",
-      "[&_.checkbox-card-input:not(:checked)]:bg-white dark:[&_.checkbox-card-input:not(:checked)]:bg-[#333]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black",
-      "checked:[&_.checkbox-card-input]:text-black",
-      "[&_.checkbox-card-input]:border-black",
-      "has-[:checked]:bg-[#ede8e8]"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white",
-      "checked:[&_.checkbox-card-input]:text-white",
-      "[&_.checkbox-card-input]:border-white",
-      "has-[:checked]:bg-[#616060]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#5E5E5E]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#BBBBBB]",
-      "[&_.checkbox-card-input]:border-[#e4e4e7] dark:[&_.checkbox-card-input]:border-[#27272a]",
-      "has-[:checked]:bg-[#282828] dark:has-[:checked]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#0095A4]",
-      "[&_.checkbox-card-input]:border-[#0095A4]",
-      "has-[:checked]:bg-[#77D5E3] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#068BEE]",
-      "[&_.checkbox-card-input]:border-[#068BEE]",
-      "has-[:checked]:bg-[#175BCC] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#009A51]",
-      "[&_.checkbox-card-input]:border-[#009A51]",
-      "has-[:checked]:bg-[#166C3B] dark:has-[:checked]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#FCB001]",
-      "[&_.checkbox-card-input]:border-[#FCB001]",
-      "has-[:checked]:bg-[#976A01] dark:has-[:checked]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#F83446]",
-      "[&_.checkbox-card-input]:border-[#F83446]",
-      "has-[:checked]:bg-[#BB032A] dark:has-[:checked]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#0EA5E9]",
-      "[&_.checkbox-card-input]:border-[#0EA5E9]",
-      "has-[:checked]:bg-[#08638C] dark:has-[:checked]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#A964F7]",
-      "[&_.checkbox-card-input]:border-[#A964F7]",
-      "has-[:checked]:bg-[#653C94] dark:has-[:checked]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#D27D46]",
-      "[&_.checkbox-card-input]:border-[#D27D46]",
-      "has-[:checked]:bg-[#7E4B2A] dark:has-[:checked]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "checked:[&_.checkbox-card-input]:text-[#A6A6A6]",
-      "[&_.checkbox-card-input]:border-[#A6A6A6]",
-      "has-[:checked]:bg-[#727272] dark:has-[:checked]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "checked:[&_.checkbox-card-input]:text-[#DDDDDD]",
-      "[&_.checkbox-card-input]:border-[#DDDDDD]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#4B4B4B]",
-      "dark:[&_.checkbox-card-input]:border-[#4B4B4B]",
-      "has-[:checked]:border-black dark:has-[:checked]:border-white"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "checked:[&_.checkbox-card-input]:text-[#007F8C]",
-      "[&_.checkbox-card-input]:border-[#007F8C]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#01B8CA]",
-      "dark:[&_.checkbox-card-input]:border-[#01B8CA]",
-      "has-[:checked]:border-[#1A535A] dark:has-[:checked]:border-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "checked:[&_.checkbox-card-input]:text-[#266EF1]",
-      "[&_.checkbox-card-input]:border-[#266EF1]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#6DAAFB]",
-      "dark:[&_.checkbox-card-input]:border-[#6DAAFB]",
-      "has-[:checked]:border-[#1948A3] dark:has-[:checked]:border-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]",
-      "checked:[&_.checkbox-card-input]:text-[#0E8345]",
-      "[&_.checkbox-card-input]:border-[#0E8345]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#06C167]",
-      "dark:[&_.checkbox-card-input]:border-[#06C167]",
-      "has-[:checked]:border-[#0D572D] dark:has-[:checked]:border-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]",
-      "checked:[&_.checkbox-card-input]:text-[#CA8D01]",
-      "[&_.checkbox-card-input]:border-[#CA8D01]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#FDC034]",
-      "dark:[&_.checkbox-card-input]:border-[#FDC034]",
-      "has-[:checked]:border-[#654600] dark:has-[:checked]:border-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "checked:[&_.checkbox-card-input]:text-[#DE1135]",
-      "[&_.checkbox-card-input]:border-[#DE1135]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#FC7F79]",
-      "dark:[&_.checkbox-card-input]:border-[#FC7F79]",
-      "has-[:checked]:border-[#950F22] dark:has-[:checked]:border-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "checked:[&_.checkbox-card-input]:text-[#0B84BA]",
-      "[&_.checkbox-card-input]:border-[#0B84BA]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#3EB7ED]",
-      "dark:[&_.checkbox-card-input]:border-[#3EB7ED]",
-      "has-[:checked]:border-[#06425D] dark:has-[:checked]:border-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "checked:[&_.checkbox-card-input]:text-[#8750C5]",
-      "[&_.checkbox-card-input]:border-[#8750C5]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#BA83F9]",
-      "dark:[&_.checkbox-card-input]:border-[#BA83F9]",
-      "has-[:checked]:border-[#442863] dark:has-[:checked]:border-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]",
-      "checked:[&_.checkbox-card-input]:text-[#A86438]",
-      "[&_.checkbox-card-input]:border-[#A86438]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#BA83F9]",
-      "dark:[&_.checkbox-card-input]:border-[#BA83F9]",
-      "has-[:checked]:border-[#54321C] dark:has-[:checked]:border-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "checked:[&_.checkbox-card-input]:text-[#868686]",
-      "[&_.checkbox-card-input]:border-[#868686]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#A6A6A6]",
-      "dark:[&_.checkbox-card-input]:border-[#A6A6A6]",
-      "has-[:checked]:border-[#5E5E5E] dark:has-[:checked]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#5E5E5E]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#BBBBBB]",
-      "[&_.checkbox-card-input]:border-[#e4e4e7] dark:[&_.checkbox-card-input]:border-[#27272a]",
-      "has-[:checked]:bg-[#282828] dark:has-[:checked]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#0095A4]",
-      "[&_.checkbox-card-input]:border-[#0095A4]",
-      "has-[:checked]:bg-[#77D5E3] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#068BEE]",
-      "[&_.checkbox-card-input]:border-[#068BEE]",
-      "has-[:checked]:bg-[#175BCC] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#009A51]",
-      "[&_.checkbox-card-input]:border-[#009A51]",
-      "has-[:checked]:bg-[#166C3B] dark:has-[:checked]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#FCB001]",
-      "[&_.checkbox-card-input]:border-[#FCB001]",
-      "has-[:checked]:bg-[#976A01] dark:has-[:checked]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#F83446]",
-      "[&_.checkbox-card-input]:border-[#F83446]",
-      "has-[:checked]:bg-[#BB032A] dark:has-[:checked]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#0EA5E9]",
-      "[&_.checkbox-card-input]:border-[#0EA5E9]",
-      "has-[:checked]:bg-[#08638C] dark:has-[:checked]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#BA83F9] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#A964F7]",
-      "[&_.checkbox-card-input]:border-[#A964F7]",
-      "has-[:checked]:bg-[#653C94] dark:has-[:checked]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#D27D46]",
-      "[&_.checkbox-card-input]:border-[#D27D46]",
-      "has-[:checked]:bg-[#7E4B2A] dark:has-[:checked]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "checked:[&_.checkbox-card-input]:text-[#A6A6A6]",
-      "[&_.checkbox-card-input]:border-[#A6A6A6]",
-      "has-[:checked]:bg-[#727272] dark:has-[:checked]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]",
-      "checked:[&_.checkbox-card-input]:text-black",
-      "[&_.checkbox-card-input]:border-black",
-      "has-[:checked]:bg-[#ede8e8]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]",
-      "checked:[&_.checkbox-card-input]:text-white",
-      "[&_.checkbox-card-input]:border-white",
-      "has-[:checked]:bg-[#616060]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]",
-      "checked:[&_.checkbox-card-input]:text-black",
-      "dark:checked:[&_.checkbox-card-input]:text-white",
-      "[&_.checkbox-card-input]:border-[#282828] dark:[&_.checkbox-card-input]:border-[#E8E8E8]",
-      "has-[:checked]:border-black dark:has-[:checked]:border-white",
-      "has-[:checked]:bg-[#E8E8E8] dark:has-[:checked]:bg-[#5E5E5E]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]",
-      "checked:[&_.checkbox-card-input]:text-[#016974]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#77D5E3]",
-      "[&_.checkbox-card-input]:border-[#016974] dark:[&_.checkbox-card-input]:border-[#77D5E3]",
-      "has-[:checked]:border-[#1A535A] dark:has-[:checked]:border-[#B0E7EF]",
-      "has-[:checked]:bg-[#CDEEF3] dark:has-[:checked]:bg-[#1A535A]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]",
-      "checked:[&_.checkbox-card-input]:text-[#175BCC]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#A9C9FF]",
-      "[&_.checkbox-card-input]:border-[#175BCC] dark:[&_.checkbox-card-input]:border-[#A9C9FF]",
-      "has-[:checked]:border-[#1948A3] dark:has-[:checked]:border-[#CDDEFF]",
-      "has-[:checked]:bg-[#DEE9FE] dark:has-[:checked]:bg-[#1948A3]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]",
-      "checked:[&_.checkbox-card-input]:text-[#166C3B]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#7FD99A]",
-      "[&_.checkbox-card-input]:border-[#166C3B] dark:[&_.checkbox-card-input]:border-[#7FD99A]",
-      "has-[:checked]:border-[#0D572D] dark:has-[:checked]:border-[#B1EAC2]",
-      "has-[:checked]:bg-[#D3EFDA] dark:has-[:checked]:bg-[#0D572D]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]",
-      "checked:[&_.checkbox-card-input]:text-[#976A01]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#FDD067]",
-      "[&_.checkbox-card-input]:border-[#976A01] dark:[&_.checkbox-card-input]:border-[#FDD067]",
-      "has-[:checked]:border-[#654600] dark:has-[:checked]:border-[#FEDF99]",
-      "has-[:checked]:bg-[#FEEFCC] dark:has-[:checked]:bg-[#654600]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]",
-      "checked:[&_.checkbox-card-input]:text-[#BB032A]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#FFB2AB]",
-      "[&_.checkbox-card-input]:border-[#BB032A] dark:[&_.checkbox-card-input]:border-[#FFB2AB]",
-      "has-[:checked]:border-[#950F22] dark:has-[:checked]:border-[#FFD2CD]",
-      "has-[:checked]:bg-[#FFE1DE] dark:has-[:checked]:bg-[#950F22]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]",
-      "checked:[&_.checkbox-card-input]:text-[#0B84BA]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#6EC9F2]",
-      "[&_.checkbox-card-input]:border-[#0B84BA] dark:[&_.checkbox-card-input]:border-[#6EC9F2]",
-      "has-[:checked]:border-[#06425D] dark:has-[:checked]:border-[#9FDBF6]",
-      "has-[:checked]:bg-[#CFEDFB] dark:has-[:checked]:bg-[#06425D]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]",
-      "checked:[&_.checkbox-card-input]:text-[#653C94]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#CBA2FA]",
-      "[&_.checkbox-card-input]:border-[#653C94] dark:[&_.checkbox-card-input]:border-[#CBA2FA]",
-      "has-[:checked]:border-[#442863] dark:has-[:checked]:border-[#DDC1FC]",
-      "has-[:checked]:bg-[#EEE0FD] dark:has-[:checked]:bg-[#442863]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]",
-      "checked:[&_.checkbox-card-input]:text-[#7E4B2A]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#E4B190]",
-      "[&_.checkbox-card-input]:border-[#7E4B2A] dark:[&_.checkbox-card-input]:border-[#E4B190]",
-      "has-[:checked]:border-[#54321C] dark:has-[:checked]:border-[#EDCBB5]",
-      "has-[:checked]:bg-[#F6E5DA] dark:has-[:checked]:bg-[#54321C]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]",
-      "checked:[&_.checkbox-card-input]:text-[#727272]",
-      "dark:checked:[&_.checkbox-card-input]:text-[#BBBBBB]",
-      "[&_.checkbox-card-input]:border-[#727272] dark:[&_.checkbox-card-input]:border-[#BBBBBB]",
-      "has-[:checked]:border-[#5E5E5E] dark:has-[:checked]:border-[#DDDDDD]",
-      "has-[:checked]:bg-[#E8E8E8] dark:has-[:checked]:bg-[#5E5E5E]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/checkbox_field.ex b/lib/geo_web/components/checkbox_field.ex
deleted file mode 100644
index 60d596a..0000000
--- a/lib/geo_web/components/checkbox_field.ex
+++ /dev/null
@@ -1,526 +0,0 @@
-defmodule GeoWeb.Components.CheckboxField do
-  @moduledoc """
-  GeoWeb.Components.CheckboxField Module Provides a customizable checkbox component for use in Phoenix LiveView forms.
-
-  This module includes individual checkbox fields as well as grouped
-  checkbox fields, each with configurable options such as colors, borders,
-  sizes, and more. It allows for easy integration and styling of checkboxes,
-  with support for form validation and error handling.
-
-  ### Features:
-  - Individual and grouped checkbox fields with flexible styling options.
-  - Support for form integration using `Phoenix.HTML.FormField`.
-  - Customizable properties like color themes, border styles, sizes, and layout variations.
-  - Error handling with customizable icons and messages.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.Utils
-  alias Phoenix.HTML.Form
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `checkbox_field` component is used to create customizable checkbox input elements with various
-  attributes such as `color`, `size`, and `label`.
-
-  It supports form field structures and displays error messages when present, making it suitable
-  for form validation.
-
-  ## Examples
-
-  ```elixir
-  <.checkbox_field name="home" value="Home" space="small" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" color="misc" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" color="dawn" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="large" color="success" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" color="info" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" color="light" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" color="danger" label="This is label"/>
-  <.checkbox_field name="home" value="Home" space="small" color="warning" label="This is label"/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :any,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :label_class, :string, default: "block", doc: "Custom CSS class for the label styling"
-  attr :wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-  attr :checkbox_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :checked, :boolean, default: false, doc: "Specifies if the element is checked by default"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-  attr :multiple, :boolean, default: false, doc: "the multiple flag for select inputs"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form checked readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec checkbox_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def checkbox_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    new_id = assigns.id || field.id
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil)
-    |> assign(id: if(assigns.multiple, do: new_id <> "_#{Utils.random_id()}", else: new_id))
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn ->
-      if assigns.multiple, do: field.name <> "[]", else: field.name
-    end)
-    |> assign_new(:value, fn -> field.value end)
-    |> assign_new(:checked, fn ->
-      Phoenix.HTML.Form.normalize_value("checkbox", assigns[:value])
-    end)
-    |> checkbox_field()
-  end
-
-  def checkbox_field(assigns) do
-    ~H"""
-    <div class={[
-      color_class(@color),
-      rounded_size(@rounded),
-      border_class(@border),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.checkbox-field-wrapper_input]:focus-within:ring-1",
-      @reverse && "[&_.checkbox-field-wrapper]:flex-row-reverse",
-      @class
-    ]}>
-      <.label class={["checkbox-field-wrapper flex items-center w-fit", @wrapper_class]} for={@id}>
-        <%= if @value in ["true", "false"] do %>
-          <input type="hidden" name={@name} value="false" disabled={@rest[:disabled]} />
-        <% else %>
-          <input type="hidden" name={@name} value="" disabled={@rest[:disabled]} />
-        <% end %>
-
-        <input
-          type="checkbox"
-          name={@name}
-          value={@value}
-          id={@id}
-          checked={@checked}
-          class={["bg-white dark:bg-[#18181B] checkbox-input", @checkbox_class]}
-          {@rest}
-        />
-        <span :if={@label} class={@label_class}>{@label}</span>
-      </.label>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc """
-  The `group_checkbox` component is used to create a group of checkboxes with customizable attributes
-  such as `color`, `size`, and `variation`.
-
-  It supports both horizontal and vertical layouts, and allows for individual styling of each
-  checkbox within the group.
-
-  ## Examples
-
-  ```elixir
-  <.group_checkbox id="items-2" variation="horizontal" name="items2" space="large" color="danger">
-    <:checkbox value="10">Label of item 1 in group</:checkbox>
-    <:checkbox value="30">Label of item 2 in group</:checkbox>
-    <:checkbox value="50">Label of item 3 in group</:checkbox>
-    <:checkbox value="60" checked={true}>Label of item 4 in group</:checkbox>
-  </.group_checkbox>
-  ```
-  """
-  @doc type: :component
-  attr :id, :any,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :label_class, :string, default: "block", doc: "Custom CSS class for the label styling"
-  attr :wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-  attr :checkbox_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-  attr :checkbox_wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-
-  attr :variation, :string,
-    default: "vertical",
-    doc: "Defines the layout orientation of the component"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form indeterminate readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :checkbox, required: true do
-    attr :value, :string, required: true
-    attr :checked, :boolean, required: false
-    attr :space, :string, required: false, doc: "Space between items"
-  end
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-  slot :inner_block
-
-  @spec group_checkbox(map()) :: Phoenix.LiveView.Rendered.t()
-  def group_checkbox(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil)
-    |> assign(id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name <> "[]" end)
-    |> assign_new(:value, fn -> field.value end)
-    |> assign(:multiple, true)
-    |> group_checkbox()
-  end
-
-  def group_checkbox(assigns) do
-    ~H"""
-    <div class={[
-      @variation == "horizontal" && "flex flex-wrap items-center",
-      @variation == "vertical" && "flex flex-col",
-      variation_gap(@space),
-      @class
-    ]}>
-      {render_slot(@inner_block)}
-      <input type="hidden" name={@name} value="" disabled={@rest[:disabled]} />
-      <div
-        :for={{checkbox, index} <- Enum.with_index(@checkbox, 1)}
-        class={[
-          color_class(@color),
-          rounded_size(@rounded),
-          border_class(@border),
-          size_class(@size),
-          space_class(checkbox[:space] || "small"),
-          @ring && "[&_.checkbox-field-wrapper_input]:focus-within:ring-1",
-          @reverse && "[&_.checkbox-field-wrapper]:flex-row-reverse",
-          @wrapper_class
-        ]}
-      >
-        <.label
-          class={["checkbox-field-wrapper flex items-center w-fit", @checkbox_wrapper_class]}
-          for={"#{@id}-#{index}"}
-        >
-          <input
-            type="checkbox"
-            name={@name}
-            id={"#{@id}-#{index}"}
-            value={checkbox[:value]}
-            checked={checkbox[:checked]}
-            class={["bg-white dark:bg-[#18181B] checkbox-input", @checkbox_class]}
-            {@rest}
-          />
-          <span class={@label_class}>{render_slot(checkbox)}</span>
-        </.label>
-      </div>
-    </div>
-    <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    """
-  end
-
-  def checkbox_check(:list, {field, value}, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      new_value = if is_atom(value), do: Atom.to_string(value), else: value
-      new_value in params[Atom.to_string(field)]
-    else
-      Map.get(data, field) == value
-    end
-  end
-
-  def checkbox_check(:boolean, field, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      Form.normalize_value("checkbox", params[Atom.to_string(field)])
-    else
-      Map.get(data, field, false)
-    end
-  end
-
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["block text-sm font-semibold leading-6", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp size_class("extra_small"), do: "[&_.checkbox-field-wrapper_input]:size-2.5"
-
-  defp size_class("small"), do: "[&_.checkbox-field-wrapper_input]:size-3"
-
-  defp size_class("medium"), do: "[&_.checkbox-field-wrapper_input]:size-3.5"
-
-  defp size_class("large"), do: "[&_.checkbox-field-wrapper_input]:size-4"
-
-  defp size_class("extra_large"), do: "[&_.checkbox-field-wrapper_input]:size-5"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded-full"
-
-  defp rounded_size("none"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:rounded-none"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class("none"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:border-0"
-  defp border_class("extra_small"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:border"
-  defp border_class("small"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:border-2"
-  defp border_class("medium"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:border-[3px]"
-  defp border_class("large"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:border-4"
-  defp border_class("extra_large"), do: "[&_.checkbox-field-wrapper_.checkbox-input]:border-[5px]"
-  defp border_class(params) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "[&_.checkbox-field-wrapper]:gap-1"
-
-  defp space_class("small"), do: "[&_.checkbox-field-wrapper]:gap-1.5"
-
-  defp space_class("medium"), do: "[&_.checkbox-field-wrapper]:gap-2"
-
-  defp space_class("large"), do: "[&_.checkbox-field-wrapper]:gap-2.5"
-
-  defp space_class("extra_large"), do: "[&_.checkbox-field-wrapper]:gap-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp variation_gap("extra_small"), do: "gap-1"
-
-  defp variation_gap("small"), do: "gap-2"
-
-  defp variation_gap("medium"), do: "gap-3"
-
-  defp variation_gap("large"), do: "gap-4"
-
-  defp variation_gap("extra_large"), do: "gap-5"
-
-  defp variation_gap(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "text-[#09090b] dark:text-[#FAFAFA]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#8B8B8D]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#818182]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#8B8B8D]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#818182]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#F8F9FA] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#696969]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "[&_.checkbox-field-wrapper_.checkbox-input]:text-white text-[#DDDDDD]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#DDDDDD]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input_.radio-input]:ring-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "text-[#282828] dark:text-[#E8E8E8]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#282828]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#E8E8E8]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#282828]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#868686]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#4B4B4B] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "text-[#016974] dark:text-[#77D5E3]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#016974]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#77D5E3]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#016974]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#77D5E3]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#007F8C] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#175BCC]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#A9C9FF]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#175BCC]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#A9C9FF]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#266EF1] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#166C3B]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#7FD99A]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#166C3B]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#7FD99A]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#0E8345] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "text-[#976A01] dark:text-[#FDD067]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#976A01]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#FDD067]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#976A01]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#FDD067]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#CA8D01] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#BB032A]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#FFB2AB]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#BB032A]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#FFB2AB]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#DE1135] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#0B84BA]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#6EC9F2]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#0B84BA]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#6EC9F2]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#0B84BA] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#653C94]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#CBA2FA]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#653C94]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#CBA2FA]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#8750C5] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#7E4B2A]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#E4B190]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#7E4B2A]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#E4B190]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#A86438] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "text-[#727272] dark:text-[#BBBBBB]",
-      "checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#727272]",
-      "dark:checked:[&_.checkbox-field-wrapper_.checkbox-input]:text-[#BBBBBB]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#727272]",
-      "dark:[&_.checkbox-field-wrapper_.checkbox-input]:border-[#BBBBBB]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#868686] dark:focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "[&_.checkbox-field-wrapper_.checkbox-input]:text-[#282828] text-[#282828]",
-      "[&_.checkbox-field-wrapper_.checkbox-input]:border-[#727272]",
-      "focus-within:[&_.checkbox-field-wrapper_.checkbox-input]:ring-[#282828]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/clipboard.ex b/lib/geo_web/components/clipboard.ex
deleted file mode 100644
index c57261b..0000000
--- a/lib/geo_web/components/clipboard.ex
+++ /dev/null
@@ -1,229 +0,0 @@
-defmodule GeoWeb.Components.Clipboard do
-  @moduledoc """
-  The `GeoWeb.Components.Clipboard` is a Phoenix LiveView component module for creating customizable clipboard functionality.
-
-  This module provides components to facilitate copying text to the clipboard, with customizable options for feedback, styling, and accessibility. The main component, `clipboard/1`, can copy provided text or content from a specified DOM element.
-
-  The clipboard component supports features such as:
-  - Single-click copy functionality
-  - Dynamic feedback messages for success or error states
-  - Customizable styling for visual indicators
-  - Accessibility enhancements through ARIA attributes
-  - Flexible content rendering through slots
-  """
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-
-  @doc """
-  The `clipboard` component provides interactive, accessible copy-to-clipboard functionality with dynamic feedback and customization options.
-
-  This component allows users to copy provided text or text content from a targeted DOM element, with visual and ARIA-enhanced feedback for success or error states. It supports flexible usage patterns with slots for custom triggers and content.
-
-  ## Features include:
-  - One-click clipboard interaction
-  - Dynamic success/error messages
-  - Visual feedback via customizable CSS classes
-  - Support for static or target-based copying
-  - Accessible attributes and screen reader descriptions
-  - Customizable trigger button with ARIA labels
-  - Optional status display with animation or transitions
-  - Slot support for flexible rendering of content and triggers
-
-  ## Example usage:
-
-  ### Basic copy button with static text
-      <.clipboard text="Some text to copy">
-        <:trigger>
-          <button class="btn">Copy</button>
-        </:trigger>
-      </.clipboard>
-
-  ### Copy from an existing element
-      <div id="my-text">Copy this text</div>
-
-      <.clipboard target_selector="#my-text">
-        <:trigger>
-          <button class="btn">Copy from element</button>
-        </:trigger>
-      </.clipboard>
-
-  ### Clipboard with success and error messages
-      <.clipboard
-        text="Clipboard content"
-        copy_success_text="Copied successfully!"
-        copy_error_text="Copy failed. Try again!"
-      >
-        <:trigger>
-          <button class="btn">Copy now</button>
-        </:trigger>
-      </.clipboard>
-
-  ### Dynamic label change after copy
-      <.clipboard text="Secret code" dynamic_label={true}>
-        <:trigger>
-          <span class="clipboard-label">Click to copy</span>
-        </:trigger>
-      </.clipboard>
-
-  ### With screen reader description and custom styling
-      <.clipboard
-        text="Accessible text"
-        text_description="Copies the accessible text to your clipboard"
-        class="rounded border p-2"
-        success_class="bg-green-200"
-        error_class="bg-red-200"
-      >
-        <:trigger>
-          <button class="btn">📋 Copy</button>
-        </:trigger>
-      </.clipboard>
-  """
-
-  @doc type: :component
-  attr :id, :string, doc: "The unique identifier for the clipboard component element."
-
-  attr :class, :string,
-    default: nil,
-    doc: "CSS classes to apply to the clipboard component container."
-
-  attr :text, :string,
-    default: nil,
-    doc:
-      "The text to copy to the clipboard. If not provided, it will look for the text content or target selector."
-
-  attr :target_selector, :string,
-    default: nil,
-    doc: "The CSS selector for the target element to copy from, if no text is provided."
-
-  attr :timeout, :integer,
-    default: 2000,
-    doc:
-      "The timeout duration (in milliseconds) before the clipboard operation is considered failed."
-
-  attr :success_class, :string,
-    default: "clipboard-success",
-    doc: "CSS class applied to the component when the clipboard copy is successful."
-
-  attr :error_class, :string,
-    default: "clipboard-error",
-    doc: "CSS class applied to the component when the clipboard copy fails."
-
-  attr :copy_success_text, :string,
-    doc: "The success message to display after a successful copy operation."
-
-  attr :copy_error_text, :string,
-    doc: "The error message to display after a failed copy operation."
-
-  attr :copy_button_label, :string,
-    default: nil,
-    doc: "Label for the button used to trigger the copy operation."
-
-  attr :text_description, :string,
-    default: nil,
-    doc:
-      "Optional description text for screen readers, providing more context about the clipboard functionality."
-
-  attr :status_class, :string,
-    default: "block mt-2",
-    doc: "CSS class for styling the status message shown after a copy operation."
-
-  attr :content_class, :string,
-    default: "block mb-2",
-    doc: "CSS class for styling the status message shown after a copy operation."
-
-  attr :trigger_class, :string,
-    default: nil,
-    doc: "CSS class for styling the trigger wrapper."
-
-  attr :show_status_text, :boolean,
-    default: true,
-    doc: "If true, displays the visual clipboard status text (e.g., 'Copied!'). Default: true."
-
-  attr :dynamic_label, :boolean,
-    default: false,
-    doc:
-      "If true, replaces text inside `.clipboard-label` on copy success/failure. Default: false."
-
-  slot :content, doc: "Slot for custom content to display inside the clipboard container."
-
-  slot :trigger,
-    required: true,
-    doc:
-      "The slot for the button or trigger element that initiates the copy operation. This is a required slot."
-
-  slot :inner_block,
-    doc:
-      "Slot for additional content or inner components that should be rendered inside the clipboard container."
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def clipboard(assigns) do
-    assigns =
-      assigns
-      |> assign_new(:id, fn -> "clipboard-#{random_id()}" end)
-      |> assign_new(:copy_success_text, fn -> gettext("Copied!") end)
-      |> assign_new(:copy_error_text, fn -> gettext("Copy failed") end)
-      |> assign_new(:copy_button_label, fn -> gettext("Copy to clipboard") end)
-      |> then(fn new_assigns ->
-        new_assigns
-        |> assign(:status_id, "#{new_assigns.id}-status")
-        |> assign(:content_id, "#{new_assigns.id}-content")
-      end)
-
-    ~H"""
-    <span
-      id={@id}
-      class={["clipboard-container", @class]}
-      phx-hook="Clipboard"
-      phx-track-static
-      phx-update="ignore"
-      data-timeout={@timeout}
-      data-success-class={@success_class}
-      data-error-class={@error_class}
-      data-clipboard-text={@text}
-      data-target-selector={@target_selector}
-      data-copy-success-text={@copy_success_text}
-      data-copy-error-text={@copy_error_text}
-      data-dynamic-label={to_string(@dynamic_label)}
-      aria-describedby={@text_description && "#{@id}-description"}
-    >
-      <span :if={@text_description} id={"#{@id}-description"} class="sr-only">
-        {@text_description}
-      </span>
-
-      <span
-        :if={@text == nil && @target_selector == nil && Enum.count(@content) > 0}
-        id={@content_id}
-        class={["clipboard-content", @content_class]}
-      >
-        {render_slot(@content)}
-      </span>
-
-      <span
-        class={["clipboard-trigger", @trigger_class]}
-        role="button"
-        tabindex="0"
-        aria-describedby={@status_id}
-        aria-pressed="false"
-      >
-        {render_slot(@trigger)}
-      </span>
-
-      <span
-        :if={@show_status_text}
-        id={@status_id}
-        class={["clipboard-status", @status_class]}
-        aria-live="polite"
-        aria-hidden="true"
-        aria-atomic="true"
-      >
-      </span>
-
-      {render_slot(@inner_block)}
-    </span>
-    """
-  end
-end
diff --git a/lib/geo_web/components/color_field.ex b/lib/geo_web/components/color_field.ex
deleted file mode 100644
index 97824ed..0000000
--- a/lib/geo_web/components/color_field.ex
+++ /dev/null
@@ -1,354 +0,0 @@
-defmodule GeoWeb.Components.ColorField do
-  @moduledoc """
-  The `GeoWeb.Components.ColorField` module provides a reusable and customizable color
-  input component for Phoenix applications. This component supports various styling options,
-  error handling, and additional customization through attributes and slots.
-
-  ## Features:
-  - Customizable color themes, border styles, and rounded corners.
-  - Optional sections for displaying icons or additional elements before and after the input field.
-  - Flexible error handling with support for custom error icons and messages.
-  - Configurable size and layout options for various use cases.
-  - Support for Phoenix form field integration.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `color_field` component is used to create a customizable color input field with various
-  options such as `size`, `color`, and `rounded`.
-
-  It supports labels, descriptions, and error messages, making it suitable for form validation and styling.
-
-  ## Examples
-
-  ```elixir
-  <div class="p-10">
-    <.color_field
-      name="name1"
-      value="#ff5733"
-      border="none"
-      rounded="small"
-      color="danger"
-      description="This is description"
-      label="This is label"
-    />
-
-    <.color_field
-      name="name1"
-      color="dark"
-      description="This is description"
-      label="This is label"
-      size="extra_large"
-    />
-
-    <.color_field name="name1" color="dark" size="full" label="This is label"/>
-  </div>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-  attr :space, :string, default: "medium", doc: "Space between items"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :circle, :boolean,
-    default: false,
-    doc: "Determines if the color input should be displayed as a circle"
-
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, default: "#000000", doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form list min max pattern placeholder
-        readonly required size inputmode inputmode step title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec color_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def color_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> color_field()
-  end
-
-  def color_field(assigns) do
-    ~H"""
-    <div class={[
-      "w-fit",
-      color_class(@color),
-      rounded_size(@rounded),
-      border_class(@border),
-      size_class(@size),
-      space_class(@space),
-      @class
-    ]}>
-      <div
-        :if={@label || @description}
-        class={["checkbox-card-label-wrapper", @description_wrapper_class]}
-      >
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class="color-field-wrapper">
-        <input
-          type="color"
-          name={@name}
-          id={@id}
-          value={@value}
-          class={["color-input", @input_class]}
-          {@rest}
-        />
-      </div>
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp size_class("extra_small") do
-    [
-      "[&_.color-field-wrapper_.color-input]:w-7 [&_.color-field-wrapper_.color-input]:h-4"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&_.color-field-wrapper_.color-input]:w-8 [&_.color-field-wrapper_.color-input]:h-5"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&_.color-field-wrapper_.color-input]:w-9 [&_.color-field-wrapper_.color-input]:h-6"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&_.color-field-wrapper_.color-input]:w-10 [&_.color-field-wrapper_.color-input]:h-7"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&_.color-field-wrapper_.color-input]:w-11 [&_.color-field-wrapper_.color-input]:h-8"
-    ]
-  end
-
-  defp size_class("full"), do: "[&_.color-field-wrapper_.color-input]:w-full h-4"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.color-field-wrapper_.color-input]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.color-field-wrapper_.color-input]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.color-field-wrapper_.color-input]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.color-field-wrapper_.color-input]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.color-field-wrapper_.color-input]:rounded-xl"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class("none"), do: "[&_.color-field-wrapper_.color-input]:border-0"
-  defp border_class("extra_small"), do: "[&_.color-field-wrapper_.color-input]:border"
-  defp border_class("small"), do: "[&_.color-field-wrapper_.color-input]:border-2"
-  defp border_class("medium"), do: "[&_.color-field-wrapper_.color-input]:border-[3px]"
-  defp border_class("large"), do: "[&_.color-field-wrapper_.color-input]:border-4"
-  defp border_class("extra_large"), do: "[&_.color-field-wrapper_.color-input]:border-[5px]"
-  defp border_class(params) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#e4e4e7]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#27272a]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#DADADA]"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#4B4B4B]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#007F8C]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#266EF1]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#0E8345]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#CA8D01]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#DE1135]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#0B84BA]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#8750C5]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#A86438]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#868686]",
-      "dark:[&_.color-field-wrapper_.color-input]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "[&_.color-field-wrapper_.color-input]:border-[#282828]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/combobox.ex b/lib/geo_web/components/combobox.ex
deleted file mode 100644
index b3ea23d..0000000
--- a/lib/geo_web/components/combobox.ex
+++ /dev/null
@@ -1,1047 +0,0 @@
-defmodule GeoWeb.Components.Combobox do
-  @moduledoc """
-  The `GeoWeb.Components.Combobox` is a Phoenix LiveView component module for creating customizable combobox elements.
-
-  This module provides components to display combobox/select inputs with various styles, colors,
-  sizes, and configurations. The main component, `combobox/1`, acts as a container for select options,
-  and allows users to search, filter and select items from a dropdown list.
-
-  The combobox component supports features like:
-  - Search filtering of options
-  - Single and multiple selection modes
-  - Custom option rendering
-  - Keyboard navigation
-  - Accessibility support
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  import GeoWeb.Components.ScrollArea, only: [scroll_area: 1]
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `combobox` component is a customizable select/dropdown element with advanced features
-  such as searchable options, multiple selection, and grouped items.
-
-  It supports various customization options including:
-  - Searchable options with filter functionality
-  - Single or multiple selection modes
-  - Option grouping with labels
-  - Custom styling with color themes and variants
-  - Accessibility features with ARIA attributes
-  - Responsive dropdown with scrollable area
-  - Form field integration
-  - Custom placeholders and descriptions
-  - Start section slots for icons or additional content
-
-
-   ## Example usage:
-    <.combobox
-      options={@options}
-      placeholder="Select an option"
-      on_change="handle_selection"
-    />
-    # Single selection with options
-    <.combobox placeholder="Select an item">
-      <:option value="Item 1">First Item</:option>
-      <:option value="Item 2">Second Item</:option>
-      <:option value="Item 3">Third Item</:option>
-    </.combobox>
-
-    # With grouped options
-    <.combobox placeholder="Select a fruit">
-      <:option group="Citrus" value="orange">Orange</:option>
-      <:option group="Citrus" value="lemon">Lemon</:option>
-      <:option group="Berries" value="strawberry">Strawberry</:option>
-      <:option group="Berries" value="blueberry">Blueberry</:option>
-    </.combobox>
-
-    # With disabled options
-    <.combobox placeholder="Select an option">
-      <:option value="available">Available Option</:option>
-      <:option value="disabled" disabled>Disabled Option</:option>
-      <:option value="another">Another Option</:option>
-    </.combobox>
-
-    # Multiple selection with custom rendering
-    <.combobox multiple searchable placeholder="Select fruits">
-      <:option value="apple">
-        <div class="flex items-center gap-2">
-          <span>🍎</span>
-          <span>Apple</span>
-        </div>
-      </:option>
-      <:option value="banana">
-        <div class="flex items-center gap-2">
-          <span>🍌</span>
-          <span>Banana</span>
-        </div>
-      </:option>
-    </.combobox>
-  ```
-  """
-
-  @doc type: :component
-  attr :id, :any, default: nil, doc: "A unique identifier is used to manage state and interaction"
-  attr :name, :any, doc: "Name of input"
-  attr :label, :string, default: nil
-  attr :value, :any, doc: "Value of input"
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :options, :list, doc: "the options to pass to Phoenix.HTML.Form.options_for_select/2"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :placeholder, :string, default: nil, doc: "Placeholder of field"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :option_group_class, :string, default: nil, doc: "Custom CSS class option group"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :search_placeholder, :string,
-    default: "Search..",
-    doc: "Custom CSS class for additional styling"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines variant theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "medium", doc: "Radius size"
-  attr :space, :string, default: "extra_small", doc: "Radius size"
-  attr :padding, :string, default: "small", doc: "Padding size"
-  attr :height, :string, default: "h-fit max-h-40", doc: "Dropdown height"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :searchable, :boolean, default: false, doc: "Determines a short description"
-  attr :multiple, :boolean, default: false, doc: "Multiple selections in the combobox"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  slot :option, required: false do
-    attr :value, :string, required: true, doc: "Value of the select option"
-    attr :class, :string, doc: "Value of the select option"
-    attr :group, :string, required: false, doc: "Group name for the option"
-    attr :disabled, :boolean, required: false, doc: "Specifies if this option is disabled"
-  end
-
-  attr :rest, :global,
-    include: ~w(accept autocomplete capture cols disabled form list max maxlength min minlength
-                multiple pattern placeholder readonly required rows size step),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def combobox(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> if assigns.multiple, do: field.name <> "[]", else: field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> combobox()
-  end
-
-  def combobox(%{multiple: true} = assigns) do
-    assigns =
-      assigns
-      |> assign_new(:id, fn -> "combo-#{random_id()}" end)
-      |> assign_new(:options, fn -> [] end)
-      |> assign_new(:option, fn -> [] end)
-      |> assign_new(:value, fn -> Map.get(assigns, :value, []) end)
-
-    ~H"""
-    <div class={[
-      "leading-5",
-      border_class(@border, @variant),
-      color_variant(@variant, @color),
-      rounded_size(@rounded),
-      padding_size(@padding),
-      size_class(@size),
-      space_class(@space)
-    ]}>
-      <div :if={@label || @description} class={["combobox-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div phx-hook="Combobox" data-multiple={@multiple} id={"#{@id}-combo"}>
-        <input type="hidden" name={@name} />
-        <select id={@id} name={@name} multiple class="combo-select hidden" {@rest}>
-          <option value=""></option>
-
-          <%= if Enum.empty?(@option) do %>
-            {Phoenix.HTML.Form.options_for_select(@options, @value)}
-          <% else %>
-            <optgroup
-              :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
-              :if={!is_nil(group_label)}
-              label={group_label}
-            >
-              {Phoenix.HTML.Form.options_for_select(
-                Enum.map(grouped_options, fn option -> {option[:value], option[:value]} end),
-                @value
-              )}
-            </optgroup>
-
-            {!Enum.any?(@option, &Map.has_key?(&1, :group)) &&
-              Phoenix.HTML.Form.options_for_select(
-                Enum.map(@option, fn %{value: v} -> {v, v} end),
-                @value
-              )}
-          <% end %>
-        </select>
-
-        <div phx-update="ignore" id={"#{@id}-combo-wrapper"} class="relative">
-          <button
-            class="combobox-trigger w-full text-start py-1 flex items-center justify-between focus:outline-none border"
-            role="combobox"
-            aria-haspopup="listbox"
-            aria-expanded="false"
-            aria-controls={"#{@id}-listbox"}
-            aria-labelledby={"#{@id}-label #{@id}-button"}
-            type="button"
-          >
-            <div class="flex-1 flex items-center gap-2">
-              <div
-                :if={@start_section != []}
-                class={[
-                  "shrink-0",
-                  @start_section[:class]
-                ]}
-              >
-                {render_slot(@start_section)}
-              </div>
-
-              <div :if={@placeholder} class="combobox-placeholder select-none">
-                {@placeholder}
-              </div>
-
-              <div
-                data-part="select-toggle-label"
-                class={[
-                  "selected-value flex flex-wrap items-center gap-2 [&_.combobox-pill]:py-0.5",
-                  "[&_.combobox-pill]:px-1 [&_.combobox-pill]:leading-4"
-                ]}
-              >
-              </div>
-            </div>
-
-            <div class="flex items-center gap-1">
-              <div class="shrink-0" data-part="clear-combobox-button" role="button" hidden>
-                <svg
-                  xmlns="http://www.w3.org/2000/svg"
-                  width="24"
-                  height="24"
-                  viewBox="0 0 24 24"
-                  fill="none"
-                  stroke="currentColor"
-                  stroke-width="2"
-                  stroke-linecap="round"
-                  stroke-linejoin="round"
-                  class="size-3.5 opacity-60"
-                >
-                  <path d="M18 6 6 18" /><path d="m6 6 12 12" />
-                </svg>
-              </div>
-
-              <svg
-                xmlns="http://www.w3.org/2000/svg"
-                width="24"
-                height="24"
-                viewBox="0 0 24 24"
-                fill="none"
-                stroke="currentColor"
-                stroke-width="2"
-                stroke-linecap="round"
-                stroke-linejoin="round"
-                class="shrink-0 combobox-icon"
-              >
-                <path d="m7 15 5 5 5-5" /><path d="m7 9 5-5 5 5" />
-              </svg>
-            </div>
-          </button>
-
-          <div
-            id={"#{@id}-listbox"}
-            role="listbox"
-            data-part="listbox"
-            aria-multiselectable={@multiple}
-            class="combobox-dropdown z-50 absolute w-full px-[3px] py-2 transition-all ease-out duration-[250ms] top-full mt-2"
-            hidden
-          >
-            <div :if={@searchable} class="mt-1 mb-2 mx-1.5">
-              <input
-                type="text"
-                role="searchbox"
-                aria-controls={"#{@id}-listbox"}
-                aria-autocomplete="list"
-                aria-activedescendant=""
-                aria-label={@search_placeholder}
-                class="combobox-search-input appearance-none bg-transparent px-2 py-1 w-full focus:outline-none"
-                placeholder={@search_placeholder}
-              />
-            </div>
-
-            <.scroll_area
-              id={"combobox-wrapper-#{@id}"}
-              padding="none"
-              height={@height}
-              scrollbar_width="w-[4px]"
-            >
-              <div class="px-1.5">
-                <.option :for={{label, value} <- @options} :if={@options} value={value}>
-                  {label}
-                </.option>
-
-                <div
-                  :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
-                  :if={!is_nil(group_label)}
-                  class={["option-group", @option_group_class]}
-                >
-                  <div class="group-label font-semibold my-2">{group_label}</div>
-
-                  <div>
-                    <.option
-                      :for={option <- grouped_options}
-                      value={option[:value]}
-                      disabled={option[:disabled]}
-                      class={option[:class]}
-                    >
-                      {render_slot(option)}
-                    </.option>
-                  </div>
-                </div>
-
-                <.option
-                  :for={option <- Enum.filter(@option, &is_nil(&1[:group]))}
-                  value={option[:value]}
-                  disabled={option[:disabled]}
-                  class={option[:class]}
-                >
-                  {render_slot(option)}
-                </.option>
-
-                <div :if={@searchable} class="no-results text-center hidden">
-                  {gettext("Nothing found!")}
-                </div>
-              </div>
-            </.scroll_area>
-          </div>
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def combobox(assigns) do
-    assigns =
-      assigns
-      |> assign_new(:id, fn -> "combo-#{random_id()}" end)
-      |> assign_new(:options, fn -> [] end)
-      |> assign_new(:option, fn -> [] end)
-      |> assign_new(:value, fn -> Map.get(assigns, :value) end)
-
-    ~H"""
-    <div class={[
-      "leading-5",
-      border_class(@border, @variant),
-      color_variant(@variant, @color),
-      rounded_size(@rounded),
-      padding_size(@padding),
-      size_class(@size),
-      space_class(@space)
-    ]}>
-      <div :if={@label || @description} class={["combobox-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div phx-hook="Combobox" id={"#{@id}-combo"}>
-        <select id={@id} name={@name} class="combo-select hidden" {@rest}>
-          <option value=""></option>
-
-          <%= if Enum.empty?(@option) do %>
-            {Phoenix.HTML.Form.options_for_select(@options, @value)}
-          <% else %>
-            <optgroup
-              :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
-              :if={!is_nil(group_label)}
-              label={group_label}
-            >
-              {Phoenix.HTML.Form.options_for_select(
-                Enum.map(grouped_options, fn option -> {option[:value], option[:value]} end),
-                @value
-              )}
-            </optgroup>
-
-            {!Enum.any?(@option, &Map.has_key?(&1, :group)) &&
-              Phoenix.HTML.Form.options_for_select(
-                Enum.map(@option, fn %{value: v} -> {v, v} end),
-                @value
-              )}
-          <% end %>
-        </select>
-
-        <div id={"#{@id}-combo-wrapper"} class="relative" phx-update="ignore">
-          <button
-            class="combobox-trigger w-full text-start py-1 flex items-center justify-between focus:outline-none border"
-            role="combobox"
-            aria-haspopup="listbox"
-            aria-expanded="false"
-            aria-controls={"#{@id}-listbox"}
-            aria-labelledby={"#{@id}-label #{@id}-button"}
-            type="button"
-          >
-            <div id={"#{@id}-select-toggle-label"} class="flex-1 flex items-center gap-2">
-              <div
-                :if={@start_section != []}
-                class={[
-                  "shrink-0",
-                  @start_section[:class]
-                ]}
-              >
-                {render_slot(@start_section)}
-              </div>
-
-              <div :if={@placeholder} class="combobox-placeholder select-none">
-                {@placeholder}
-              </div>
-
-              <div data-part="select-toggle-label" class="selected-value"></div>
-            </div>
-
-            <div class="flex items-center gap-1">
-              <div class="shrink-0" data-part="clear-combobox-button" role="button" hidden>
-                <svg
-                  xmlns="http://www.w3.org/2000/svg"
-                  width="24"
-                  height="24"
-                  viewBox="0 0 24 24"
-                  fill="none"
-                  stroke="currentColor"
-                  stroke-width="2"
-                  stroke-linecap="round"
-                  stroke-linejoin="round"
-                  class="size-3.5 opacity-60"
-                >
-                  <path d="M18 6 6 18" /><path d="m6 6 12 12" />
-                </svg>
-              </div>
-
-              <svg
-                xmlns="http://www.w3.org/2000/svg"
-                width="24"
-                height="24"
-                viewBox="0 0 24 24"
-                fill="none"
-                stroke="currentColor"
-                stroke-width="2"
-                stroke-linecap="round"
-                stroke-linejoin="round"
-                class="shrink-0 combobox-icon"
-              >
-                <path d="m7 15 5 5 5-5" /><path d="m7 9 5-5 5 5" />
-              </svg>
-            </div>
-          </button>
-
-          <div
-            id={"#{@id}-listbox"}
-            role="listbox"
-            data-part="listbox"
-            class="combobox-dropdown z-50 absolute w-full px-[3px] py-2 transition-all ease-out duration-[250ms] top-full mt-2"
-            hidden
-          >
-            <div :if={@searchable} class="mt-1 mb-2 mx-1.5">
-              <input
-                type="text"
-                role="searchbox"
-                aria-controls={"#{@id}-listbox"}
-                aria-autocomplete="list"
-                aria-activedescendant=""
-                aria-label={@search_placeholder}
-                class="combobox-search-input appearance-none bg-transparent px-2 py-1 w-full focus:outline-none"
-                data-part="search"
-                placeholder={@search_placeholder}
-              />
-            </div>
-
-            <.scroll_area
-              id={"combobox-wrapper-#{@id}"}
-              padding="none"
-              height={@height}
-              scrollbar_width="w-[4px]"
-            >
-              <div class="px-1.5">
-                <.option :for={{label, value} <- @options} :if={@options} value={value}>
-                  {label}
-                </.option>
-
-                <div
-                  :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
-                  :if={!is_nil(group_label)}
-                  class={["option-group", @option_group_class]}
-                >
-                  <div class="group-label font-semibold my-2">{group_label}</div>
-
-                  <div>
-                    <.option
-                      :for={option <- grouped_options}
-                      value={option[:value]}
-                      disabled={option[:disabled]}
-                      class={option[:class]}
-                    >
-                      {render_slot(option)}
-                    </.option>
-                  </div>
-                </div>
-
-                <.option
-                  :for={option <- Enum.filter(@option, &is_nil(&1[:group]))}
-                  value={option[:value]}
-                  disabled={option[:disabled]}
-                  class={option[:class]}
-                >
-                  {render_slot(option)}
-                </.option>
-
-                <div :if={@searchable} class="no-results text-center hidden">
-                  {gettext("Nothing found!")}
-                </div>
-              </div>
-            </.scroll_area>
-          </div>
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :value, :string, required: true, doc: "Specifies the form which is associated with"
-  attr :disabled, :boolean, default: false, doc: "Inner block that renders HEEx content"
-  attr :class, :string, default: nil, doc: "Custom class"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  defp option(assigns) do
-    ~H"""
-    <div
-      role="option"
-      class={[
-        "combobox-option cursor-pointer rounded flex justify-between items-center",
-        "[&[data-combobox-navigate]]:bg-blue-500 [&[data-combobox-navigate]]:text-white",
-        @class
-      ]}
-      data-combobox-value={@value}
-    >
-      {render_slot(@inner_block)}
-      <svg
-        class="hidden [[data-combobox-selected]_&]:block shrink-0 w-3.5 h-3.5 combobox-icon"
-        fill="none"
-        viewBox="0 0 24 24"
-      >
-        <path
-          stroke="currentColor"
-          stroke-linecap="round"
-          stroke-linejoin="round"
-          stroke-width="2"
-          d="M20 6 9 17l-5-5"
-        >
-        </path>
-      </svg>
-    </div>
-    """
-  end
-
-  attr :id, :string, default: nil, doc: "Unique identifire"
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]} id={@id}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-[14px] text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" /> {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp size_class("extra_small") do
-    [
-      "[&_.combobox-trigger]:min-h-7 [&_.combobox-icon]:size-3 text-[12px]",
-      "[&_.combobox-search-input]:h-6 [&_.combobox-search-input]:text-[12px]"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&_.combobox-trigger]:min-h-8 [&_.combobox-icon]:size-3.5 text-[13px]",
-      "[&_.combobox-search-input]:h-7 [&_.combobox-search-input]:text-[13px]"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&_.combobox-trigger]:min-h-9 [&_.combobox-icon]:size-4 text-[14px]",
-      "[&_.combobox-search-input]:h-8 [&_.combobox-search-input]:text-[14px]"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&_.combobox-trigger]:min-h-10 [&_.combobox-icon]:size-[18px] text-[15px]",
-      "[&_.combobox-search-input]:h-9 [&_.combobox-search-input]:text-[15px]"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&_.combobox-trigger]:min-h-11 [&_.combobox-icon]:size-5 text-[16px]",
-      "[&_.combobox-search-input]:h-10 [&_.combobox-search-input]:text-[16px]"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small") do
-    [
-      "[&_.combobox-trigger]:rounded-sm [&_.combobox-dropdown]:rounded-sm",
-      "[&_.combobox-pill]:rounded-[0.0625rem] [&_.combobox-search-input]:rounded-sm"
-    ]
-  end
-
-  defp rounded_size("small") do
-    [
-      "[&_.combobox-trigger]:rounded [&_.combobox-dropdown]:rounded",
-      "[&_.combobox-pill]:rounded-[0.13rem] [&_.combobox-search-input]:rounded"
-    ]
-  end
-
-  defp rounded_size("medium") do
-    [
-      "[&_.combobox-trigger]:rounded-md [&_.combobox-dropdown]:rounded-md",
-      "[&_.combobox-pill]:rounded-[0.19rem] [&_.combobox-search-input]:rounded-md"
-    ]
-  end
-
-  defp rounded_size("large") do
-    [
-      "[&_.combobox-trigger]:rounded-lg [&_.combobox-dropdown]:rounded-lg",
-      "[&_.combobox-pill]:rounded-[0.3rem] [&_.combobox-search-input]:rounded-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large") do
-    [
-      "[&_.combobox-trigger]:rounded-xl [&_.combobox-dropdown]:rounded-xl",
-      "[&_.combobox-pill]:rounded-[0.313rem] [&_.combobox-search-input]:rounded-xl"
-    ]
-  end
-
-  defp rounded_size("full") do
-    [
-      "[&_.combobox-trigger]:rounded-full [&_.combobox-dropdown]:rounded-full",
-      "[&_.combobox-pill]:rounded-full [&_.combobox-search-input]:rounded-full"
-    ]
-  end
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-
-  defp border_class("extra_small", _),
-    do: "[&_.combobox-trigger]:border [&_.combobox-dropdown]:border"
-
-  defp border_class("small", _),
-    do: "[&_.combobox-trigger]:border-2 [&_.combobox-dropdown]:border-2"
-
-  defp border_class("medium", _),
-    do: "[&_.combobox-trigger]:border-[3px] [&_.combobox-dropdown]:border-[3px]"
-
-  defp border_class("large", _),
-    do: "[&_.combobox-trigger]:border-4 [&_.combobox-dropdown]:border-4"
-
-  defp border_class("extra_large", _),
-    do: "[&_.combobox-trigger]:border-[5px] [&_.combobox-dropdown]:border-[5px]"
-
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp padding_size("extra_small") do
-    ["[&_.combobox-trigger]:px-2 [&_.combobox-option]:px-2", "[&_.combobox-option]:py-0.5"]
-  end
-
-  defp padding_size("small") do
-    ["[&_.combobox-trigger]:px-3 [&_.combobox-option]:px-3", "[&_.combobox-option]:py-1"]
-  end
-
-  defp padding_size("medium") do
-    ["[&_.combobox-trigger]:px-4 [&_.combobox-option]:px-4", "[&_.combobox-option]:py-1.5"]
-  end
-
-  defp padding_size("large") do
-    ["[&_.combobox-trigger]:px-5 [&_.combobox-option]:px-5", "[&_.combobox-option]:py-2"]
-  end
-
-  defp padding_size("extra_large") do
-    ["[&_.combobox-trigger]:px-6 [&_.combobox-option]:px-6", "[&_.combobox-option]:py-2.5"]
-  end
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2 [&_.combobox-label-wrapper]:space-y-1"
-  defp space_class("small"), do: "space-y-3 [&_.combobox-label-wrapper]:space-y-2"
-  defp space_class("medium"), do: "space-y-4 [&_.combobox-label-wrapper]:space-y-3"
-  defp space_class("large"), do: "space-y-5 [&_.combobox-label-wrapper]:space-y-4"
-  defp space_class("extra_large"), do: "space-y-6 [&_.combobox-label-wrapper]:space-y-5"
-  defp space_class("none"), do: nil
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "[&_.combobox-trigger]:bg-white text-[#09090b] [&_.combobox-trigger]:border-[#e4e4e7] [&_.combobox-trigger]:shadow-sm",
-      "dark:[&_.combobox-trigger]:bg-[#18181B] dark:text-[#FAFAFA] dark:[&_.combobox-trigger]:border-[#27272a]",
-      "[&_.combobox-dropdown]:bg-white [&_.combobox-dropdown]:border-[#e4e4e7]",
-      "dark:[&_.combobox-dropdown]:bg-[#18181B] dark:[&_.combobox-dropdown]:border-[#27272a]",
-      "hover:[&_.combobox-option:not([data-combobox-navigate])]:bg-[#e4e4e7] hover:[&_.combobox-option:not([data-combobox-navigate])]:text-[#09090b]",
-      "dark:hover:[&_.combobox-option:not([data-combobox-navigate])]:bg-[#27272a] dark:hover:[&_.combobox-option:not([data-combobox-navigate])]:text-[#FAFAFA]",
-      "[&_.combobox-search-input]:border-[#e4e4e7] dark:[&_.combobox-search-input]:border-[#27272a]",
-      "[&_.combobox-pill]:text-[#09090b] [&_.combobox-pill]:bg-[#e4e4e7]",
-      "[&_.combobox-dropdown]:shadow"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&_.combobox-trigger]:bg-[#4B4B4B] text-white dark:[&_.combobox-trigger]:bg-[#DDDDDD] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#4B4B4B] dark:[&_.combobox-dropdown]:bg-[#E8E8E8]",
-      "hover:[&_.combobox-option]:bg-[#282828] dark:hover:[&_.combobox-option]:bg-[#E8E8E8]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#282828] dark:[&_.combobox-pill]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&_.combobox-trigger]:bg-[#007F8C] text-white dark:[&_.combobox-trigger]:bg-[#01B8CA] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#007F8C] dark:[&_.combobox-dropdown]:bg-[#01B8CA]",
-      "hover:[&_.combobox-option]:bg-[#016974] dark:hover:[&_.combobox-option]:bg-[#77D5E3]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#016974] dark:[&_.combobox-pill]:bg-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&_.combobox-trigger]:bg-[#266EF1] text-white dark:[&_.combobox-trigger]:bg-[#6DAAFB] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#266EF1] dark:[&_.combobox-dropdown]:bg-[#6DAAFB]",
-      "hover:[&_.combobox-option]:bg-[#175BCC] dark:hover:[&_.combobox-option]:bg-[#A9C9FF]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#175BCC] dark:[&_.combobox-pill]:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&_.combobox-trigger]:bg-[#0E8345] text-white dark:[&_.combobox-trigger]:bg-[#06C167] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#0E8345] dark:[&_.combobox-dropdown]:bg-[#06C167]",
-      "hover:[&_.combobox-option]:bg-[#166C3B] dark:hover:[&_.combobox-option]:bg-[#7FD99A]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#166C3B] dark:[&_.combobox-pill]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&_.combobox-trigger]:bg-[#CA8D01] text-white dark:[&_.combobox-trigger]:bg-[#FDC034] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#CA8D01] dark:[&_.combobox-dropdown]:bg-[#FDC034]",
-      "hover:[&_.combobox-option]:bg-[#976A01] dark:hover:[&_.combobox-option]:bg-[#FDD067]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#976A01] dark:[&_.combobox-pill]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&_.combobox-trigger]:bg-[#DE1135] text-white dark:[&_.combobox-trigger]:bg-[#FC7F79] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#DE1135] dark:[&_.combobox-dropdown]:bg-[#FC7F79]",
-      "hover:[&_.combobox-option]:bg-[#BB032A] dark:hover:[&_.combobox-option]:bg-[#FFB2AB]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#BB032A] dark:[&_.combobox-pill]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&_.combobox-trigger]:bg-[#0B84BA] text-white dark:[&_.combobox-trigger]:bg-[#3EB7ED] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#0B84BA] dark:[&_.combobox-dropdown]:bg-[#3EB7ED]",
-      "hover:[&_.combobox-option]:bg-[#08638C] dark:hover:[&_.combobox-option]:bg-[#6EC9F2]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#08638C] dark:[&_.combobox-pill]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&_.combobox-trigger]:bg-[#8750C5] text-white dark:[&_.combobox-trigger]:bg-[#BA83F9] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#8750C5] dark:[&_.combobox-dropdown]:bg-[#BA83F9]",
-      "hover:[&_.combobox-option]:bg-[#653C94] dark:hover:[&_.combobox-option]:bg-[#CBA2FA]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#653C94] dark:[&_.combobox-pill]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&_.combobox-trigger]:bg-[#A86438] text-white dark:[&_.combobox-trigger]:bg-[#DB976B] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#A86438] dark:[&_.combobox-dropdown]:bg-[#DB976B]",
-      "hover:[&_.combobox-option]:bg-[#7E4B2A] dark:hover:[&_.combobox-option]:bg-[#E4B190]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#7E4B2A] dark:[&_.combobox-pill]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&_.combobox-trigger]:bg-[#868686] text-white dark:[&_.combobox-trigger]:bg-[#A6A6A6] dark:text-black",
-      "[&_.combobox-dropdown]:bg-[#868686] dark:[&_.combobox-dropdown]:bg-[#A6A6A6]",
-      "hover:[&_.combobox-option]:bg-[#727272] dark:hover:[&_.combobox-option]:bg-[#BBBBBB]",
-      "[&_.combobox-search-input]:border-white dark:[&_.combobox-search-input]:border-black",
-      "[&_.combobox-search-input]:text-white dark:[&_.combobox-search-input]:text-black",
-      "[&_.combobox-search-input]:placeholder-white dark:[&_.combobox-search-input]:placeholder-black",
-      "[&_.combobox-pill]:bg-[#727272] dark:[&_.combobox-pill]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] [&_.combobox-trigger]:border-[#282828] [&_.combobox-trigger]:bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:[&_.combobox-trigger]:border-[#E8E8E8] dark:[&_.combobox-trigger]:bg-[#4B4B4B]",
-      "[&_.combobox-dropdown]:bg-[#F3F3F3] [&_.combobox-dropdown]:border-[#282828]",
-      "dark:[&_.combobox-dropdown]:bg-[#4B4B4B] dark:[&_.combobox-dropdown]:border-[#E8E8E8]",
-      "hover:[&_.combobox-option]:bg-[#282828] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#E8E8E8] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#282828] dark:[&_.combobox-search-input]:border-[#E8E8E8]",
-      "[&_.combobox-search-input]:text-[#282828] dark:[&_.combobox-search-input]:text-[#E8E8E8]",
-      "[&_.combobox-search-input]:placeholder-[#282828] dark:[&_.combobox-search-input]:placeholder-[#E8E8E8]",
-      "[&_.combobox-pill]:bg-[#282828] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#E8E8E8] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] [&_.combobox-trigger]:border-[#016974] [&_.combobox-trigger]:bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:[&_.combobox-trigger]:border-[#77D5E3] dark:[&_.combobox-trigger]:bg-[#002D33]",
-      "[&_.combobox-dropdown]:bg-[#E2F8FB] [&_.combobox-dropdown]:border-[#016974]",
-      "dark:[&_.combobox-dropdown]:bg-[#002D33] dark:[&_.combobox-dropdown]:border-[#77D5E3]",
-      "hover:[&_.combobox-option]:bg-[#016974] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#77D5E3] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#016974] dark:[&_.combobox-search-input]:border-[#77D5E3]",
-      "[&_.combobox-search-input]:text-[#016974] dark:[&_.combobox-search-input]:text-[#77D5E3]",
-      "[&_.combobox-search-input]:placeholder-[#016974] dark:[&_.combobox-search-input]:placeholder-[#77D5E3]",
-      "[&_.combobox-pill]:bg-[#016974] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#77D5E3] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] [&_.combobox-trigger]:border-[#175BCC] [&_.combobox-trigger]:bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:[&_.combobox-trigger]:border-[#A9C9FF] dark:[&_.combobox-trigger]:bg-[#002661]",
-      "[&_.combobox-dropdown]:bg-[#EFF4FE] [&_.combobox-dropdown]:border-[#175BCC]",
-      "dark:[&_.combobox-dropdown]:bg-[#002661] dark:[&_.combobox-dropdown]:border-[#A9C9FF]",
-      "hover:[&_.combobox-option]:bg-[#175BCC] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#A9C9FF] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#175BCC] dark:[&_.combobox-search-input]:border-[#A9C9FF]",
-      "[&_.combobox-search-input]:text-[#175BCC] dark:[&_.combobox-search-input]:text-[#A9C9FF]",
-      "[&_.combobox-search-input]:placeholder-[#175BCC] dark:[&_.combobox-search-input]:placeholder-[#A9C9FF]",
-      "[&_.combobox-pill]:bg-[#175BCC] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#A9C9FF] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] [&_.combobox-trigger]:border-[#166C3B] [&_.combobox-trigger]:bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:[&_.combobox-trigger]:border-[#7FD99A] dark:[&_.combobox-trigger]:bg-[#002F14]",
-      "[&_.combobox-dropdown]:bg-[#EAF6ED] [&_.combobox-dropdown]:border-[#166C3B]",
-      "dark:[&_.combobox-dropdown]:bg-[#002F14] dark:[&_.combobox-dropdown]:border-[#7FD99A]",
-      "hover:[&_.combobox-option]:bg-[#175BCC] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#A9C9FF] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#166C3B] dark:[&_.combobox-search-input]:border-[#7FD99A]",
-      "[&_.combobox-search-input]:text-[#166C3B] dark:[&_.combobox-search-input]:text-[#7FD99A]",
-      "[&_.combobox-search-input]:placeholder-[#166C3B] dark:[&_.combobox-search-input]:placeholder-[#7FD99A]",
-      "[&_.combobox-pill]:bg-[#175BCC] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#A9C9FF] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] [&_.combobox-trigger]:border-[#976A01] [&_.combobox-trigger]:bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:[&_.combobox-trigger]:border-[#FDD067] dark:[&_.combobox-trigger]:bg-[#322300]",
-      "[&_.combobox-dropdown]:bg-[#FFF7E6] [&_.combobox-dropdown]:border-[#976A01]",
-      "dark:[&_.combobox-dropdown]:bg-[#322300] dark:[&_.combobox-dropdown]:border-[#FDD067]",
-      "hover:[&_.combobox-option]:bg-[#976A01] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#FDD067] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#976A01] dark:[&_.combobox-search-input]:border-[#FDD067]",
-      "[&_.combobox-search-input]:text-[#976A01] dark:[&_.combobox-search-input]:text-[#FDD067]",
-      "[&_.combobox-search-input]:placeholder-[#976A01] dark:[&_.combobox-search-input]:placeholder-[#FDD067]",
-      "[&_.combobox-pill]:bg-[#976A01] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#FDD067] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] [&_.combobox-trigger]:border-[#BB032A] [&_.combobox-trigger]:bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:[&_.combobox-trigger]:border-[#FFB2AB] dark:[&_.combobox-trigger]:bg-[#520810]",
-      "[&_.combobox-dropdown]:bg-[#FFF0EE] [&_.combobox-dropdown]:border-[#BB032A]",
-      "dark:[&_.combobox-dropdown]:bg-[#520810] dark:[&_.combobox-dropdown]:border-[#FFB2AB]",
-      "hover:[&_.combobox-option]:bg-[#BB032A] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#FFB2AB] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#BB032A] dark:[&_.combobox-search-input]:border-[#FFB2AB]",
-      "[&_.combobox-search-input]:text-[#BB032A] dark:[&_.combobox-search-input]:text-[#FFB2AB]",
-      "[&_.combobox-search-input]:placeholder-[#BB032A] dark:[&_.combobox-search-input]:placeholder-[#FFB2AB]",
-      "[&_.combobox-pill]:bg-[#BB032A] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#FFB2AB] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] [&_.combobox-trigger]:border-[#0B84BA] [&_.combobox-trigger]:bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:[&_.combobox-trigger]:border-[#6EC9F2] dark:[&_.combobox-trigger]:bg-[#03212F]",
-      "[&_.combobox-dropdown]:bg-[#E7F6FD] [&_.combobox-dropdown]:border-[#0B84BA]",
-      "dark:[&_.combobox-dropdown]:bg-[#03212F] dark:[&_.combobox-dropdown]:border-[#6EC9F2]",
-      "hover:[&_.combobox-option]:bg-[#0B84BA] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#6EC9F2] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#0B84BA] dark:[&_.combobox-search-input]:border-[#6EC9F2]",
-      "[&_.combobox-search-input]:text-[#0B84BA] dark:[&_.combobox-search-input]:text-[#6EC9F2]",
-      "[&_.combobox-search-input]:placeholder-[#0B84BA] dark:[&_.combobox-search-input]:placeholder-[#6EC9F2]",
-      "[&_.combobox-pill]:bg-[#0B84BA] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#6EC9F2] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] [&_.combobox-trigger]:border-[#653C94] [&_.combobox-trigger]:bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:[&_.combobox-trigger]:border-[#CBA2FA] dark:[&_.combobox-trigger]:bg-[#221431]",
-      "[&_.combobox-dropdown]:bg-[#F6F0FE] [&_.combobox-dropdown]:border-[#653C94]",
-      "dark:[&_.combobox-dropdown]:bg-[#03212F] dark:[&_.combobox-dropdown]:border-[#CBA2FA]",
-      "hover:[&_.combobox-option]:bg-[#221431] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#CBA2FA] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#653C94] dark:[&_.combobox-search-input]:border-[#CBA2FA]",
-      "[&_.combobox-search-input]:text-[#653C94] dark:[&_.combobox-search-input]:text-[#CBA2FA]",
-      "[&_.combobox-search-input]:placeholder-[#653C94] dark:[&_.combobox-search-input]:placeholder-[#CBA2FA]",
-      "[&_.combobox-pill]:bg-[#221431] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#CBA2FA] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] [&_.combobox-trigger]:border-[#7E4B2A] [&_.combobox-trigger]:bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:[&_.combobox-trigger]:border-[#E4B190] dark:[&_.combobox-trigger]:bg-[#2A190E]",
-      "[&_.combobox-dropdown]:bg-[#FBF2ED] [&_.combobox-dropdown]:border-[#7E4B2A]",
-      "dark:[&_.combobox-dropdown]:bg-[#2A190E] dark:[&_.combobox-dropdown]:border-[#E4B190]",
-      "hover:[&_.combobox-option]:bg-[#7E4B2A] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#E4B190] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#7E4B2A] dark:[&_.combobox-search-input]:border-[#E4B190]",
-      "[&_.combobox-search-input]:text-[#7E4B2A] dark:[&_.combobox-search-input]:text-[#E4B190]",
-      "[&_.combobox-search-input]:placeholder-[#7E4B2A] dark:[&_.combobox-search-input]:placeholder-[#E4B190]",
-      "[&_.combobox-pill]:bg-[#7E4B2A] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#E4B190] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] [&_.combobox-trigger]:border-[#727272] [&_.combobox-trigger]:bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:[&_.combobox-trigger]:border-[#BBBBBB] dark:[&_.combobox-trigger]:bg-[#4B4B4B]",
-      "[&_.combobox-dropdown]:bg-[#F3F3F3] [&_.combobox-dropdown]:border-[#727272]",
-      "dark:[&_.combobox-dropdown]:bg-[#4B4B4B] dark:[&_.combobox-dropdown]:border-[#BBBBBB]",
-      "hover:[&_.combobox-option]:bg-[#727272] hover:[&_.combobox-option]:text-white",
-      "dark:hover:[&_.combobox-option]:bg-[#BBBBBB] dark:hover:[&_.combobox-option]:text-black",
-      "[&_.combobox-search-input]:border-[#727272] dark:[&_.combobox-search-input]:border-[#BBBBBB]",
-      "[&_.combobox-search-input]:text-[#727272] dark:[&_.combobox-search-input]:text-[#BBBBBB]",
-      "[&_.combobox-search-input]:placeholder-[#727272] dark:[&_.combobox-search-input]:placeholder-[#BBBBBB]",
-      "[&_.combobox-pill]:bg-[#727272] [&_.combobox-pill]:text-white",
-      "dark:[&_.combobox-pill]:bg-[#BBBBBB] dark:[&_.combobox-pill]:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/core_components.ex b/lib/geo_web/components/core_components.ex
deleted file mode 100644
index 6fc642e..0000000
--- a/lib/geo_web/components/core_components.ex
+++ /dev/null
@@ -1,676 +0,0 @@
-defmodule GeoWeb.CoreComponents do
-  @moduledoc """
-  Provides core UI components.
-
-  At first glance, this module may seem daunting, but its goal is to provide
-  core building blocks for your application, such as modals, tables, and
-  forms. The components consist mostly of markup and are well-documented
-  with doc strings and declarative assigns. You may customize and style
-  them in any way you want, based on your application growth and needs.
-
-  The default components use Tailwind CSS, a utility-first CSS framework.
-  See the [Tailwind CSS documentation](https://tailwindcss.com) to learn
-  how to customize them or feel free to swap in another framework altogether.
-
-  Icons are provided by [heroicons](https://heroicons.com). See `icon/1` for usage.
-  """
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-
-  alias Phoenix.LiveView.JS
-
-  @doc """
-  Renders a modal.
-
-  ## Examples
-
-      <.modal id="confirm-modal">
-        This is a modal.
-      </.modal>
-
-  JS commands may be passed to the `:on_cancel` to configure
-  the closing/cancel event, for example:
-
-      <.modal id="confirm" on_cancel={JS.navigate(~p"/posts")}>
-        This is another modal.
-      </.modal>
-
-  """
-  attr :id, :string, required: true
-  attr :show, :boolean, default: false
-  attr :on_cancel, JS, default: %JS{}
-  slot :inner_block, required: true
-
-  def modal(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      phx-mounted={@show && show_modal(@id)}
-      phx-remove={hide_modal(@id)}
-      data-cancel={JS.exec(@on_cancel, "phx-remove")}
-      class="relative z-50 hidden"
-    >
-      <div id={"#{@id}-bg"} class="bg-zinc-50/90 fixed inset-0 transition-opacity" aria-hidden="true" />
-      <div
-        class="fixed inset-0 overflow-y-auto"
-        aria-labelledby={"#{@id}-title"}
-        aria-describedby={"#{@id}-description"}
-        role="dialog"
-        aria-modal="true"
-        tabindex="0"
-      >
-        <div class="flex min-h-full items-center justify-center">
-          <div class="w-full max-w-3xl p-4 sm:p-6 lg:py-8">
-            <.focus_wrap
-              id={"#{@id}-container"}
-              phx-window-keydown={JS.exec("data-cancel", to: "##{@id}")}
-              phx-key="escape"
-              phx-click-away={JS.exec("data-cancel", to: "##{@id}")}
-              class="shadow-zinc-700/10 ring-zinc-700/10 relative hidden rounded-2xl bg-white p-14 shadow-lg ring-1 transition"
-            >
-              <div class="absolute top-6 right-5">
-                <button
-                  phx-click={JS.exec("data-cancel", to: "##{@id}")}
-                  type="button"
-                  class="-m-3 flex-none p-3 opacity-20 hover:opacity-40"
-                  aria-label={gettext("close")}
-                >
-                  <.icon name="hero-x-mark-solid" class="h-5 w-5" />
-                </button>
-              </div>
-              <div id={"#{@id}-content"}>
-                {render_slot(@inner_block)}
-              </div>
-            </.focus_wrap>
-          </div>
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders flash notices.
-
-  ## Examples
-
-      <.flash kind={:info} flash={@flash} />
-      <.flash kind={:info} phx-mounted={show("#flash")}>Welcome Back!</.flash>
-  """
-  attr :id, :string, doc: "the optional id of flash container"
-  attr :flash, :map, default: %{}, doc: "the map of flash messages to display"
-  attr :title, :string, default: nil
-  attr :kind, :atom, values: [:info, :error], doc: "used for styling and flash lookup"
-  attr :rest, :global, doc: "the arbitrary HTML attributes to add to the flash container"
-
-  slot :inner_block, doc: "the optional inner block that renders the flash message"
-
-  def flash(assigns) do
-    assigns = assign_new(assigns, :id, fn -> "flash-#{assigns.kind}" end)
-
-    ~H"""
-    <div
-      :if={msg = render_slot(@inner_block) || Phoenix.Flash.get(@flash, @kind)}
-      id={@id}
-      phx-click={JS.push("lv:clear-flash", value: %{key: @kind}) |> hide("##{@id}")}
-      role="alert"
-      class={[
-        "fixed top-2 right-2 mr-2 w-80 sm:w-96 z-50 rounded-lg p-3 ring-1",
-        @kind == :info && "bg-emerald-50 text-emerald-800 ring-emerald-500 fill-cyan-900",
-        @kind == :error && "bg-rose-50 text-rose-900 shadow-md ring-rose-500 fill-rose-900"
-      ]}
-      {@rest}
-    >
-      <p :if={@title} class="flex items-center gap-1.5 text-sm font-semibold leading-6">
-        <.icon :if={@kind == :info} name="hero-information-circle-mini" class="h-4 w-4" />
-        <.icon :if={@kind == :error} name="hero-exclamation-circle-mini" class="h-4 w-4" />
-        {@title}
-      </p>
-      <p class="mt-2 text-sm leading-5">{msg}</p>
-      <button type="button" class="group absolute top-1 right-1 p-2" aria-label={gettext("close")}>
-        <.icon name="hero-x-mark-solid" class="h-5 w-5 opacity-40 group-hover:opacity-70" />
-      </button>
-    </div>
-    """
-  end
-
-  @doc """
-  Shows the flash group with standard titles and content.
-
-  ## Examples
-
-      <.flash_group flash={@flash} />
-  """
-  attr :flash, :map, required: true, doc: "the map of flash messages"
-  attr :id, :string, default: "flash-group", doc: "the optional id of flash container"
-
-  def flash_group(assigns) do
-    ~H"""
-    <div id={@id}>
-      <.flash kind={:info} title={gettext("Success!")} flash={@flash} />
-      <.flash kind={:error} title={gettext("Error!")} flash={@flash} />
-      <.flash
-        id="client-error"
-        kind={:error}
-        title={gettext("We can't find the internet")}
-        phx-disconnected={show(".phx-client-error #client-error")}
-        phx-connected={hide("#client-error")}
-        hidden
-      >
-        {gettext("Attempting to reconnect")}
-        <.icon name="hero-arrow-path" class="ml-1 h-3 w-3 animate-spin" />
-      </.flash>
-
-      <.flash
-        id="server-error"
-        kind={:error}
-        title={gettext("Something went wrong!")}
-        phx-disconnected={show(".phx-server-error #server-error")}
-        phx-connected={hide("#server-error")}
-        hidden
-      >
-        {gettext("Hang in there while we get back on track")}
-        <.icon name="hero-arrow-path" class="ml-1 h-3 w-3 animate-spin" />
-      </.flash>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a simple form.
-
-  ## Examples
-
-      <.simple_form for={@form} phx-change="validate" phx-submit="save">
-        <.input field={@form[:email]} label="Email"/>
-        <.input field={@form[:username]} label="Username" />
-        <:actions>
-          <.button>Save</.button>
-        </:actions>
-      </.simple_form>
-  """
-  attr :for, :any, required: true, doc: "the data structure for the form"
-  attr :as, :any, default: nil, doc: "the server side parameter to collect all input under"
-
-  attr :rest, :global,
-    include: ~w(autocomplete name rel action enctype method novalidate target multipart),
-    doc: "the arbitrary HTML attributes to apply to the form tag"
-
-  slot :inner_block, required: true
-  slot :actions, doc: "the slot for form actions, such as a submit button"
-
-  def simple_form(assigns) do
-    ~H"""
-    <.form :let={f} for={@for} as={@as} {@rest}>
-      <div class="mt-10 space-y-8 bg-white">
-        {render_slot(@inner_block, f)}
-        <div :for={action <- @actions} class="mt-2 flex items-center justify-between gap-6">
-          {render_slot(action, f)}
-        </div>
-      </div>
-    </.form>
-    """
-  end
-
-  @doc """
-  Renders a button.
-
-  ## Examples
-
-      <.button>Send!</.button>
-      <.button phx-click="go" class="ml-2">Send!</.button>
-  """
-  attr :type, :string, default: nil
-  attr :class, :string, default: nil
-  attr :rest, :global, include: ~w(disabled form name value)
-
-  slot :inner_block, required: true
-
-  def button(assigns) do
-    ~H"""
-    <button
-      type={@type}
-      class={[
-        "phx-submit-loading:opacity-75 rounded-lg bg-zinc-900 hover:bg-zinc-700 py-2 px-3",
-        "text-sm font-semibold leading-6 text-white active:text-white/80",
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </button>
-    """
-  end
-
-  @doc """
-  Renders an input with label and error messages.
-
-  A `Phoenix.HTML.FormField` may be passed as argument,
-  which is used to retrieve the input name, id, and values.
-  Otherwise all attributes may be passed explicitly.
-
-  ## Types
-
-  This function accepts all HTML input types, considering that:
-
-    * You may also set `type="select"` to render a `<select>` tag
-
-    * `type="checkbox"` is used exclusively to render boolean values
-
-    * For live file uploads, see `Phoenix.Component.live_file_input/1`
-
-  See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
-  for more information. Unsupported types, such as hidden and radio,
-  are best written directly in your templates.
-
-  ## Examples
-
-      <.input field={@form[:email]} type="email" />
-      <.input name="my-input" errors={["oh no!"]} />
-  """
-  attr :id, :any, default: nil
-  attr :name, :any
-  attr :label, :string, default: nil
-  attr :value, :any
-
-  attr :type, :string,
-    default: "text",
-    values: ~w(checkbox color date datetime-local email file month number password
-               range search select tel text textarea time url week)
-
-  attr :field, Phoenix.HTML.FormField,
-    doc: "a form field struct retrieved from the form, for example: @form[:email]"
-
-  attr :errors, :list, default: []
-  attr :checked, :boolean, doc: "the checked flag for checkbox inputs"
-  attr :prompt, :string, default: nil, doc: "the prompt for select inputs"
-  attr :options, :list, doc: "the options to pass to Phoenix.HTML.Form.options_for_select/2"
-  attr :multiple, :boolean, default: false, doc: "the multiple flag for select inputs"
-
-  attr :rest, :global,
-    include: ~w(accept autocomplete capture cols disabled form list max maxlength min minlength
-                multiple pattern placeholder readonly required rows size step)
-
-  def input(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> if assigns.multiple, do: field.name <> "[]", else: field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> input()
-  end
-
-  def input(%{type: "checkbox"} = assigns) do
-    assigns =
-      assign_new(assigns, :checked, fn ->
-        Phoenix.HTML.Form.normalize_value("checkbox", assigns[:value])
-      end)
-
-    ~H"""
-    <div>
-      <label class="flex items-center gap-4 text-sm leading-6 text-zinc-600">
-        <input type="hidden" name={@name} value="false" disabled={@rest[:disabled]} />
-        <input
-          type="checkbox"
-          id={@id}
-          name={@name}
-          value="true"
-          checked={@checked}
-          class="rounded border-zinc-300 text-zinc-900 focus:ring-0"
-          {@rest}
-        />
-        {@label}
-      </label>
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def input(%{type: "select"} = assigns) do
-    ~H"""
-    <div>
-      <.label for={@id}>{@label}</.label>
-      <select
-        id={@id}
-        name={@name}
-        class="mt-2 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm"
-        multiple={@multiple}
-        {@rest}
-      >
-        <option :if={@prompt} value="">{@prompt}</option>
-        {Phoenix.HTML.Form.options_for_select(@options, @value)}
-      </select>
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def input(%{type: "textarea"} = assigns) do
-    ~H"""
-    <div>
-      <.label for={@id}>{@label}</.label>
-      <textarea
-        id={@id}
-        name={@name}
-        class={[
-          "mt-2 block w-full rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6 min-h-[6rem]",
-          @errors == [] && "border-zinc-300 focus:border-zinc-400",
-          @errors != [] && "border-rose-400 focus:border-rose-400"
-        ]}
-        {@rest}
-      >{Phoenix.HTML.Form.normalize_value("textarea", @value)}</textarea>
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  # All other inputs text, datetime-local, url, password, etc. are handled here...
-  def input(assigns) do
-    ~H"""
-    <div>
-      <.label for={@id}>{@label}</.label>
-      <input
-        type={@type}
-        name={@name}
-        id={@id}
-        value={Phoenix.HTML.Form.normalize_value(@type, @value)}
-        class={[
-          "mt-2 block w-full rounded-lg text-zinc-900 focus:ring-0 sm:text-sm sm:leading-6",
-          @errors == [] && "border-zinc-300 focus:border-zinc-400",
-          @errors != [] && "border-rose-400 focus:border-rose-400"
-        ]}
-        {@rest}
-      />
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a label.
-  """
-  attr :for, :string, default: nil
-  slot :inner_block, required: true
-
-  def label(assigns) do
-    ~H"""
-    <label for={@for} class="block text-sm font-semibold leading-6 text-zinc-800">
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc """
-  Generates a generic error message.
-  """
-  slot :inner_block, required: true
-
-  def error(assigns) do
-    ~H"""
-    <p class="mt-3 flex gap-3 text-sm leading-6 text-rose-600">
-      <.icon name="hero-exclamation-circle-mini" class="mt-0.5 h-5 w-5 flex-none" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  @doc """
-  Renders a header with title.
-  """
-  attr :class, :string, default: nil
-
-  slot :inner_block, required: true
-  slot :subtitle
-  slot :actions
-
-  def header(assigns) do
-    ~H"""
-    <header class={[@actions != [] && "flex items-center justify-between gap-6", @class]}>
-      <div>
-        <h1 class="text-lg font-semibold leading-8 text-zinc-800">
-          {render_slot(@inner_block)}
-        </h1>
-        <p :if={@subtitle != []} class="mt-2 text-sm leading-6 text-zinc-600">
-          {render_slot(@subtitle)}
-        </p>
-      </div>
-      <div class="flex-none">{render_slot(@actions)}</div>
-    </header>
-    """
-  end
-
-  @doc ~S"""
-  Renders a table with generic styling.
-
-  ## Examples
-
-      <.table id="users" rows={@users}>
-        <:col :let={user} label="id">{user.id}</:col>
-        <:col :let={user} label="username">{user.username}</:col>
-      </.table>
-  """
-  attr :id, :string, required: true
-  attr :rows, :list, required: true
-  attr :row_id, :any, default: nil, doc: "the function for generating the row id"
-  attr :row_click, :any, default: nil, doc: "the function for handling phx-click on each row"
-
-  attr :row_item, :any,
-    default: &Function.identity/1,
-    doc: "the function for mapping each row before calling the :col and :action slots"
-
-  slot :col, required: true do
-    attr :label, :string
-  end
-
-  slot :action, doc: "the slot for showing user actions in the last table column"
-
-  def table(assigns) do
-    assigns =
-      with %{rows: %Phoenix.LiveView.LiveStream{}} <- assigns do
-        assign(assigns, row_id: assigns.row_id || fn {id, _item} -> id end)
-      end
-
-    ~H"""
-    <div class="overflow-y-auto px-4 sm:overflow-visible sm:px-0">
-      <table class="w-[40rem] mt-11 sm:w-full">
-        <thead class="text-sm text-left leading-6 text-zinc-500">
-          <tr>
-            <th :for={col <- @col} class="p-0 pb-4 pr-6 font-normal">{col[:label]}</th>
-            <th :if={@action != []} class="relative p-0 pb-4">
-              <span class="sr-only">{gettext("Actions")}</span>
-            </th>
-          </tr>
-        </thead>
-        <tbody
-          id={@id}
-          phx-update={match?(%Phoenix.LiveView.LiveStream{}, @rows) && "stream"}
-          class="relative divide-y divide-zinc-100 border-t border-zinc-200 text-sm leading-6 text-zinc-700"
-        >
-          <tr :for={row <- @rows} id={@row_id && @row_id.(row)} class="group hover:bg-zinc-50">
-            <td
-              :for={{col, i} <- Enum.with_index(@col)}
-              phx-click={@row_click && @row_click.(row)}
-              class={["relative p-0", @row_click && "hover:cursor-pointer"]}
-            >
-              <div class="block py-4 pr-6">
-                <span class="absolute -inset-y-px right-0 -left-4 group-hover:bg-zinc-50 sm:rounded-l-xl" />
-                <span class={["relative", i == 0 && "font-semibold text-zinc-900"]}>
-                  {render_slot(col, @row_item.(row))}
-                </span>
-              </div>
-            </td>
-            <td :if={@action != []} class="relative w-14 p-0">
-              <div class="relative whitespace-nowrap py-4 text-right text-sm font-medium">
-                <span class="absolute -inset-y-px -right-4 left-0 group-hover:bg-zinc-50 sm:rounded-r-xl" />
-                <span
-                  :for={action <- @action}
-                  class="relative ml-4 font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
-                >
-                  {render_slot(action, @row_item.(row))}
-                </span>
-              </div>
-            </td>
-          </tr>
-        </tbody>
-      </table>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a data list.
-
-  ## Examples
-
-      <.list>
-        <:item title="Title">{@post.title}</:item>
-        <:item title="Views">{@post.views}</:item>
-      </.list>
-  """
-  slot :item, required: true do
-    attr :title, :string, required: true
-  end
-
-  def list(assigns) do
-    ~H"""
-    <div class="mt-14">
-      <dl class="-my-4 divide-y divide-zinc-100">
-        <div :for={item <- @item} class="flex gap-4 py-4 text-sm leading-6 sm:gap-8">
-          <dt class="w-1/4 flex-none text-zinc-500">{item.title}</dt>
-          <dd class="text-zinc-700">{render_slot(item)}</dd>
-        </div>
-      </dl>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a back navigation link.
-
-  ## Examples
-
-      <.back navigate={~p"/posts"}>Back to posts</.back>
-  """
-  attr :navigate, :any, required: true
-  slot :inner_block, required: true
-
-  def back(assigns) do
-    ~H"""
-    <div class="mt-16">
-      <.link
-        navigate={@navigate}
-        class="text-sm font-semibold leading-6 text-zinc-900 hover:text-zinc-700"
-      >
-        <.icon name="hero-arrow-left-solid" class="h-3 w-3" />
-        {render_slot(@inner_block)}
-      </.link>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a [Heroicon](https://heroicons.com).
-
-  Heroicons come in three styles – outline, solid, and mini.
-  By default, the outline style is used, but solid and mini may
-  be applied by using the `-solid` and `-mini` suffix.
-
-  You can customize the size and colors of the icons by setting
-  width, height, and background color classes.
-
-  Icons are extracted from the `deps/heroicons` directory and bundled within
-  your compiled app.css by the plugin in your `assets/tailwind.config.js`.
-
-  ## Examples
-
-      <.icon name="hero-x-mark-solid" />
-      <.icon name="hero-arrow-path" class="ml-1 w-3 h-3 animate-spin" />
-  """
-  attr :name, :string, required: true
-  attr :class, :string, default: nil
-
-  def icon(%{name: "hero-" <> _} = assigns) do
-    ~H"""
-    <span class={[@name, @class]} />
-    """
-  end
-
-  ## JS Commands
-
-  def show(js \\ %JS{}, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  def hide(js \\ %JS{}, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-
-  def show_modal(js \\ %JS{}, id) when is_binary(id) do
-    js
-    |> JS.show(to: "##{id}")
-    |> JS.show(
-      to: "##{id}-bg",
-      time: 300,
-      transition: {"transition-all transform ease-out duration-300", "opacity-0", "opacity-100"}
-    )
-    |> show("##{id}-container")
-    |> JS.add_class("overflow-hidden", to: "body")
-    |> JS.focus_first(to: "##{id}-content")
-  end
-
-  def hide_modal(js \\ %JS{}, id) do
-    js
-    |> JS.hide(
-      to: "##{id}-bg",
-      transition: {"transition-all transform ease-in duration-200", "opacity-100", "opacity-0"}
-    )
-    |> hide("##{id}-container")
-    |> JS.hide(to: "##{id}", transition: {"block", "block", "hidden"})
-    |> JS.remove_class("overflow-hidden", to: "body")
-    |> JS.pop_focus()
-  end
-
-  @doc """
-  Translates an error message using gettext.
-  """
-  def translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-
-  @doc """
-  Translates the errors for a field from a keyword list of errors.
-  """
-  def translate_errors(errors, field) when is_list(errors) do
-    for {^field, {msg, opts}} <- errors, do: translate_error({msg, opts})
-  end
-end
diff --git a/lib/geo_web/components/date_time_field.ex b/lib/geo_web/components/date_time_field.ex
deleted file mode 100644
index c7ac2b8..0000000
--- a/lib/geo_web/components/date_time_field.ex
+++ /dev/null
@@ -1,1102 +0,0 @@
-defmodule GeoWeb.Components.DateTimeField do
-  @moduledoc """
-  The `GeoWeb.Components.DateTimeField` module provides a reusable component for rendering
-  various types of date and time inputs in Phoenix applications.
-
-  It includes options for customization, validation, and styling, supporting different
-  use cases in forms and interactive interfaces.
-
-  ## Features:
-  - Supports multiple input types: `date`, `datetime-local`, `time`, `week`, and `month`.
-  - Configurable appearance with various styles, border options, and rounded corners.
-  - Flexible error handling with the ability to display custom error messages and icons.
-  - Optional floating label support, allowing labels to animate based on user interaction.
-  - Integration with Phoenix form fields for seamless form data management.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `date_time_field` component is used to create a customizable date, time, or datetime input field with various options such as `type`, `color`, and `size`. It supports floating labels, descriptions, and error messages, making it suitable for form validation and enhanced UX.
-
-  ## Examples
-
-  ```elixir
-  <.date_time_field name="name" type="date" space="small" color="dark" floating="outer"/>
-  <.date_time_field name="name" type="time" space="small" color="danger" floating="outer"/>
-  <.date_time_field name="name1" type="week" space="small" color="success" floating="outer"/>
-
-  <.date_time_field
-    name="name"
-    type="month"
-    space="small"
-    color="warning"
-    description="This is description"
-    label="This is label month"
-    floating="outer"
-  />
-
-  <.date_time_field
-    name="name"
-    type="datetime-local"
-    space="small"
-    color="primary"
-    description="This is description"
-    label="This is label datetime-local"
-    floating="outer"
-  />
-
-  <.date_time_field
-    name="name"
-    type="week"
-    space="large"
-    color="secondary"
-    description="This is description"
-    label="This is label week"
-    size="medium"
-  />
-
-  <.date_time_field
-    name="name"
-    type="date"
-    space="large"
-    color="misc"
-    description="This is description"
-    label="This is label date"
-    size="small"
-  />
-
-  <.date_time_field
-    name="name"
-    type="month"
-    space="large"
-    color="dawn"
-    description="This is description"
-    label="This is label month"
-    size="large"
-  />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-
-  attr :type, :string,
-    values: ["date", "datetime-local", "time", "week", "month"],
-    default: "date",
-    doc: "Determines type of input"
-
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(disabled form min max readonly required step autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec date_time_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def date_time_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> date_time_field()
-  end
-
-  def date_time_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.date-time-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-
-      <div class={[
-        "date-time-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "date-time-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type={@type}
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def date_time_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.date-time-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div
-        :if={@label || @description}
-        class={["date-time-label-wrapper", @description_wrapper_class]}
-      >
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "date-time-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "date-time-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type={@type}
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small") do
-    [
-      "[&_.date-time-field-wrapper_input]:h-8 [&_.date-time-field-wrapper>.date-time-field-icon]:size-3.5"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&_.date-time-field-wrapper_input]:h-9 [&_.date-time-field-wrapper>.date-time-field-icon]:size-4"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&_.date-time-field-wrapper_input]:h-10 [&_.date-time-field-wrapper>.date-time-field-icon]:size-5"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&_.date-time-field-wrapper_input]:h-11 [&_.date-time-field-wrapper>.date-time-field-icon]:size-6"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&_.date-time-field-wrapper_input]:h-12 [&_.date-time-field-wrapper>.date-time-field-icon]:size-7"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.date-time-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.date-time-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.date-time-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.date-time-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.date-time-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.date-time-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.date-time-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.date-time-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.date-time-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.date-time-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.date-time-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.date-time-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-white",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#27272a]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.date-time-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#DDDDDD]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#007F8C]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#01B8CA]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#266EF1]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#6DAAFB]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#0E8345]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#06C167]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#CA8D01]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#FDC034]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#CA8D01]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#FC7F79]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#0B84BA]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#3EB7ED]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#8750C5]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#BA83F9]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#A86438]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#DB976B]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#868686]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#A6A6A6]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#868686] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-white dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.date-time-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.date-time-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.date-time-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#DDDDDD]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#007F8C]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#01B8CA]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#266EF1]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#6DAAFB]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#0E8345]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#06C167]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FDC034]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#DE1135]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FC7F79]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#3EB7ED]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#8750C5]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#BA83F9]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#A86438]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#DB976B]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#868686]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#A6A6A6]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#868686] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.date-time-field-wrapper]:bg-[#282828] text-[#282828] [&_.date-time-field-wrapper]:text-white",
-      "[&_.date-time-field-wrapper.date-time-field-error]:border-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white focus-within:[&_.date-time-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.date-time-field-wrapper]:bg-white [&_.date-time-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.date-time-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#282828]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#868686]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#016974]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#77D5E3]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#175BCC]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#002661]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#A9C9FF]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#166C3B]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#002F14]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#7FD99A]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#976A01]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#322300]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#FDD067]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#BB032A]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#520810]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#FFB2AB]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#0B84BA]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#03212F]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#6EC9F2]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#653C94]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#221431]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#CBA2FA]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#7E4B2A]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#2A190E]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#E4B190]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#727272]",
-      "[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:border-[#BBBBBB]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#868686] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.date-time-field-wrapper]:bg-[#282828] text-[#282828] [&_.date-time-field-wrapper]:border-[#727272] text-white",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white focus-within:[&_.date-time-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.date-time-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#DDDDDD]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#007F8C]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#01B8CA]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#01B8CA]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#266EF1]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#6DAAFB]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#0E8345]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#06C167]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#06C167]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FDC034]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FDC034]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#DE1135]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#FC7F79]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#FC7F79]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#3EB7ED]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#8750C5]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#BA83F9]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#BA83F9]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#A86438]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#DB976B]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#DB976B]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#868686]",
-      "dark:[&_.date-time-field-wrapper:not(:has(.date-time-field-error))]:bg-[#A6A6A6]",
-      "[&_.date-time-field-wrapper.date-time-field-error]:bg-rose-700",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-white dark:[&_.date-time-field-wrapper>input]:placeholder:text-black",
-      "[&_.date-time-field-wrapper>input]:text-white dark:[&_.date-time-field-wrapper>input]:text-black",
-      "focus-within:[&_.date-time-field-wrapper]:ring-[#868686] dark:focus-within:[&_.date-time-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.date-time-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.date-time-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.date-time-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.date-time-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.date-time-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.date-time-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.date-time-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.date-time-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/device_mockup.ex b/lib/geo_web/components/device_mockup.ex
deleted file mode 100644
index adc6fcb..0000000
--- a/lib/geo_web/components/device_mockup.ex
+++ /dev/null
@@ -1,337 +0,0 @@
-defmodule GeoWeb.Components.DeviceMockup do
-  @moduledoc """
-  The `GeoWeb.Components.DeviceMockup` module provides a customizable component for displaying
-  various device mockups such as iPhone, Android, Watch, Laptop, iPad, and iMac.
-
-  It supports different color themes and includes options for adding images or custom
-  content to represent device screens.
-
-  ## Features:
-  - Supports multiple device types: `iphone`, `android`, `watch`, `laptop`, `ipad`, and `imac`.
-  - Customizable color themes with various pre-defined options.
-  - Flexible layout options, allowing you to include images or custom content within the device frame.
-  - Easily integrable with other components for displaying responsive media content or
-  application previews.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Image, only: [image: 1]
-
-  @doc """
-  The `device_mockup` component renders a responsive device mockup for various devices like
-  `iphone`, `android`, `ipad`, `laptop`, and `imac`.
-
-  It supports different colors, images, and slot-based content to simulate device screens.
-
-  ## Examples
-
-  ```elixir
-  # iPhone mockup with image
-  <.device_mockup image="https://example.com/mockup-2-light.png" />
-
-  # Watch mockup with custom image
-  <.device_mockup image="https://example.com/watch-screen-image.png" type="watch"/>
-
-  # iPad mockup with image and additional content
-  <.device_mockup image="https://example.com/tablet-mockup-image.png" type="ipad">
-    <div class="text-center">This is inside the iPad mockup</div>
-  </.device_mockup>
-
-  # iMac mockup with image and nested content
-  <.device_mockup image="https://example.com/screen-image-imac.png" type="imac">
-    <div class="flex justify-center items-center h-full">iMac Screen Content</div>
-  </.device_mockup>
-
-  # Laptop mockup with content slot
-  <.device_mockup type="laptop"><div class="p-4">Laptop Screen Content Here</div></.device_mockup>
-
-  # Android mockup with image and content
-  <.device_mockup image="https://example.com/mockup-1-light.png" type="android"
-  >
-    <div class="text-center">Android Device Content</div>
-  </.device_mockup>
-
-  # Custom content inside various mockups with color themes
-  <.device_mockup color="primary">
-    <div class="bg-white h-full flex flex-col gap-2 justify-between">
-      <div class="pt-8 pb-2 px-1">
-        Sample text content for primary color theme.
-      </div>
-      <div class="border-t py-2 px-5">
-        <div class="w-full h-7 bg-gray-300 text-gray-500 rounded-lg text-center flex items-center justify-center">
-          mishka.tools
-        </div>
-      </div>
-    </div>
-  </.device_mockup>
-
-  <.device_mockup color="success">
-    <div class="bg-white h-full flex flex-col gap-2 justify-between">
-      <div class="pt-8 pb-2 px-1">
-        Success-themed device content with additional styling.
-      </div>
-      <div class="border-t py-2 px-5">
-        <div class="w-full h-7 bg-gray-300 text-gray-500 rounded-lg text-center flex items-center justify-center">
-          mishka.tools
-        </div>
-      </div>
-    </div>
-  </.device_mockup>
-
-  <.device_mockup color="danger">
-    <div class="bg-white h-full flex flex-col gap-2 justify-between">
-      <div class="pt-8 pb-2 px-1">
-        Danger-themed device mockup with content and styling.
-      </div>
-      <div class="border-t py-2 px-5">
-        <div class="w-full h-7 bg-gray-300 text-gray-500 rounded-lg text-center flex items-center justify-center">
-          mishka.tools
-        </div>
-      </div>
-    </div>
-  </.device_mockup>
-
-  <.device_mockup color="dark">
-    <div class="bg-white h-full flex flex-col gap-2 justify-between">
-      <div class="pt-8 pb-2 px-1">
-        Dark-themed device mockup with content and additional options.
-      </div>
-      <div class="border-t py-2 px-5">
-        <div class="w-full h-7 bg-gray-300 text-gray-500 rounded-lg text-center flex items-center justify-center">
-          mishka.tools
-        </div>
-      </div>
-    </div>
-  </.device_mockup>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :alt, :string, default: nil, doc: "Media link description"
-  attr :type, :string, default: "iphone", doc: "android watch laptop iphone ipad imac"
-  attr :image, :string, default: nil, doc: "Image displayed alongside of an item"
-  attr :image_class, :string, default: nil, doc: "Determines custom class for the image"
-
-  attr :rest, :global,
-    include: ~w(android watch laptop iphone ipad imac),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, doc: "Inner block that renders HEEx content"
-
-  def device_mockup(%{type: "watch"} = assigns) do
-    ~H"""
-    <div class={["w-fit", color_class(@color), @class]}>
-      <div class="mock-base relative mx-auto rounded-t-[2.5rem] h-[63px] max-w-[133px]"></div>
-      <div class="mock-base relative mx-auto border-[10px] rounded-[2.5rem] h-[213px] w-[208px]">
-        <div class="mock-base h-[41px] w-[6px] absolute -end-[16px] top-[40px] rounded-e-lg"></div>
-        <div class="mock-base h-[32px] w-[6px] absolute -end-[16px] top-[88px] rounded-e-lg"></div>
-        <div class="bg-white dark:bg-[#404040] rounded-[2rem] overflow-hidden h-[193px] w-[188px]">
-          <.image
-            :if={!is_nil(@image)}
-            class={@image_class || "h-[193px] w-[188px]"}
-            src={@image}
-            alt={@alt}
-          />
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-      <div class="mock-base relative mx-auto rounded-b-[2.5rem] h-[63px] max-w-[133px]"></div>
-    </div>
-    """
-  end
-
-  def device_mockup(%{type: "android"} = assigns) do
-    ~H"""
-    <div class={["w-fit", color_class(@color), @class]}>
-      <div class="mock-base relative mx-auto border-[14px] rounded-xl h-[600px] w-[300px] shadow-xl">
-        <div class="mock-base w-[148px] h-[18px] top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute">
-        </div>
-        <div class="mock-base h-[32px] w-[3px] absolute -start-[17px] top-[72px] rounded-s-lg"></div>
-        <div class="mock-base h-[46px] w-[3px] absolute -start-[17px] top-[124px] rounded-s-lg"></div>
-        <div class="mock-base h-[46px] w-[3px] absolute -start-[17px] top-[178px] rounded-s-lg"></div>
-        <div class="mock-base h-[64px] w-[3px] absolute -end-[17px] top-[142px] rounded-e-lg"></div>
-        <div class="rounded overflow-hidden w-[272px] h-[572px] bg-white dark:bg-[#404040]">
-          <.image
-            :if={!is_nil(@image)}
-            class={@image_class || "w-[272px] h-[572px]"}
-            src={@image}
-            alt={@alt}
-          />
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  def device_mockup(%{type: "laptop"} = assigns) do
-    ~H"""
-    <div class={["max-w-fit md:max-w-[512px]", color_class(@color), @class]}>
-      <div class="mock-base relative mx-auto border-[8px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]">
-        <div class="rounded overflow-hidden h-[156px] md:h-[278px] bg-white dark:bg-[#404040]">
-          <.image
-            :if={!is_nil(@image)}
-            class={@image_class || "h-[140px] md:h-[262px] w-full"}
-            src={@image}
-            alt={@alt}
-          />
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-      <div class="mock-darker-base relative mx-auto rounded-b-xl rounded-t-sm h-[17px] max-w-[351px] md:h-[21px] md:max-w-[597px]">
-        <div class="mock-base absolute left-1/2 top-0 -translate-x-1/2 rounded-b-xl w-[56px] h-[5px] md:w-[96px] md:h-[8px]">
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  def device_mockup(%{type: "ipad"} = assigns) do
-    ~H"""
-    <div class={["max-w-fit md:max-w-[512px]", color_class(@color), @class]}>
-      <div class="mock-base relative mx-auto border-[14px] rounded-[2.5rem] h-[454px] max-w-[341px] md:h-[682px] md:max-w-[512px]">
-        <div class="mock-base h-[32px] w-[3px] absolute -start-[17px] top-[72px] rounded-s-lg"></div>
-        <div class="mock-base h-[46px] w-[3px] absolute -start-[17px] top-[124px] rounded-s-lg"></div>
-        <div class="mock-base h-[46px] w-[3px] absolute -start-[17px] top-[178px] rounded-s-lg"></div>
-        <div class="mock-base h-[64px] w-[3px] absolute -end-[17px] top-[142px] rounded-e-lg"></div>
-        <div class="dark:bg-[#404040] bg-white rounded-3xl overflow-hidden h-[426px] md:h-[654px]">
-          <.image
-            :if={!is_nil(@image)}
-            class={@image_class || "h-[426px] md:h-[654px]"}
-            src={@image}
-            alt={@alt}
-          />
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  def device_mockup(%{type: "imac"} = assigns) do
-    ~H"""
-    <div class={["max-w-fit md:max-w-[512px]", color_class(@color), @class]}>
-      <div class="mock-base relative mx-auto border-[16px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]">
-        <div class="overflow-hidden h-[140px] md:h-[262px] bg-white dark:bg-[#404040]">
-          <.image
-            :if={!is_nil(@image)}
-            class={@image_class || "h-[140px] md:h-[262px] w-full"}
-            src={@image}
-            alt={@alt}
-          />
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-      <div class="mock-darker-base relative mx-auto rounded-b-xl h-[24px] max-w-[301px] md:h-[42px] md:max-w-[512px]">
-      </div>
-      <div class="mock-base relative mx-auto rounded-b-xl h-[55px] max-w-[83px] md:h-[95px] md:max-w-[142px]">
-      </div>
-    </div>
-    """
-  end
-
-  def device_mockup(assigns) do
-    ~H"""
-    <div class={["w-fit", color_class(@color), @class]}>
-      <div class="mock-base relative mx-auto border-[14px] rounded-[2.5rem] h-[600px] w-[300px] shadow-xl">
-        <div class="mock-base w-[148px] h-[18px] top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute">
-        </div>
-        <div class="mock-base h-[46px] w-[3px] absolute -start-[17px] top-[124px] rounded-s-lg"></div>
-        <div class="mock-base h-[46px] w-[3px] absolute -start-[17px] top-[178px] rounded-s-lg"></div>
-        <div class="mock-base h-[64px] w-[3px] absolute -end-[17px] top-[142px] rounded-e-lg"></div>
-        <div class="bg-white dark:bg-[#404040] rounded-3xl overflow-hidden w-[272px] h-[572px]">
-          <.image
-            :if={!is_nil(@image)}
-            class={@image_class || "w-[272px] h-[572px]"}
-            src={@image}
-            alt={@alt}
-          />
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp color_class("base") do
-    [
-      "[&_.mock-base]:bg-[#f1f3f5] [&_.mock-darker-base]:bg-[#dee2e6] [&_.mock-base]:border-[#e4e4e7]",
-      "dark:[&_.mock-base]:bg-[#2e2e2e] dark:[&_.mock-darker-base]:bg-[#424242] dark:[&_.mock-base]:border-[#27272a]"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&_.mock-base]:bg-[#4B4B4B] [&_.mock-darker-base]:bg-black [&_.mock-base]:border-[#282828]",
-      "dark:[&_.mock-base]:bg-[#DDDDDD] dark:[&_.mock-darker-base]:bg-white dark:[&_.mock-base]:border-[#E8E8E8]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "[&_.mock-base]:bg-[#007F8C] [&_.mock-darker-base]:bg-[#1A535A] [&_.mock-base]:border-[#016974]",
-      "dark:[&_.mock-base]:bg-[#01B8CA] dark:[&_.mock-darker-base]:bg-[#B0E7EF] dark:[&_.mock-base]:border-[#77D5E3]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&_.mock-base]:bg-[#266EF1] [&_.mock-darker-base]:bg-[#1948A3] [&_.mock-base]:border-[#175BCC]",
-      "dark:[&_.mock-base]:bg-[#6DAAFB] dark:[&_.mock-darker-base]:bg-[#CDDEFF] dark:[&_.mock-base]:border-[#A8C8FE]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&_.mock-base]:bg-[#0E8345] [&_.mock-darker-base]:bg-[#0D572D] [&_.mock-base]:border-[#166C3B]",
-      "dark:[&_.mock-base]:bg-[#06C167] dark:[&_.mock-darker-base]:bg-[#B1EAC2] dark:[&_.mock-base]:border-[#7FD99A]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&_.mock-base]:bg-[#CA8D01] [&_.mock-darker-base]:bg-[#654600] [&_.mock-base]:border-[#976A01]",
-      "dark:[&_.mock-base]:bg-[#FDC034] dark:[&_.mock-darker-base]:bg-[#FEDF99] dark:[&_.mock-base]:border-[#FDD067]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&_.mock-base]:bg-[#DE1135] [&_.mock-darker-base]:bg-[#950F22] [&_.mock-base]:border-[#BB032A]",
-      "dark:[&_.mock-base]:bg-[#FC7F79] dark:[&_.mock-darker-base]:bg-[#FFD2CD] dark:[&_.mock-base]:border-[#FFB2AB]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&_.mock-base]:bg-[#0B84BA] [&_.mock-darker-base]:bg-[#06425D] [&_.mock-base]:border-[#08638C]",
-      "dark:[&_.mock-base]:bg-[#3EB7ED] dark:[&_.mock-darker-base]:bg-[#9FDBF6] dark:[&_.mock-base]:border-[#6EC9F2]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&_.mock-base]:bg-[#8750C5] [&_.mock-darker-base]:bg-[#442863] [&_.mock-base]:border-[#653C94]",
-      "dark:[&_.mock-base]:bg-[#BA83F9] dark:[&_.mock-darker-base]:bg-[#DDC1FC] dark:[&_.mock-base]:border-[#CBA2FA]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&_.mock-base]:bg-[#A86438] [&_.mock-darker-base]:bg-[#54321C] [&_.mock-base]:border-[#7E4B2A]",
-      "dark:[&_.mock-base]:bg-[#DB976B] dark:[&_.mock-darker-base]:bg-[#EDCBB5] dark:[&_.mock-base]:border-[#E4B190]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&_.mock-base]:bg-[#868686] [&_.mock-darker-base]:bg-[#5E5E5E] [&_.mock-base]:border-[#727272]",
-      "dark:[&_.mock-base]:bg-[#A6A6A6] dark:[&_.mock-darker-base]:bg-[#DDDDDD] dark:[&_.mock-base]:border-[#BBBBBB]"
-    ]
-  end
-end
diff --git a/lib/geo_web/components/divider.ex b/lib/geo_web/components/divider.ex
deleted file mode 100644
index 7ad2aa2..0000000
--- a/lib/geo_web/components/divider.ex
+++ /dev/null
@@ -1,680 +0,0 @@
-defmodule GeoWeb.Components.Divider do
-  @moduledoc """
-  The `GeoWeb.Components.Divider` module provides a versatile and customizable divider
-  component for creating horizontal and vertical dividers with various styling options
-  in a Phoenix LiveView application.
-
-  ## Features:
-  - Supports different divider types: `solid`, `dashed`, and `dotted`.
-  - Flexible color themes with predefined options such as `primary`, `secondary`,
-  `success`, `danger`, and more.
-  - Allows for horizontal and vertical orientation.
-  - Customizable size, width, height, and margin for precise control over the appearance.
-  - Includes slots for adding text or icons with individual styling and positioning options.
-  - Global attributes and custom CSS classes can be applied for additional customization.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `divider` component is used to visually separate content with either a horizontal or
-  vertical line. It supports different line styles (like dashed, dotted, or solid) and can
-  be customized with various attributes like `size`, `width`, `height`, and `color`.
-
-  ### Examples
-
-  ```elixir
-  <.divider type="dashed" position="right" size="small" color="primary">
-    <:text>Or</:text>
-  </.divider>
-
-  <.divider type="dotted" size="extra_large">
-    <:icon name="hero-circle-stack" class="p-10 bg-white text-yellow-600" />
-  </.divider>
-  ```
-
-  This component is ideal for creating visual separations in your layout, whether it’s for breaking
-  up text, sections, or other elements in your design.
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :type, :string,
-    values: ["dashed", "dotted", "solid"],
-    default: "solid",
-    doc: "Determines type of element"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "extra_small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :height, :string, default: "auto", doc: "Determines the element width"
-  attr :margin, :string, default: "none", doc: "Determines the element margin"
-  attr :position, :string, default: "middle", doc: "Determines the text and icons position"
-
-  attr :variation, :string,
-    values: ["horizontal", "vertical"],
-    default: "horizontal",
-    doc: "Defines the layout orientation of the component"
-
-  slot :text, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :color, :string, doc: "Determines color theme"
-
-    attr :size, :string,
-      doc:
-        "Determines the overall size of the elements, including padding, font size, and other items"
-  end
-
-  slot :icon, required: false do
-    attr :name, :string, required: true, doc: "Specifies the name of the element"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :color, :string, doc: "Determines color theme"
-
-    attr :size, :string,
-      doc:
-        "Determines the overall size of the elements, including padding, font size, and other items"
-  end
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def divider(%{variation: "vertical"} = assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="separator"
-      aria-orientation="vertical"
-      class={[
-        color_class(@color, @position),
-        height_class(@height),
-        border_type_class(@type, :vertical, ""),
-        size_class(@size, :vertical, @position),
-        margin_class(@margin, :vertical),
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :for={text <- @text}
-        aria-hidden="true"
-        class={[
-          "divider-content whitespace-nowrap",
-          text[:color],
-          text[:class] || "bg-transparent",
-          text_position(:divider, @position),
-          text[:size]
-        ]}
-      >
-        {render_slot(text)}
-      </div>
-    </div>
-    """
-  end
-
-  def divider(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="separator"
-      aria-orientation="horizontal"
-      class={[
-        default_classes(@position),
-        color_class(@color, @position),
-        width_class(@width),
-        border_type_class(@type, :horizontal, @position),
-        size_class(@size, :horizontal, @position),
-        margin_class(@margin, :horizontal),
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :for={icon <- @icon}
-        aria-hidden="true"
-        class={[
-          "divider-content whitespace-nowrap",
-          icon[:size],
-          icon[:color],
-          icon[:class] || "bg-transparent",
-          text_position(:divider, @position)
-        ]}
-      >
-        <.icon name={icon[:name]} class={icon[:icon_class] || size_class(@size, :icon, "")} />
-      </div>
-
-      <div
-        :for={text <- @text}
-        aria-hidden="true"
-        class={[
-          "divider-content whitespace-nowrap",
-          text[:color],
-          text[:class] || "bg-transparent",
-          text_position(:divider, @position),
-          text[:size]
-        ]}
-      >
-        {render_slot(text)}
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  `GeoWeb.Components.Divider.hr` is used to create a horizontal divider with customizable style, color,
-  and size options.
-
-  It can also include text or icons to enhance visual separation between content sections.
-
-  ## Examples
-
-  ```elixir
-  <.hr type="dashed" color="primary" />
-  <.hr type="dotted" size="large" />
-  <.hr><:text>Or</:text></.hr>
-  <.hr color="dawn"><:icon name="hero-circle-stack" /></.hr>
-  <.hr type="dashed" size="small"><:text>Or</:text></.hr>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :type, :string,
-    values: ["dashed", "dotted", "solid"],
-    default: "solid",
-    doc: "Specifies the type of the element"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "extra_small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :margin, :string, default: "none", doc: "Determines the element margin"
-  attr :position, :string, default: "middle", doc: "Determines the text and icons position"
-
-  slot :text, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :color, :string, doc: "Determines color theme"
-
-    attr :size, :string,
-      doc:
-        "Determines the overall size of the elements, including padding, font size, and other items"
-  end
-
-  slot :icon, required: false do
-    attr :name, :string, required: true, doc: "Specifies the name of the element"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :color, :string, doc: "Determines color theme"
-
-    attr :size, :string,
-      doc:
-        "Determines the overall size of the elements, including padding, font size, and other items"
-  end
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def hr(assigns) do
-    ~H"""
-    <div class="relative">
-      <hr
-        id={@id}
-        role="separator"
-        aria-orientation="horizontal"
-        class={[
-          "mx-auto",
-          color_class(@color, @position),
-          width_class(@width),
-          border_type_class(@type, :horizontal, @position),
-          size_class(@size, :horizontal, @position),
-          margin_class(@margin, :horizontal),
-          @class
-        ]}
-        {@rest}
-      />
-      <div
-        :for={icon <- @icon}
-        class={[
-          "flex item-center justify-center absolute p-2",
-          "-translate-x-1/2 whitespace-nowrap",
-          icon[:size] || size_class(@size, :icon, ""),
-          icon[:color] || color_class(@color, @position),
-          text_position(:hr, @position),
-          icon[:class] || "bg-white"
-        ]}
-      >
-        <.icon name={icon[:name]} class={icon[:icon_class] || ""} />
-      </div>
-
-      <div
-        :for={text <- @text}
-        class={[
-          "flex item-center justify-center absolute p-2",
-          "-translate-x-1/2 whitespace-nowrap",
-          text[:color] || color_class(@color, @position),
-          text[:class] || "bg-white",
-          text_position(:hr, @position),
-          text[:size]
-        ]}
-      >
-        {render_slot(text)}
-      </div>
-    </div>
-    """
-  end
-
-  defp size_class("extra_small", :horizontal, position) do
-    [
-      "[&:not(:has(.divider-content))]:border-t text-xs my-2",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-t",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-t has-[.divider-content.devider-middle]:after:border-t",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-t"
-    ]
-  end
-
-  defp size_class("small", :horizontal, position) do
-    [
-      "[&:not(:has(.divider-content))]:border-t-2 text-[13px] my-3",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-t-2",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-t-2 has-[.divider-content.devider-middle]:after:border-t-2",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-t-2"
-    ]
-  end
-
-  defp size_class("medium", :horizontal, position) do
-    [
-      "[&:not(:has(.divider-content))]:border-t-[3px] text-[14px] my-4",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-t-[3px]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-t-[3px] has-[.divider-content.devider-middle]:after:border-t-[3px]",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-t-[3px]"
-    ]
-  end
-
-  defp size_class("large", :horizontal, position) do
-    [
-      "[&:not(:has(.divider-content))]:border-t-4 text-[16px] my-5",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-t-4",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-t-4 has-[.divider-content.devider-middle]:after:border-t-4",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-t-4"
-    ]
-  end
-
-  defp size_class("extra_large", :horizontal, position) do
-    [
-      "[&:not(:has(.divider-content))]:border-t-[5px] text-[17px] my-6",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-t-[5px]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-t-[5px] has-[.divider-content.devider-middle]:after:border-t-[5px]",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-t-[5px]"
-    ]
-  end
-
-  defp size_class("extra_small", :vertical, _),
-    do: "[&:not(:has(.divider-content))]:border-l text-[13px]"
-
-  defp size_class("small", :vertical, _),
-    do: "[&:not(:has(.divider-content))]:border-l-2 text-[14px]"
-
-  defp size_class("medium", :vertical, _),
-    do: "[&:not(:has(.divider-content))]:border-l-[3px] text-[15px]"
-
-  defp size_class("large", :vertical, _),
-    do: "[&:not(:has(.divider-content))]:border-l-4 text-[16px]"
-
-  defp size_class("extra_large", :vertical, _),
-    do: "[&:not(:has(.divider-content))]:border-l-[5px] text-[17px]"
-
-  defp size_class("extra_small", :icon, _), do: "[&>*]:size-5"
-
-  defp size_class("small", :icon, _), do: "[&>*]:size-6"
-
-  defp size_class("medium", :icon, _), do: "[&>*]:size-7"
-
-  defp size_class("large", :icon, _), do: "[&>*]:size-8"
-
-  defp size_class("extra_large", :icon, _), do: "[&>*]:size-9"
-
-  defp size_class(params, _, _) when is_binary(params), do: params
-
-  defp width_class("full"), do: "w-full"
-
-  defp width_class("half"), do: "w-1/2"
-
-  defp width_class(params) when is_binary(params), do: params
-
-  defp height_class("full"), do: "h-screen"
-
-  defp height_class("auto"), do: "h-auto"
-
-  defp height_class("half"), do: "h-1/2"
-
-  defp height_class(params) when is_binary(params), do: params
-
-  defp margin_class("extra_small", :horizontal) do
-    ["my-2"]
-  end
-
-  defp margin_class("small", :horizontal) do
-    ["my-3"]
-  end
-
-  defp margin_class("medium", :horizontal) do
-    ["my-4"]
-  end
-
-  defp margin_class("large", :horizontal) do
-    ["my-5"]
-  end
-
-  defp margin_class("extra_large", :horizontal) do
-    ["my-6"]
-  end
-
-  defp margin_class("none", :horizontal) do
-    ["my-0"]
-  end
-
-  defp margin_class("extra_small", :vertical) do
-    ["mx-2"]
-  end
-
-  defp margin_class("small", :vertical) do
-    ["mx-3"]
-  end
-
-  defp margin_class("medium", :vertical) do
-    ["mx-4"]
-  end
-
-  defp margin_class("large", :vertical) do
-    ["mx-5"]
-  end
-
-  defp margin_class("extra_large", :vertical) do
-    ["mx-6"]
-  end
-
-  defp margin_class("none", :vertical) do
-    ["mx-0"]
-  end
-
-  defp margin_class(params, _) when is_binary(params), do: params
-
-  defp color_class("base", position) do
-    [
-      "text-[#09090b] border-[#e4e4e7] dark:text-[#FAFAFA] dark:border-[#27272a]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#e4e4e7] dark:has-[.divider-content.devider-right]:before:border-[#27272a]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#e4e4e7] dark:has-[.divider-content.devider-left]:after:border-[#27272a]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#e4e4e7] has-[.divider-content.devider-middle]:after:border-[#e4e4e7] dark:has-[.divider-content.devider-middle]:before:border-[#27272a] dark:has-[.divider-content.devider-middle]:after:border-[#27272a]"
-    ]
-  end
-
-  defp color_class("white", position) do
-    [
-      "text-white border-white",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-white dark:has-[.divider-content.devider-right]:before:border-white",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-white dark:has-[.divider-content.devider-left]:after:border-white",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-white has-[.divider-content.devider-middle]:after:border-white dark:has-[.divider-content.devider-middle]:before:border-white dark:has-[.divider-content.devider-middle]:after:border-white"
-    ]
-  end
-
-  defp color_class("dark", position) do
-    [
-      "text-[#282828] border-[#282828]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#282828] dark:has-[.divider-content.devider-right]:before:border-[#282828]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#282828] dark:has-[.divider-content.devider-left]:after:border-[#282828]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#282828] has-[.divider-content.devider-middle]:after:border-[#282828] dark:has-[.divider-content.devider-middle]:before:border-[#282828] dark:has-[.divider-content.devider-middle]:after:border-[#282828]"
-    ]
-  end
-
-  defp color_class("natural", position) do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#4B4B4B] dark:has-[.divider-content.devider-right]:before:border-[#DDDDDD]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#4B4B4B] dark:has-[.divider-content.devider-left]:after:border-[#DDDDDD]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#4B4B4B] has-[.divider-content.devider-middle]:after:border-[#4B4B4B] dark:has-[.divider-content.devider-middle]:before:border-[#DDDDDD] dark:has-[.divider-content.devider-middle]:after:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary", position) do
-    [
-      "text-[#007F8C] border-[#007F8C] dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#007F8C] dark:has-[.divider-content.devider-right]:before:border-[#01B8CA]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#007F8C] dark:has-[.divider-content.devider-left]:after:border-[#01B8CA]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#007F8C] has-[.divider-content.devider-middle]:after:border-[#007F8C] dark:has-[.divider-content.devider-middle]:before:border-[#01B8CA] dark:has-[.divider-content.devider-middle]:after:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary", position) do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#266EF1] dark:has-[.divider-content.devider-right]:before:border-[#6DAAFB]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#266EF1] dark:has-[.divider-content.devider-left]:after:border-[#6DAAFB]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#266EF1] has-[.divider-content.devider-middle]:after:border-[#266EF1] dark:has-[.divider-content.devider-middle]:before:border-[#6DAAFB] dark:has-[.divider-content.devider-middle]:after:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success", position) do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#0E8345] dark:has-[.divider-content.devider-right]:before:border-[#06C167]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#0E8345] dark:has-[.divider-content.devider-left]:after:border-[#06C167]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#0E8345] has-[.divider-content.devider-middle]:after:border-[#0E8345] dark:has-[.divider-content.devider-middle]:before:border-[#06C167] dark:has-[.divider-content.devider-middle]:after:border-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning", position) do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#CA8D01] dark:has-[.divider-content.devider-right]:before:border-[#FDC034]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#CA8D01] dark:has-[.divider-content.devider-left]:after:border-[#FDC034]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#CA8D01] has-[.divider-content.devider-middle]:after:border-[#CA8D01] dark:has-[.divider-content.devider-middle]:before:border-[#FDC034] dark:has-[.divider-content.devider-middle]:after:border-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger", position) do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#DE1135] dark:has-[.divider-content.devider-right]:before:border-[#FC7F79]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#DE1135] dark:has-[.divider-content.devider-left]:after:border-[#FC7F79]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#DE1135] has-[.divider-content.devider-middle]:after:border-[#DE1135] dark:has-[.divider-content.devider-middle]:before:border-[#FC7F79] dark:has-[.divider-content.devider.middle]:after:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info", position) do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#0B84BA] dark:has-[.divider-content.devider-right]:before:border-[#3EB7ED]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#0B84BA] dark:has-[.divider-content.devider-left]:after:border-[#3EB7ED]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#0B84BA] has-[.divider-content.devider-middle]:after:border-[#0B84BA] dark:has-[.divider-content.devider-middle]:before:border-[#3EB7ED] dark:has-[.divider-content.devider-middle]:after:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc", position) do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#8750C5] dark:has-[.divider-content.devider-right]:before:border-[#BA83F9]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#8750C5] dark:has-[.divider-content.devider-left]:after:border-[#BA83F9]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#8750C5] has-[.divider-content.devider-middle]:after:border-[#8750C5] dark:has-[.divider-content.devider-middle]:before:border-[#BA83F9] dark:has-[.divider-content.devider-middle]:after:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn", position) do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#A86438] dark:has-[.divider-content.devider-right]:before:border-[#DB976B]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#A86438] dark:has-[.divider-content.devider-left]:after:border-[#DB976B]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#A86438] has-[.divider-content.devider-middle]:after:border-[#A86438] dark:has-[.divider-content.devider-middle]:before:border-[#DB976B] dark:has-[.divider-content.devider-middle]:after:border-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver", position) do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      position == "right" &&
-        "has-[.divider-content.devider-right]:before:border-[#868686] dark:has-[.divider-content.devider-right]:before:border-[#A6A6A6]",
-      position == "left" &&
-        "has-[.divider-content.devider-left]:after:border-[#868686] dark:has-[.divider-content.devider-left]:after:border-[#A6A6A6]",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-[#868686] has-[.divider-content.devider-middle]:after:border-[#868686] dark:has-[.divider-content.devider-middle]:before:border-[#A6A6A6] dark:has-[.divider-content.devider-middle]:after:border-[#A6A6A6]"
-    ]
-  end
-
-  defp border_type_class("dashed", :horizontal, position) do
-    [
-      "border-dashed",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-dashed has-[.divider-content.devider-middle]:after:border-dashed",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-dashed",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-dashed"
-    ]
-  end
-
-  defp border_type_class("dotted", :horizontal, position) do
-    [
-      "border-dotted",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-dotted has-[.divider-content.devider-middle]:after:border-dotted",
-      position == "rigth" && "has-[.divider-content.devider-right]:before:border-dotted",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-dotted"
-    ]
-  end
-
-  defp border_type_class("solid", :horizontal, position) do
-    [
-      "border-solid",
-      position == "middle" &&
-        "has-[.divider-content.devider-middle]:before:border-solid has-[.divider-content.devider-middle]:after:border-solid",
-      position == "right" && "has-[.divider-content.devider-right]:before:border-solid",
-      position == "left" && "has-[.divider-content.devider-left]:after:border-solid"
-    ]
-  end
-
-  defp border_type_class("dashed", :vertical, _), do: "border-dashed"
-
-  defp border_type_class("dotted", :vertical, _), do: "border-dotted"
-
-  defp border_type_class("solid", :vertical, _), do: "border-solid"
-
-  defp text_position(:hr, "right") do
-    "-top-1/2 -translate-y-1/2 -right-5"
-  end
-
-  defp text_position(:hr, "left") do
-    "-top-1/2 -translate-y-1/2 left-0"
-  end
-
-  defp text_position(:hr, "middle") do
-    "-top-1/2 -translate-y-1/2 left-1/2"
-  end
-
-  defp text_position(:divider, "right") do
-    "devider-right"
-  end
-
-  defp text_position(:divider, "left") do
-    "devider-left"
-  end
-
-  defp text_position(:divider, "middle") do
-    "devider-middle"
-  end
-
-  defp default_classes(position) do
-    base_classes = [
-      "mx-auto",
-      "has-[.divider-content]:flex",
-      "has-[.divider-content]:items-center",
-      "has-[.divider-content]:gap-2"
-    ]
-
-    position_classes = position_classes(position)
-
-    base_classes ++ position_classes
-  end
-
-  defp position_classes("middle"),
-    do: [
-      "has-[.divider-content.devider-middle]:before:content-['']",
-      "has-[.divider-content.devider-middle]:before:block",
-      "has-[.divider-content.devider-middle]:before:w-full",
-      "has-[.divider-content.devider-middle]:after:content-['']",
-      "has-[.divider-content.devider-middle]:after:block",
-      "has-[.divider-content.devider-middle]:after:w-full"
-    ]
-
-  defp position_classes("right"),
-    do: [
-      "has-[.divider-content.devider-right]:before:content-['']",
-      "has-[.divider-content.devider-right]:before:block",
-      "has-[.divider-content.devider-right]:before:w-full"
-    ]
-
-  defp position_classes("left"),
-    do: [
-      "has-[.divider-content.devider-left]:after:content-['']",
-      "has-[.divider-content.devider-left]:after:block",
-      "has-[.divider-content.devider-left]:after:w-full"
-    ]
-
-  defp position_classes(_), do: []
-end
diff --git a/lib/geo_web/components/drawer.ex b/lib/geo_web/components/drawer.ex
deleted file mode 100644
index 90f0a9c..0000000
--- a/lib/geo_web/components/drawer.ex
+++ /dev/null
@@ -1,694 +0,0 @@
-defmodule GeoWeb.Components.Drawer do
-  @moduledoc """
-  The `GeoWeb.Components.Drawer` module provides a flexible and customizable drawer component
-  for use in Phoenix LiveView applications.
-
-  ## Features:
-  - **Positioning:** Drawers can be positioned on the left, right, top, or bottom of the screen.
-  - **Styling Variants:** Offers several styling options like `default`, `outline`,
-  `transparent`, `shadow`, and `unbordered`.
-  - **Color Themes:** Supports a variety of predefined color themes, including `primary`,
-  `secondary`, `success`, `danger`, `info`, and more.
-  - **Customizable:** Allows customization of border style, size, border radius,
-  and padding to fit various design needs.
-  - **Interactive:** Integrated with `Phoenix.LiveView.JS` for show/hide functionality and
-  nteraction management.
-  - **Slots Support:** Includes slots for adding a custom header and inner content,
-  with full HEEx support for dynamic rendering.
-  """
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  use Gettext, backend: GeoWeb.Gettext
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  A `drawer` component for displaying content in a sliding panel. It can be positioned on the left or
-  right side of the viewport and controlled using custom JavaScript actions.
-
-  ## Examples
-
-  ```elixir
-  <.drawer id="acc-left" show={true}>
-    Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta
-    praesentium quidem dicta sapiente accusamus nihil.
-  </.drawer>
-
-  <.drawer id="acc-right" title_class="text-2xl font-light" position="right">
-    <:header><p>Right Drawer</p></:header>
-    Lorem ipsum dolor sit amet consectetur adipisicing elit. Commodi ea atque soluta praesentium
-    quidem dicta sapiente accusamus nihil.
-  </.drawer>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :title_class, :string, default: nil, doc: "Determines custom class for the title"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :position, :string, default: "left", doc: "Determines the element position"
-
-  attr :class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to drawer wrapper"
-
-  attr :close_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to close button"
-
-  attr :content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to content"
-
-  attr :wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to wrapper"
-
-  attr :overlay_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to overlay"
-
-  attr :on_hide, JS, default: %JS{}, doc: "Custom JS module for on_hide action"
-  attr :on_show, JS, default: %JS{}, doc: "Custom JS module for on_show action"
-  attr :on_hide_away, JS, default: %JS{}, doc: "Custom JS module for on_hide_away action"
-  attr :show, :boolean, default: false, doc: "Show element"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :header, required: false, doc: "Specifies element's header that accepts heex"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def drawer(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      phx-mounted={@show && show_drawer(@on_show, @id, @position)}
-      phx-remove={hide_drawer(@id, @position)}
-      class={[
-        "fixed z-50 transition-transform",
-        "[&:not(.drawer-showed)_.drawer-overlay]:opacity-0 [&.drawer-showed_.drawer-overlay]:opacity-100",
-        translate_position(@position),
-        position_class(@position),
-        @class
-      ]}
-      tabindex="-1"
-      role="dialog"
-      aria-modal="true"
-      aria-labelledby={"#{@id}-#{@position}-title"}
-      aria-describedby={"#{@id}-#{@position}-desc"}
-      {@rest}
-    >
-      <div
-        class={[
-          "fixed bg-black/60 inset-0 -z-10 transition-all duration-[0.4s] delay-[0.1s] ease-in-out drawer-overlay",
-          @overlay_class
-        ]}
-        role="presentation"
-        aria-hidden="true"
-      >
-      </div>
-
-      <div
-        phx-click-away={hide_drawer(@on_hide_away, @id, @position)}
-        phx-window-keydown={hide_drawer(@on_hide, @id, @position)}
-        phx-key="escape"
-        class={[
-          "p-2 overflow-y-auto",
-          @position in ["left", "right"] && "h-full",
-          size_class(@size, @position),
-          border_class(@border, @position, @variant),
-          color_variant(@variant, @color),
-          @wrapper_class
-        ]}
-        tabindex="0"
-        role="document"
-      >
-        <div class="flex flex-row-reverse justify-between items-center gap-5 mb-2">
-          <button
-            type="button"
-            phx-click={JS.exec(@on_hide, "phx-remove", to: "##{@id}")}
-            aria-label={gettext("Close menu")}
-            class={@close_class}
-          >
-            <.icon name="hero-x-mark" />
-            <span class="sr-only">{gettext("Close menu")}</span>
-          </button>
-
-          <h5
-            :if={title = @title || render_slot(@header)}
-            id={"#{@id}-#{@position}-title"}
-            class={[@title_class || "text-lg font-semibold"]}
-          >
-            {title}
-          </h5>
-        </div>
-
-        <div id={"#{@id}-#{@position}-desc"} class="sr-only">
-          {gettext("Drawer content")}
-        </div>
-
-        <div class={@content_class}>
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp translate_position("left"), do: "-translate-x-full"
-  defp translate_position("right"), do: "translate-x-full"
-  defp translate_position("bottom"), do: "translate-y-full"
-  defp translate_position("top"), do: "-translate-y-full"
-  defp translate_position(params) when is_binary(params), do: params
-
-  defp position_class("left"), do: "top-0 left-0 h-screen"
-  defp position_class("right"), do: "top-0 right-0 h-screen"
-  defp position_class("top"), do: "top-0 inset-x-0 w-full"
-  defp position_class("bottom"), do: "bottom-0 inset-x-0 w-full"
-  defp position_class(params) when is_binary(params), do: params
-
-  defp border_class(_, _, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "transparent",
-              "gradient"
-            ],
-       do: nil
-
-  defp border_class("extra_small", "left", _), do: "border-r"
-  defp border_class("small", "left", _), do: "border-r-2"
-  defp border_class("medium", "left", _), do: "border-r-[3px]"
-  defp border_class("large", "left", _), do: "border-r-4"
-  defp border_class("extra_large", "left", _), do: "border-r-[5px]"
-
-  defp border_class("extra_small", "right", _), do: "border-l"
-  defp border_class("small", "right", _), do: "border-l-2"
-  defp border_class("medium", "right", _), do: "border-l-[3px]"
-  defp border_class("large", "right", _), do: "border-l-4"
-  defp border_class("extra_large", "right", _), do: "border-l-[5px]"
-
-  defp border_class("extra_small", "top", _), do: "border-b"
-  defp border_class("small", "top", _), do: "border-b-2"
-  defp border_class("medium", "top", _), do: "border-b-[3px]"
-  defp border_class("large", "top", _), do: "border-b-4"
-  defp border_class("extra_large", "top", _), do: "border-b-[5px]"
-
-  defp border_class("extra_small", "bottom", _), do: "border-t"
-  defp border_class("small", "bottom", _), do: "border-t-2"
-  defp border_class("medium", "bottom", _), do: "border-t-[3px]"
-  defp border_class("large", "bottom", _), do: "border-t-4"
-  defp border_class("extra_large", "bottom", _), do: "border-t-[5px]"
-
-  defp border_class(params, _, _) when is_binary(params), do: params
-
-  defp size_class("extra_small", "left"), do: "w-60"
-
-  defp size_class("small", "left"), do: "w-64"
-
-  defp size_class("medium", "left"), do: "w-72"
-
-  defp size_class("large", "left"), do: "w-80"
-
-  defp size_class("extra_large", "left"), do: "w-96"
-
-  defp size_class("extra_small", "right"), do: "w-60"
-
-  defp size_class("small", "right"), do: "w-64"
-
-  defp size_class("medium", "right"), do: "w-72"
-
-  defp size_class("large", "right"), do: "w-80"
-
-  defp size_class("extra_large", "right"), do: "w-96"
-
-  defp size_class("extra_small", "top"), do: "min-h-32"
-
-  defp size_class("small", "top"), do: "min-h-36"
-
-  defp size_class("medium", "top"), do: "min-h-40"
-
-  defp size_class("large", "top"), do: "min-h-44"
-
-  defp size_class("extra_large", "top"), do: "min-h-48"
-
-  defp size_class("extra_small", "bottom"), do: "min-h-32"
-
-  defp size_class("small", "bottom"), do: "min-h-36"
-
-  defp size_class("medium", "bottom"), do: "min-h-40"
-
-  defp size_class("large", "bottom"), do: "min-h-44"
-
-  defp size_class("extra_large", "bottom"), do: "min-h-48"
-
-  defp size_class(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white",
-      "dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white",
-      "dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white",
-      "dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white",
-      "dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#DE1135] text-white",
-      "dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white",
-      "dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white",
-      "dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white",
-      "dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white",
-      "dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white",
-      "dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "bg-transparent text-[#007F8C] border-[#007F8C]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "bg-transparent text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "bg-transparent text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "bg-transparent text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "bg-transparent text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "bg-transparent text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "bg-transparent text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "bg-transparent text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "bg-transparent text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B]",
-      "dark:text-[#DDDDDD] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "bg-transparent text-[#007F8C]",
-      "dark:text-[#01B8CA] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "bg-transparent text-[#266EF1]",
-      "dark:text-[#6DAAFB] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "bg-transparent text-[#0E8345]",
-      "dark:text-[#06C167] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "bg-transparent text-[#CA8D01]",
-      "dark:text-[#FDC034] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "bg-transparent text-[#DE1135]",
-      "dark:text-[#FC7F79] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "bg-transparent text-[#0B84BA]",
-      "dark:text-[#3EB7ED] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "bg-transparent text-[#8750C5]",
-      "dark:text-[#BA83F9] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "bg-transparent text-[#A86438]",
-      "dark:text-[#DB976B] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "bg-transparent text-[#868686]",
-      "dark:text-[#A6A6A6] border-transparent"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  @doc """
-  Shows the drawer component by modifying its CSS classes to transition it into view.
-
-  ## Parameters:
-    - `js` (optional, `Phoenix.LiveView.JS`): The JS struct used to chain JavaScript commands.
-    Defaults to an empty `%JS{}`.
-    - `id` (string): The unique identifier of the drawer element to show.
-    - `position` (string): The position of the drawer, such as "left", "right", "top", or "bottom".
-
-  ## Behavior:
-  Removes the CSS class that keeps the drawer off-screen and adds the class `"transform-none"`
-  to bring the drawer into view.
-
-  ## Examples:
-
-  ```elixir
-  show_drawer(%JS{}, "drawer-id", "left")
-  ```
-
-  This will show the drawer with ID `drawer-id` positioned on the left side of the screen.
-  """
-  def show_drawer(js \\ %JS{}, id, position) when is_binary(id) do
-    JS.remove_class(js, translate_position(position), to: "##{id}")
-    |> JS.add_class("transform-none", to: "##{id}")
-    |> JS.add_class("drawer-showed", to: "##{id}")
-  end
-
-  @doc """
-  Hides the drawer component by modifying its CSS classes to transition it out of view.
-
-  ## Parameters:
-    - `js` (optional, `Phoenix.LiveView.JS`): The JS struct used to chain JavaScript commands. Defaults to an empty `%JS{}`.
-    - `id` (string): The unique identifier of the drawer element to hide.
-    - `position` (string): The position of the drawer, such as "left", "right", "top", or "bottom".
-
-  ## Behavior:
-  Removes the `"transform-none"` CSS class that keeps the drawer visible and adds the class based on the drawer's position (e.g., `"-translate-x-full"` for a left-positioned drawer) to move the drawer off-screen.
-
-  ## Examples:
-
-  ```elixir
-  hide_drawer(%JS{}, "drawer-id", "left")
-  ```
-
-  This will hide the drawer with ID "drawer-id" positioned on the left side of the screen.
-  """
-  def hide_drawer(js \\ %JS{}, id, position) do
-    js
-    |> JS.remove_class("drawer-showed", to: "##{id}")
-    |> JS.remove_class("transform-none", to: "##{id}")
-    |> JS.add_class(translate_position(position), to: "##{id}")
-  end
-end
diff --git a/lib/geo_web/components/dropdown.ex b/lib/geo_web/components/dropdown.ex
deleted file mode 100644
index 4db3654..0000000
--- a/lib/geo_web/components/dropdown.ex
+++ /dev/null
@@ -1,746 +0,0 @@
-defmodule GeoWeb.Components.Dropdown do
-  @moduledoc """
-  The `GeoWeb.Components.Dropdown` module provides a customizable dropdown component
-  built using Phoenix LiveView. It allows you to create dropdown menus with different styles,
-  positions, and behaviors, supporting various customization options through attributes and slots.
-
-  This module facilitates creating and managing dropdown components in a
-  Phoenix LiveView application with flexible customization options.
-  """
-
-  use Phoenix.Component
-
-  @doc """
-  A `dropdown` component that displays a list of options or content when triggered.
-  It can be activated by a click or hover, and positioned in various directions relative to its parent.
-
-  ## Examples
-
-  ```elixir
-  <.dropdown relative="relative" position="right">
-    <:trigger>
-      <.button color="primary" icon="hero-chevron-down" right_icon>
-        Dropdown Right
-      </.button>
-    </:trigger>
-
-    <:content space="small" rounded="large" width="full" padding="extra_small">
-      <.list size="small">
-        <:item padding="extra_small" icon="hero-envelope">Dashboard</:item>
-        <:item padding="extra_small" icon="hero-camera">Settings</:item>
-        <:item padding="extra_small" icon="hero-camera">Earning</:item>
-        <:item padding="extra_small" icon="hero-calendar">Sign out</:item>
-      </.list>
-    </:content>
-  </.dropdown>
-
-  <.dropdown relative="relative" clickable>
-    <:trigger trigger_id="test-1">
-      <.button color="primary" icon="hero-chevron-down" right_icon>
-        Dropdown Button
-      </.button>
-    </:trigger>
-
-    <:content id="test-1" space="small" rounded="large" width="full" padding="extra_small">
-      <.list size="small">
-        <:item padding="extra_small" icon="hero-envelope">Dashboard</:item>
-        <:item padding="extra_small" icon="hero-camera">Settings</:item>
-        <:item padding="extra_small" icon="hero-camera">Earning</:item>
-        <:item padding="extra_small" icon="hero-calendar">Sign out</:item>
-      </.list>
-    </:content>
-  </.dropdown>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :width, :string, default: "w-fit", doc: "Determines the element width"
-  attr :position, :string, default: "bottom", doc: "Determines the element position"
-  attr :relative, :string, default: nil, doc: "Custom relative position for the dropdown"
-
-  attr :clickable, :boolean,
-    default: true,
-    doc: "Determines if the element can be activated on click"
-
-  attr :smart_position, :boolean,
-    default: false,
-    doc: "Enables and disables smart position"
-
-  attr :nomobile, :boolean,
-    default: false,
-    doc: "Controls whether the dropdown is disabled on mobile devices"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "none", doc: "Determines padding for items"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :trigger, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  slot :content, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  def dropdown(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      data-position={@position || "bottom"}
-      data-floating-type="dropdown"
-      data-clickable={to_string(@clickable)}
-      data-smart-position={to_string(@smart_position)}
-      phx-hook="Floating"
-      class={[
-        "relative [&>.dropdown-content]:invisible [&>.dropdown-content]:opacity-0",
-        "[&>.dropdown-content.show-dropdown]:visible [&>.dropdown-content.show-dropdown]:opacity-100",
-        (!@nomobile && @position == "left") ||
-          (@position == "right" && dropdown_mobile_position(@position)),
-        @relative,
-        @width,
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :for={trigger <- @trigger}
-        role="button"
-        aria-haspopup="menu"
-        aria-expanded="false"
-        aria-controls={@id && "#{@id}-dropdown-content"}
-        data-floating-trigger="true"
-        class={["dropdown-trigger [&>*]:cursor-pointer", trigger[:class]]}
-        {@rest}
-      >
-        {render_slot(trigger)}
-      </div>
-
-      <div
-        :for={content <- @content}
-        id={@id && "#{@id}-dropdown-content"}
-        role="menu"
-        tabindex="-1"
-        aria-orientation="vertical"
-        aria-labelledby={@id}
-        aria-hidden="true"
-        data-floating-content="true"
-        hidden
-        class={[
-          "dropdown-content transition-all ease-in-out",
-          space_class(@space),
-          color_variant(@variant, @color),
-          rounded_size(@rounded),
-          size_class(@size),
-          width_class(@width),
-          border_class(@border, @variant),
-          padding_size(@padding),
-          @font_weight,
-          @class
-        ]}
-        {@rest}
-      >
-        {render_slot(content)}
-      </div>
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Defines a trigger for the dropdown component. When the element is clicked,
-  it toggles the visibility of the associated dropdown content.
-
-  ## Examples
-
-  ```elixir
-  <.dropdown_trigger>
-    <.button color="primary" icon="hero-chevron-down" right_icon>Dropdown Right</.button>
-  </.dropdown_trigger>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :trigger_id, :string, default: nil, doc: "Identifies what is the triggered element id"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def dropdown_trigger(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="button"
-      aria-haspopup="menu"
-      aria-expanded="false"
-      aria-controls={@id && "#{@id}-dropdown-content"}
-      data-floating-trigger="true"
-      class={["cursor-pointer dropdown-trigger", @class]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Defines the content area of a dropdown component. The content appears when the dropdown trigger
-  is activated and can be customized with various styles such as size, color, padding, and border.
-
-  ## Examples
-
-  ```elixir
-  <.dropdown_content space="small" rounded="large" width="full" padding="extra_small">
-    <.list size="small">
-      <:item padding="extra_small" icon="hero-envelope">Dashboard</:item>
-      <:item padding="extra_small" icon="hero-camera">Settings</:item>
-      <:item padding="extra_small" icon="hero-camera">Earning</:item>
-      <:item padding="extra_small" icon="hero-calendar">Sign out</:item>
-    </.list>
-  </.dropdown_content>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :width, :string, default: "extra_large", doc: "Determines the element width"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "none", doc: "Determines padding for items"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def dropdown_content(assigns) do
-    ~H"""
-    <div
-      id={@id && "#{@id}-dropdown-content"}
-      role="menu"
-      tabindex="-1"
-      aria-orientation="vertical"
-      aria-labelledby={@id}
-      aria-hidden="true"
-      data-floating-content="true"
-      hidden
-      class={[
-        "dropdown-content transition-all ease-in-out",
-        space_class(@space),
-        color_variant(@variant, @color),
-        rounded_size(@rounded),
-        size_class(@size),
-        width_class(@width),
-        border_class(@border, @variant),
-        padding_size(@padding),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp dropdown_mobile_position("left") do
-    [
-      "md:[&>.dropdown-content]:right-full md:[&>.dropdown-content]:top-0",
-      "md:[&>.dropdown-content]:-translate-x-[5%]",
-      "[&>.dropdown-content]:top-full [&>.dropdown-content]:left-1/2",
-      "[&>.dropdown-content]:translate-x-1/2 [&>.dropdown-content]:translate-y-[6px]"
-    ]
-  end
-
-  defp dropdown_mobile_position("right") do
-    [
-      "md:[&>.dropdown-content]:left-full md:[&>.dropdown-content]:top-0",
-      "md:[&>.dropdown-content]:translate-x-[5%]",
-      "[&>.dropdown-content]:top-full [&>.dropdown-content]:left-1/2",
-      "[&>.dropdown-content]:-translate-x-1/2 [&>.dropdown-content]:translate-y-[6px]"
-    ]
-  end
-
-  defp border_class(_, variant) when variant in ["default", "shadow"], do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-[12px]"
-
-  defp size_class("small"), do: "text-[13px]"
-
-  defp size_class("medium"), do: "text-[14px]"
-
-  defp size_class("large"), do: "text-[15px]"
-
-  defp size_class("extra_large"), do: "text-[16px]"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-2"
-
-  defp padding_size("small"), do: "p-3"
-
-  defp padding_size("medium"), do: "p-4"
-
-  defp padding_size("large"), do: "p-5"
-
-  defp padding_size("extra_large"), do: "p-6"
-
-  defp padding_size("none"), do: nil
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp width_class("extra_small"), do: "lg:min-w-48"
-  defp width_class("small"), do: "lg:min-w-52"
-  defp width_class("medium"), do: "lg:min-w-56"
-  defp width_class("large"), do: "lg:min-w-60"
-  defp width_class("extra_large"), do: "lg:min-w-64"
-  defp width_class("double_large"), do: "lg:min-w-72"
-  defp width_class("triple_large"), do: "lg:min-w-80"
-  defp width_class("quadruple_large"), do: "lg:min-w-96"
-  defp width_class("full"), do: "w-full"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/email_field.ex b/lib/geo_web/components/email_field.ex
deleted file mode 100644
index f506250..0000000
--- a/lib/geo_web/components/email_field.ex
+++ /dev/null
@@ -1,1058 +0,0 @@
-defmodule GeoWeb.Components.EmailField do
-  @moduledoc """
-  The `GeoWeb.Components.EmailField` module provides a customizable email input field
-  component built using Phoenix LiveView. It offers extensive styling options and behavior
-  customizations for email input fields, such as:
-
-  - Setting the size, color, and style of the input field.
-  - Customizable labels, error messages, and descriptions.
-  - Support for floating labels with inner and outer options.
-  - Additional slots for icons or content at the start and end of the input field.
-  - Integration with `Phoenix.HTML.FormField` for easy form handling.
-
-  This component is designed to simplify the creation of styled and functional email
-  input fields in Phoenix LiveView applications, providing developers with the flexibility
-  to customize appearance and behavior according to their application's needs.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `email_field` with options for styling, floating labels, and additional
-  start or end sections.
-
-  The component allows you to create an email input field with various attributes
-  like `size`, `color`, `border`, and `error` handling.
-
-  ## Examples
-
-  ```elixir
-  <.email_field name="name" color="danger" placeholder="This is placeholder" floating="outer"/>
-
-  <.email_field
-    name="name"
-    space="small"
-    color="danger"
-    description="This is description"
-    label="This is outline label Email"
-    placeholder="This is Email placeholder"
-    floating="outer"
-  >
-    <:start_section>
-      <.icon name="hero-home" class="size-4" />
-    </:start_section>
-    <:end_section>
-      <.icon name="hero-home" class="size-4" />
-    </:end_section>
-  </.email_field>
-
-  <.email_field
-    name="name"
-    space="small"
-    color="silver"
-    rounded="extra_large"
-    label="This is outline Silver label Email"
-    placeholder="This is Email placeholder"
-    floating="outer"
-  />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include:
-      ~w(autocomplete disabled form list maxlength minlength spellcheck pattern placeholder readonly required size multiple title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec email_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def email_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:value, fn -> field.value end)
-    |> email_field()
-  end
-
-  def email_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.email-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "email-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "email-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="email"
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def email_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.email-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["email-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "email-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "email-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="email"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small"),
-    do: "[&_.email-field-wrapper_input]:h-8 [&_.email-field-wrapper_.password-field-icon]:size-3"
-
-  defp size_class("small"),
-    do:
-      "[&_.email-field-wrapper_input]:h-9 [&_.email-field-wrapper_.password-field-icon]:size-3.5"
-
-  defp size_class("medium"),
-    do: "[&_.email-field-wrapper_input]:h-10 [&_.email-field-wrapper_.password-field-icon]:size-4"
-
-  defp size_class("large"),
-    do: "[&_.email-field-wrapper_input]:h-11 [&_.email-field-wrapper_.password-field-icon]:size-5"
-
-  defp size_class("extra_large"),
-    do: "[&_.email-field-wrapper_input]:h-12 [&_.email-field-wrapper_.password-field-icon]:size-6"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.email-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.email-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.email-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.email-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.email-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.email-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.email-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.email-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.email-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.email-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.email-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.email-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-white",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#27272a]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.email-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.email-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.email-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#DDDDDD]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.email-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.email-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#007F8C]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#01B8CA]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.email-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.email-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#266EF1]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#6DAAFB]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.email-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.email-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#0E8345]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#06C167]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.email-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.email-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#CA8D01]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#FDC034]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.email-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.email-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#CA8D01]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#FC7F79]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.email-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.email-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#0B84BA]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#3EB7ED]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.email-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.email-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#8750C5]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#BA83F9]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.email-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.email-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#A86438]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#DB976B]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.email-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.email-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#868686]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#A6A6A6]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.email-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#868686] dark:focus-within:[&_.email-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-white dark:[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.email-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.email-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.email-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#DDDDDD]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.email-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.email-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#007F8C]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#01B8CA]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.email-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.email-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#266EF1]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#6DAAFB]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.email-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.email-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#0E8345]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#06C167]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.email-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.email-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FDC034]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.email-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.email-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#DE1135]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FC7F79]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.email-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.email-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#3EB7ED]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.email-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.email-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#8750C5]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#BA83F9]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.email-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.email-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#A86438]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#DB976B]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.email-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.email-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#868686]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#A6A6A6]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#868686] dark:focus-within:[&_.email-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.email-field-wrapper]:bg-[#282828] text-[#282828] [&_.email-field-wrapper]:text-white",
-      "[&_.email-field-wrapper.email-field-error]:border-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white focus-within:[&_.email-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.email-field-wrapper]:bg-white [&_.email-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.email-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#282828]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#868686]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.email-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.email-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#016974]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#77D5E3]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.email-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.email-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#175BCC]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#002661]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#A9C9FF]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.email-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.email-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#166C3B]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#002F14]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#7FD99A]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.email-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.email-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#976A01]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#322300]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#FDD067]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.email-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.email-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#BB032A]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#520810]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#FFB2AB]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.email-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.email-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#0B84BA]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#03212F]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#6EC9F2]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.email-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.email-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#653C94]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#221431]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#CBA2FA]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.email-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.email-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#7E4B2A]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#2A190E]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#E4B190]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.email-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.email-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#727272]",
-      "[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:border-[#BBBBBB]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.email-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.email-field-wrapper]:ring-[#868686] dark:focus-within:[&_.email-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.email-field-wrapper]:bg-[#282828] text-[#282828] [&_.email-field-wrapper]:border-[#727272] text-white",
-      "[&_.email-field-wrapper>input]:placeholder:text-white focus-within:[&_.email-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.email-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#DDDDDD]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.email-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.email-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#007F8C]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#01B8CA]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.email-field-wrapper]:ring-[#01B8CA]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.email-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#266EF1]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#6DAAFB]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.email-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.email-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#0E8345]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#06C167]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.email-field-wrapper]:ring-[#06C167]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.email-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FDC034]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.email-field-wrapper]:ring-[#FDC034]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.email-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#DE1135]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#FC7F79]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.email-field-wrapper]:ring-[#FC7F79]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.email-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#3EB7ED]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.email-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.email-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#8750C5]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#BA83F9]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.email-field-wrapper]:ring-[#BA83F9]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.email-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#A86438]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#DB976B]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.email-field-wrapper]:ring-[#DB976B]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.email-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#868686]",
-      "dark:[&_.email-field-wrapper:not(:has(.email-field-error))]:bg-[#A6A6A6]",
-      "[&_.email-field-wrapper.email-field-error]:bg-rose-700",
-      "[&_.email-field-wrapper>input]:placeholder:text-white dark:[&_.email-field-wrapper>input]:placeholder:text-black",
-      "[&_.email-field-wrapper>input]:text-white dark:[&_.email-field-wrapper>input]:text-black",
-      "focus-within:[&_.email-field-wrapper]:ring-[#868686] dark:focus-within:[&_.email-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.email-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.email-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.email-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.email-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.email-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.email-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.email-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.email-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/fieldset.ex b/lib/geo_web/components/fieldset.ex
deleted file mode 100644
index bd8d4b2..0000000
--- a/lib/geo_web/components/fieldset.ex
+++ /dev/null
@@ -1,687 +0,0 @@
-defmodule GeoWeb.Components.Fieldset do
-  @moduledoc """
-  The `GeoWeb.Components.Fieldset` module provides a reusable and customizable
-  component for creating styled fieldsets in Phoenix LiveView applications.
-
-  It offers various options for styling, layout, and interaction, including:
-
-  - Customizable color themes, border styles, and sizes.
-  - Support for displaying error messages alongside form fields.
-  - Flexible layout options using slots for adding controls and content inside the fieldset.
-  - Global attributes support for enhanced configurability and integration.
-
-  This component is designed to enhance the user interface of forms by providing consistent
-  and visually appealing fieldsets that can be easily integrated into any LiveView application.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a `fieldset` component that groups related form elements visually and semantically.
-
-  ## Examples
-
-  ```elixir
-  <.fieldset space="small" color="success" variant="outline">
-    <:control>
-      <.radio_field name="home" value="Home" space="small" color="success" label="This is label"/>
-    </:control>
-
-    <:control>
-      <.radio_field
-        name="home"
-        value="Home"
-        space="small"
-        color="success"
-        label="This is label of radio"
-      />
-    </:control>
-
-    <:control>
-      <.radio_field
-        name="home"
-        value="Home"
-        space="small"
-        color="success"
-        label="This is label of radio"
-      />
-    </:control>
-  </.fieldset>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :fieldset_class, :string, default: nil, doc: "Custom class for fieldset"
-  attr :legend_class, :string, default: nil, doc: "Custom class for legend"
-  attr :fieldset_wrapper_class, :string, default: nil, doc: "Custom class for wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :legend, :string, default: nil, doc: "Determines a caption for the content of its parent"
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :rest, :global,
-    include: ~w(disabled form title),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :control, required: false, doc: "Defines a collection of elements inside the fieldset"
-
-  def fieldset(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      padding_class(@padding),
-      size_class(@size),
-      space_class(@space),
-      @class
-    ]}>
-      <fieldset class={["fieldset-field", @fieldset_class]}>
-        <legend
-          :if={@legend}
-          class={["fieldset-legend py-0.5 px-1 leading-7", @legend_class]}
-          for={@id}
-        >
-          {@legend}
-        </legend>
-
-        <div
-          :for={{control, index} <- Enum.with_index(@control, 1)}
-          id={"#{@id}-control-#{index}"}
-          class={@fieldset_wrapper_class}
-        >
-          {render_slot(control)}
-        </div>
-      </fieldset>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["block text-sm font-semibold leading-6", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc type: :component
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" /> {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp size_class("extra_small"), do: "text-xs"
-
-  defp size_class("small"), do: "text-sm"
-
-  defp size_class("medium"), do: "text-base"
-
-  defp size_class("large"), do: "text-lg"
-
-  defp size_class("extra_large"), do: "text-xl"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size("extra_small") do
-    "[&_.fieldset-field]:rounded-sm [&_.fieldset-legend]:rounded-t-sm"
-  end
-
-  defp rounded_size("small") do
-    "[&_.fieldset-field]:rounded [&_.fieldset-legend]:rounded-t"
-  end
-
-  defp rounded_size("medium") do
-    "[&_.fieldset-field]:rounded-md [&_.fieldset-legend]:rounded-t-md"
-  end
-
-  defp rounded_size("large") do
-    "[&_.fieldset-field]:rounded-lg [&_.fieldset-legend]:rounded-t-lg"
-  end
-
-  defp rounded_size("extra_large") do
-    "[&_.fieldset-field]:rounded-xl [&_.fieldset-legend]:rounded-t-xl"
-  end
-
-  defp rounded_size("full"), do: "[&_.fieldset-field]:rounded-full"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "[&_.fieldset-field]:border"
-  defp border_class("small", _), do: "[&_.fieldset-field]:border-2"
-  defp border_class("medium", _), do: "[&_.fieldset-field]:border-[3px]"
-  defp border_class("large", _), do: "[&_.fieldset-field]:border-4"
-  defp border_class("extra_large", _), do: "[&_.fieldset-field]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp padding_class("extra_small"), do: "[&_.fieldset-field]:p-2"
-
-  defp padding_class("small"), do: "[&_.fieldset-field]:p-3"
-
-  defp padding_class("medium"), do: "[&_.fieldset-field]:p-4"
-
-  defp padding_class("large"), do: "[&_.fieldset-field]:p-5"
-
-  defp padding_class("extra_large"), do: "[&_.fieldset-field]:p-6"
-
-  defp padding_class(params) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "[&_fieldset]:space-y-1"
-
-  defp space_class("small"), do: "[&_fieldset]:space-y-1.5"
-
-  defp space_class("medium"), do: "[&_fieldset]:space-y-2"
-
-  defp space_class("large"), do: "[&_fieldset]:space-y-2.5"
-
-  defp space_class("extra_large"), do: "[&_fieldset]:space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "text-[#09090b] [&_.fieldset-field]:border-[#e4e4e7] [&_.fieldset-field]:bg-white [&_.fieldset-field]:shadow-sm",
-      "dark:text-[#FAFAFA] dark:[&_.fieldset-field]:border-[#27272a] dark:[&_.fieldset-field]:bg-[#18181B]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&_.fieldset-field]:bg-white text-black",
-      "[&_.fieldset-legend]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&_.fieldset-field]:bg-[#282828] text-white",
-      "[&_.fieldset-legend]:bg-[#282828] dark:[&_.fieldset-legend]:bg-[#18181B]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&_.fieldset-field]:bg-[#4B4B4B] text-white dark:[&_.fieldset-field]:bg-[#DDDDDD] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#4B4B4B] dark:[&_.fieldset-legend]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&_.fieldset-field]:bg-[#007F8C] text-white dark:[&_.fieldset-field]:bg-[#01B8CA] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#007F8C] dark:[&_.fieldset-legend]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&_.fieldset-field]:bg-[#266EF1] text-white dark:[&_.fieldset-field]:bg-[#6DAAFB] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#266EF1] dark:[&_.fieldset-legend]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&_.fieldset-field]:bg-[#0E8345] text-white dark:[&_.fieldset-field]:bg-[#06C167] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#0E8345] dark:[&_.fieldset-legend]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&_.fieldset-field]:bg-[#CA8D01] text-white dark:[&_.fieldset-field]:bg-[#FDC034] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#CA8D01] dark:[&_.fieldset-legend]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&_.fieldset-field]:bg-[#DE1135] text-white dark:[&_.fieldset-field]:bg-[#FC7F79] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#DE1135] dark:[&_.fieldset-legend]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&_.fieldset-field]:bg-[#0B84BA] text-white dark:[&_.fieldset-field]:bg-[#3EB7ED] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#0B84BA] dark:[&_.fieldset-legend]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&_.fieldset-field]:bg-[#8750C5] text-white dark:[&_.fieldset-field]:bg-[#BA83F9] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#8750C5] dark:[&_.fieldset-legend]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&_.fieldset-field]:bg-[#A86438] text-white dark:[&_.fieldset-field]:bg-[#DB976B] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#A86438] dark:[&_.fieldset-legend]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&_.fieldset-field]:bg-[#868686] text-white dark:[&_.fieldset-field]:bg-[#A6A6A6] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#868686] dark:[&_.fieldset-legend]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] [&_.fieldset-field]:border-[#4B4B4B] dark:text-[#DDDDDD] dark:[&_.fieldset-field]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] [&_.fieldset-field]:border-[#007F8C]  dark:text-[#01B8CA] dark:[&_.fieldset-field]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] [&_.fieldset-field]:border-[#266EF1] dark:text-[#6DAAFB] dark:[&_.fieldset-field]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] [&_.fieldset-field]:border-[#0E8345] dark:text-[#06C167] dark:[&_.fieldset-field]:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] [&_.fieldset-field]:border-[#CA8D01] dark:text-[#FDC034] dark:[&_.fieldset-field]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] [&_.fieldset-field]:border-[#DE1135] dark:text-[#FC7F79] dark:[&_.fieldset-field]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] [&_.fieldset-field]:border-[#0B84BA] dark:text-[#3EB7ED] dark:[&_.fieldset-field]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] [&_.fieldset-field]:border-[#8750C5] dark:text-[#BA83F9] dark:[&_.fieldset-field]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] [&_.fieldset-field]:border-[#A86438] dark:text-[#DB976B] dark:[&_.fieldset-field]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] [&_.fieldset-field]:border-[#868686] dark:text-[#A6A6A6] dark:[&_.fieldset-field]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&_.fieldset-field]:bg-[#4B4B4B] text-white dark:[&_.fieldset-field]:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#4B4B4B] dark:[&_.fieldset-legend]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&_.fieldset-field]:bg-[#007F8C] text-white dark:[&_.fieldset-field]:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#007F8C] dark:[&_.fieldset-legend]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&_.fieldset-field]:bg-[#266EF1] text-white dark:[&_.fieldset-field]:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#266EF1] dark:[&_.fieldset-legend]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&_.fieldset-field]:bg-[#0E8345] text-white dark:[&_.fieldset-field]:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#0E8345] dark:[&_.fieldset-legend]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&_.fieldset-field]:bg-[#CA8D01] text-white dark:[&_.fieldset-field]:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#CA8D01] dark:[&_.fieldset-legend]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&_.fieldset-field]:bg-[#DE1135] text-white dark:[&_.fieldset-field]:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#DE1135] dark:[&_.fieldset-legend]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&_.fieldset-field]:bg-[#0B84BA] text-white dark:[&_.fieldset-field]:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#0B84BA] dark:[&_.fieldset-legend]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&_.fieldset-field]:bg-[#8750C5] text-white dark:[&_.fieldset-field]:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#8750C5] dark:[&_.fieldset-legend]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&_.fieldset-field]:bg-[#A86438] text-white dark:[&_.fieldset-field]:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#A86438] dark:[&_.fieldset-legend]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&_.fieldset-field]:bg-[#868686] text-white dark:[&_.fieldset-field]:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "[&_.fieldset-legend]:bg-[#868686] dark:[&_.fieldset-legend]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "[&_.fieldset-field]:bg-white text-black [&_.fieldset-field]:border-[#DDDDDD]",
-      "[&_.fieldset-legend]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "[&_.fieldset-field]:bg-[#282828] text-white [&_.fieldset-field]:border-[#727272]",
-      "[&_.fieldset-legend]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] [&_.fieldset-field]:border-[#282828] [&_.fieldset-field]:bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:[&_.fieldset-field]:border-[#E8E8E8] dark:[&_.fieldset-field]:bg-[#4B4B4B]",
-      "[&_.fieldset-legend]:bg-[#F3F3F3] dark:[&_.fieldset-legend]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] [&_.fieldset-field]:border-[#016974] [&_.fieldset-field]:bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:[&_.fieldset-field]:border-[#77D5E3] dark:[&_.fieldset-field]:bg-[#002D33]",
-      "[&_.fieldset-legend]:bg-[#E2F8FB] dark:[&_.fieldset-legend]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] [&_.fieldset-field]:border-[#175BCC] [&_.fieldset-field]:bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:[&_.fieldset-field]:border-[#A9C9FF] dark:[&_.fieldset-field]:bg-[#002661]",
-      "[&_.fieldset-legend]:bg-[#EFF4FE] dark:[&_.fieldset-legend]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] [&_.fieldset-field]:border-[#166C3B] [&_.fieldset-field]:bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:[&_.fieldset-field]:border-[#7FD99A] dark:[&_.fieldset-field]:bg-[#002F14]",
-      "[&_.fieldset-legend]:bg-[#EAF6ED] dark:[&_.fieldset-legend]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] [&_.fieldset-field]:border-[#976A01] [&_.fieldset-field]:bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:[&_.fieldset-field]:border-[#FDD067] dark:[&_.fieldset-field]:bg-[#322300]",
-      "[&_.fieldset-legend]:bg-[#FFF7E6] dark:[&_.fieldset-legend]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] [&_.fieldset-field]:border-[#BB032A] [&_.fieldset-field]:bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:[&_.fieldset-field]:border-[#FFB2AB] dark:[&_.fieldset-field]:bg-[#520810]",
-      "[&_.fieldset-legend]:bg-[#FFF0EE] dark:[&_.fieldset-legend]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] [&_.fieldset-field]:border-[#0B84BA] [&_.fieldset-field]:bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:[&_.fieldset-field]:border-[#6EC9F2] dark:[&_.fieldset-field]:bg-[#03212F]",
-      "[&_.fieldset-legend]:bg-[#E7F6FD] dark:[&_.fieldset-legend]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] [&_.fieldset-field]:border-[#653C94] [&_.fieldset-field]:bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:[&_.fieldset-field]:border-[#CBA2FA] dark:[&_.fieldset-field]:bg-[#221431]",
-      "[&_.fieldset-legend]:bg-[#F6F0FE] dark:[&_.fieldset-legend]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] [&_.fieldset-field]:border-[#7E4B2A] [&_.fieldset-field]:bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:[&_.fieldset-field]:border-[#E4B190] dark:[&_.fieldset-field]:bg-[#2A190E]",
-      "[&_.fieldset-legend]:bg-[#FBF2ED] dark:[&_.fieldset-legend]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] [&_.fieldset-field]:border-[#727272] [&_.fieldset-field]:bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:[&_.fieldset-field]:border-[#BBBBBB] dark:[&_.fieldset-field]:bg-[#4B4B4B]",
-      "[&_.fieldset-legend]:bg-[#F3F3F3] dark:[&_.fieldset-legend]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#282828] dark:[&_.fieldset-legend]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#016974] dark:[&_.fieldset-legend]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#175BCC] dark:[&_.fieldset-legend]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#166C3B] dark:[&_.fieldset-legend]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#976A01] dark:[&_.fieldset-legend]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#BB032A] dark:[&_.fieldset-legend]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#08638C] dark:[&_.fieldset-legend]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#653C94] dark:[&_.fieldset-legend]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#7E4B2A] dark:[&_.fieldset-legend]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&_.fieldset-field]:bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black",
-      "[&_.fieldset-legend]:bg-[#5E5E5E] dark:[&_.fieldset-legend]:bg-[#868686]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/file_field.ex b/lib/geo_web/components/file_field.ex
deleted file mode 100644
index c0e47dc..0000000
--- a/lib/geo_web/components/file_field.ex
+++ /dev/null
@@ -1,941 +0,0 @@
-defmodule GeoWeb.Components.FileField do
-  @moduledoc """
-  The `GeoWeb.Components.FileField` module provides a versatile and customizable component
-  for handling file uploads in Phoenix LiveView applications.
-
-  This module supports various configurations, allowing users to upload files or
-  images through traditional file inputs or interactive dropzones.
-
-  ### Key Features:
-  - **Custom Styling Options:** Allows for customized styles, including colors, borders, and rounded corners.
-  - **Flexible Input Types:** Supports both live uploads and standard file inputs.
-  - **Dropzone Functionality:** Provides an interactive drag-and-drop area for file
-  uploads with customizable icons and descriptions.
-  - **Error Handling:** Displays error messages for issues like file size, file type,
-  and maximum number of files.
-  - **Upload Progress:** Shows real-time upload progress for each file.
-
-  This component is designed to simplify file handling in forms and offers a visually
-  appealing and user-friendly experience for uploading files in LiveView applications.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Progress, only: [progress: 1]
-  import GeoWeb.Components.Spinner, only: [spinner: 1]
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  Renders a `file_input` field with customizable styles, labels, and live upload capabilities.
-
-  It can be used as a simple file input or as a dropzone with drag-and-drop support for files and images.
-
-  ## Examples
-
-  ```elixir
-  <.file_field color="danger" />
-  <.file_field target={:avatar} uploads={@uploads} dropzone/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :live, :boolean, default: false, doc: "Specifies whether this upload is live or input file"
-  attr :space, :string, default: "medium", doc: "Space between items"
-
-  attr :size, :string,
-    default: "extra_small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-  attr :dashed, :boolean, default: true, doc: "Determines dashed border"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :uploads, :any, doc: "LiveView upload map"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :dropzone, :boolean, default: false, doc: ""
-  attr :dropzone_type, :string, default: "file", doc: "file, image"
-  attr :target, :atom, doc: "Name of upload input when is used as Live Upload"
-  attr :dropzone_icon, :string, default: "hero-cloud-arrow-up", doc: ""
-  attr :dropzone_title, :string, default: "Click to upload, or drag and drop a file", doc: ""
-  attr :dropzone_description, :string, default: nil, doc: "Specifies description for dropzone"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include:
-      ~w(autocomplete disabled form checked multiple readonly min max step required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec file_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def file_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn ->
-      if assigns.rest[:multiple], do: field.name <> "[]", else: field.name
-    end)
-    |> assign_new(:value, fn -> field.value end)
-    |> file_field()
-  end
-
-  def file_field(%{dropzone: true, dropzone_type: "file"} = assigns) do
-    targeted_upload = assigns.uploads[assigns.target]
-
-    assigns =
-      assigns
-      |> assign_new(:entries, fn -> targeted_upload.entries end)
-      |> assign_new(:upload_error, fn -> targeted_upload end)
-      |> assign_new(:upload, fn -> targeted_upload end)
-
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color),
-      border_class(@border, @variant),
-      rounded_size(@rounded),
-      size_class(@size),
-      @dashed && "[&_.dropzone-wrapper]:border-dashed",
-      @class
-    ]}>
-      <label
-        class={[
-          "dropzone-wrapper group flex flex-col items-center justify-center w-full cursor-pointer"
-        ]}
-        phx-drop-target={@upload.ref}
-        for={@id}
-        {@rest}
-      >
-        <div class="flex flex-col gap-3 items-center justify-center pt-5 pb-6">
-          <.icon name={@dropzone_icon} class="size-14" />
-          <div class="mb-2 font-semibold">
-            {@dropzone_title}
-          </div>
-
-          <div>
-            {@dropzone_description}
-          </div>
-        </div>
-        <.live_file_input id={@id} upload={@upload} class="hidden" />
-      </label>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-
-      <div aria-live="polite" class="mt-5 space-y-4">
-        <%= for entry <- @entries do %>
-          <div
-            class="upload-item border rounded relative p-3"
-            role="group"
-            aria-label={gettext("Uploading %{file}", file: entry.client_name)}
-          >
-            <div class="flex justify-around gap-3">
-              <.icon name="hero-document-arrow-up" class="size-8" />
-              <div class="w-full space-y-3">
-                <div class="text-ellipsis	overflow-hidden w-44 whitespace-nowrap">
-                  {entry.client_name}
-                </div>
-
-                <div>
-                  {convert_to_mb(entry.client_size)} <span>MB</span>
-                </div>
-
-                <.progress value={entry.progress} color={@color} size="extra_small" />
-                <span class="sr-only">
-                  {gettext("Uploading %{file}: %{progress} percent",
-                    file: entry.client_name,
-                    progress: entry.progress
-                  )}
-                </span>
-              </div>
-            </div>
-
-            <button
-              type="button"
-              phx-click="cancel-upload"
-              phx-value-ref={entry.ref}
-              aria-label={gettext("Cancel upload for %{file}", file: entry.client_name)}
-              class="absolute top-2 right-2 text-custome-black-100/60 hover:text-custome-black-100"
-            >
-              <.icon name="hero-x-mark" class="size-4" />
-            </button>
-
-            <%= for err <- upload_errors(@upload_error, entry) do %>
-              <p class="text-rose-600 font-medium text-xs mt-3">Error: {error_to_string(err)}</p>
-            <% end %>
-          </div>
-        <% end %>
-      </div>
-
-      <%= for err <- upload_errors(@upload_error) do %>
-        <p class="text-rose-600 font-medium text-xs">{error_to_string(err)}</p>
-      <% end %>
-    </div>
-    """
-  end
-
-  def file_field(%{dropzone: true, dropzone_type: "image"} = assigns) do
-    targeted_upload = assigns.uploads[assigns.target]
-
-    assigns =
-      assigns
-      |> assign_new(:entries, fn -> targeted_upload.entries end)
-      |> assign_new(:upload_error, fn -> targeted_upload end)
-      |> assign_new(:upload, fn -> targeted_upload end)
-
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color),
-      border_class(@border, @variant),
-      rounded_size(@rounded),
-      size_class(@size),
-      @dashed && "[&_.dropzone-wrapper]:border-dashed",
-      @class
-    ]}>
-      <label
-        class={[
-          "dropzone-wrapper group flex flex-col items-center justify-center w-full cursor-pointer"
-        ]}
-        phx-drop-target={@upload.ref}
-        for={@id}
-        {@rest}
-      >
-        <div class="flex flex-col gap-3 items-center justify-center pt-5 pb-6">
-          <.icon name={@dropzone_icon} class="size-14" />
-          <div class="mb-2 font-semibold">
-            {@dropzone_title}
-          </div>
-
-          <div>
-            {@dropzone_description}
-          </div>
-        </div>
-        <.live_file_input id={@id} upload={@upload} class="hidden" />
-      </label>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-
-      <%= for err <- upload_errors(@upload_error) do %>
-        <p class="text-rose-600 font-semibold text-sm my-5">{error_to_string(err)}</p>
-      <% end %>
-
-      <div class="flex flex-wrap gap-3 my-3">
-        <%= for entry <- @entries do %>
-          <div>
-            <div
-              role="group"
-              aria-label={gettext("Uploading %{file}", file: entry.client_name)}
-              class="relative"
-            >
-              <div class="rounded w-24 h-24 overflow-hidden">
-                <figure class="w-full h-full object-cover">
-                  <.live_img_preview entry={entry} class="w-full h-full object-cover rounded" />
-                </figure>
-              </div>
-
-              <button
-                type="button"
-                phx-click="cancel-upload"
-                phx-value-ref={entry.ref}
-                aria-label={gettext("Cancel upload for %{file}", file: entry.client_name)}
-                class="bg-black/30 rounded p-px text-white flex justify-center items-center absolute top-2 right-2 z-10"
-              >
-                <.icon name="hero-x-mark" class="size-4" />
-              </button>
-
-              <div
-                :if={!entry.done?}
-                role="status"
-                class="absolute inset-0 bg-black/25 flex justify-center items-center"
-              >
-                <.spinner color="base" />
-                <span class="sr-only">{gettext("Uploading %{file}", file: entry.client_name)}</span>
-              </div>
-            </div>
-            <%= for err <- upload_errors(@upload_error, entry) do %>
-              <p class="text-rose-600 font-medium text-xs mt-3">Error: {error_to_string(err)}</p>
-            <% end %>
-          </div>
-        <% end %>
-      </div>
-    </div>
-    """
-  end
-
-  def file_field(assigns) do
-    ~H"""
-    <div class={[
-      rounded_size(@rounded),
-      color_class(@color),
-      space_class(@space),
-      @class
-    ]}>
-      <.label for={@id}>{@label}</.label>
-
-      <%= if @live do %>
-        <.live_file_input
-          upload={@upload}
-          id={@id}
-          class={[
-            "file-field block w-full cursor-pointer focus:outline-none file:border-0 file:cursor-pointer",
-            "file:py-3 file:px-8 file:font-bold file:-ms-4 file:me-4"
-          ]}
-          {@rest}
-        />
-      <% else %>
-        <input
-          name={@name}
-          id={@id}
-          class={[
-            "file-field block w-full cursor-pointer focus:outline-none file:border-0 file:cursor-pointer",
-            "file:py-3 file:px-8 file:font-bold file:-ms-4 file:me-4"
-          ]}
-          type="file"
-          {@rest}
-        />
-      <% end %>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["block text-sm font-semibold leading-6", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc type: :component
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" /> {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  def convert_to_mb(size_in_bytes) when is_integer(size_in_bytes) do
-    Float.round(size_in_bytes / (1024 * 1024), 2)
-  end
-
-  defp error_to_string(:too_large), do: "Too large"
-  defp error_to_string(:not_accepted), do: "You have selected an unacceptable file type"
-  defp error_to_string(:too_many_files), do: "You have selected too many files"
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "[&_.dropzone-wrapper]:border"
-  defp border_class("small", _), do: "[&_.dropzone-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.dropzone-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.dropzone-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.dropzone-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "[&_.dropzone-wrapper]:h-52"
-
-  defp size_class("small"), do: "[&_.dropzone-wrapper]:h-56"
-
-  defp size_class("medium"), do: "[&_.dropzone-wrapper]:h-60"
-
-  defp size_class("large"), do: "[&_.dropzone-wrapper]:h-64"
-
-  defp size_class("extra_large"), do: "[&_.dropzone-wrapper]:h-72"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size("extra_small"),
-    do: "[&_.file-field]:rounded-sm [&_.dropzone-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.file-field]:rounded [&_.dropzone-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.file-field]:rounded-md [&_.dropzone-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.file-field]:rounded-lg [&_.dropzone-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"),
-    do: "[&_.file-field]:rounded-xl [&_.dropzone-wrapper]:rounded-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "[&_.file-field]:bg-white file:[&_.file-field]:text-[#09090b] [&_.file-field]:text-[#09090b] file:[&_.file-field]:bg-[#e4e4e7]",
-      "dark:[&_.file-field]:bg-[#27272a] dark:file:[&_.file-field]:bg-[#18181B]",
-      "dark:file:[&_.file-field]:text-[#FAFAFA] dark:[&_.file-field]:text-[#FAFAFA]"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&_.file-field]:bg-[#4B4B4B] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#282828]",
-      "dark:[&_.file-field]:bg-[#E8E8E8] dark:file:[&_.file-field]:bg-[#DDDDDD]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "[&_.file-field]:bg-[#007F8C] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#016974]",
-      "dark:[&_.file-field]:bg-[#77D5E3] dark:file:[&_.file-field]:bg-[#01B8CA]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&_.file-field]:bg-[#266EF1] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#175BCC]",
-      "dark:[&_.file-field]:bg-[#A9C9FF] dark:file:[&_.file-field]:bg-[#6DAAFB]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&_.file-field]:bg-[#0E8345] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#166C3B]",
-      "dark:[&_.file-field]:bg-[#7FD99A] dark:file:[&_.file-field]:bg-[#06C167]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&_.file-field]:bg-[#CA8D01] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#976A01]",
-      "dark:[&_.file-field]:bg-[#FDD067] dark:file:[&_.file-field]:bg-[#FDC034]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&_.file-field]:bg-[#DE1135] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#BB032A]",
-      "dark:[&_.file-field]:bg-[#FFB2AB] dark:file:[&_.file-field]:bg-[#FC7F79]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&_.file-field]:bg-[#0B84BA] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#08638C]",
-      "dark:[&_.file-field]:bg-[#6EC9F2] dark:file:[&_.file-field]:bg-[#3EB7ED]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&_.file-field]:bg-[#8750C5] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#653C94]",
-      "dark:[&_.file-field]:bg-[#CBA2FA] dark:file:[&_.file-field]:bg-[#BA83F9]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&_.file-field]:bg-[#A86438] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#7E4B2A]",
-      "dark:[&_.file-field]:bg-[#E4B190] dark:file:[&_.file-field]:bg-[#DB976B]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&_.file-field]:bg-[#868686] file:[&_.file-field]:text-white [&_.file-field]:text-white file:[&_.file-field]:bg-[#727272]",
-      "dark:[&_.file-field]:bg-[#BBBBBB] dark:file:[&_.file-field]:bg-[#A6A6A6]",
-      "dark:file:[&_.file-field]:text-black dark:[&_.file-field]:text-black"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "text-[#09090b] [&_.dropzone-wrapper]:border-[#e4e4e7] [&_.dropzone-wrapper]:bg-white shadow-sm",
-      "dark:text-[#FAFAFA] dark:[&_.dropzone-wrapper]:border-[#27272a] dark:[&_.dropzone-wrapper]:bg-[#18181B]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&_.dropzone-wrapper]:bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#4B4B4B] text-white dark:[&_.dropzone-wrapper]:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#007F8C] text-white dark:[&_.dropzone-wrapper]:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#266EF1] text-white dark:[&_.dropzone-wrapper]:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#0E8345] text-white dark:[&_.dropzone-wrapper]:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#CA8D01] text-white dark:[&_.dropzone-wrapper]:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#DE1135] text-white dark:[&_.dropzone-wrapper]:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#0B84BA] text-white dark:[&_.dropzone-wrapper]:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#8750C5] text-white dark:[&_.dropzone-wrapper]:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#A86438] text-white dark:[&_.dropzone-wrapper]:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#868686] text-white dark:[&_.dropzone-wrapper]:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] [&_.dropzone-wrapper]:border-[#4B4B4B] dark:text-[#DDDDDD] dark:[&_.dropzone-wrapper]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] [&_.dropzone-wrapper]:border-[#007F8C]  dark:text-[#01B8CA] dark:[&_.dropzone-wrapper]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] [&_.dropzone-wrapper]:border-[#266EF1] dark:text-[#6DAAFB] dark:[&_.dropzone-wrapper]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] [&_.dropzone-wrapper]:border-[#0E8345] dark:text-[#06C167] dark:[&_.dropzone-wrapper]:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] [&_.dropzone-wrapper]:border-[#CA8D01] dark:text-[#FDC034] dark:[&_.dropzone-wrapper]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] [&_.dropzone-wrapper]:border-[#DE1135] dark:text-[#FC7F79] dark:[&_.dropzone-wrapper]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] [&_.dropzone-wrapper]:border-[#0B84BA] dark:text-[#3EB7ED] dark:[&_.dropzone-wrapper]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] [&_.dropzone-wrapper]:border-[#8750C5] dark:text-[#BA83F9] dark:[&_.dropzone-wrapper]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] [&_.dropzone-wrapper]:border-[#A86438] dark:text-[#DB976B] dark:[&_.dropzone-wrapper]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] [&_.dropzone-wrapper]:border-[#868686] dark:text-[#A6A6A6] dark:[&_.dropzone-wrapper]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#4B4B4B] text-white dark:[&_.dropzone-wrapper]:bg-[#DDDDDD] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#007F8C] text-white dark:[&_.dropzone-wrapper]:bg-[#01B8CA] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#266EF1] text-white dark:[&_.dropzone-wrapper]:bg-[#6DAAFB] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#0E8345] text-white hover:[&_.dropzone-wrapper]:bg-[#166C3B] dark:[&_.dropzone-wrapper]:bg-[#06C167] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#CA8D01] text-white dark:[&_.dropzone-wrapper]:bg-[#FDC034] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#DE1135] text-white dark:[&_.dropzone-wrapper]:bg-[#FC7F79] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#0B84BA] text-white dark:[&_.dropzone-wrapper]:bg-[#3EB7ED] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#8750C5] text-white dark:[&_.dropzone-wrapper]:bg-[#BA83F9] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#A86438] text-white dark:[&_.dropzone-wrapper]:bg-[#DB976B] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#868686] text-white dark:[&_.dropzone-wrapper]:bg-[#A6A6A6] dark:text-black",
-      "[&_.dropzone-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.dropzone-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.dropzone-wrapper]:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "[&_.dropzone-wrapper]:bg-white text-black [&_.dropzone-wrapper]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "[&_.dropzone-wrapper]:bg-[#282828] text-white [&_.dropzone-wrapper]:border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] [&_.dropzone-wrapper]:border-[#282828] [&_.dropzone-wrapper]:bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:[&_.dropzone-wrapper]:border-[#E8E8E8] dark:[&_.dropzone-wrapper]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] [&_.dropzone-wrapper]:border-[#016974] [&_.dropzone-wrapper]:bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:[&_.dropzone-wrapper]:border-[#77D5E3] dark:[&_.dropzone-wrapper]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] [&_.dropzone-wrapper]:border-[#175BCC] [&_.dropzone-wrapper]:bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:[&_.dropzone-wrapper]:border-[#A9C9FF] dark:[&_.dropzone-wrapper]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] [&_.dropzone-wrapper]:border-[#166C3B] [&_.dropzone-wrapper]:bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:[&_.dropzone-wrapper]:border-[#7FD99A] dark:[&_.dropzone-wrapper]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] [&_.dropzone-wrapper]:border-[#976A01] [&_.dropzone-wrapper]:bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:[&_.dropzone-wrapper]:border-[#FDD067] dark:[&_.dropzone-wrapper]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] [&_.dropzone-wrapper]:border-[#BB032A] [&_.dropzone-wrapper]:bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:[&_.dropzone-wrapper]:border-[#FFB2AB] dark:[&_.dropzone-wrapper]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] [&_.dropzone-wrapper]:border-[#0B84BA] [&_.dropzone-wrapper]:bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:[&_.dropzone-wrapper]:border-[#6EC9F2] dark:[&_.dropzone-wrapper]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] [&_.dropzone-wrapper]:border-[#653C94] [&_.dropzone-wrapper]:bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:[&_.dropzone-wrapper]:border-[#CBA2FA] dark:[&_.dropzone-wrapper]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] [&_.dropzone-wrapper]:border-[#7E4B2A] [&_.dropzone-wrapper]:bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:[&_.dropzone-wrapper]:border-[#E4B190] dark:[&_.dropzone-wrapper]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] [&_.dropzone-wrapper]:border-[#727272] [&_.dropzone-wrapper]:bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:[&_.dropzone-wrapper]:border-[#BBBBBB] dark:[&_.dropzone-wrapper]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&_.dropzone-wrapper]:bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/footer.ex b/lib/geo_web/components/footer.ex
deleted file mode 100644
index 35a6e54..0000000
--- a/lib/geo_web/components/footer.ex
+++ /dev/null
@@ -1,624 +0,0 @@
-defmodule GeoWeb.Components.Footer do
-  @moduledoc """
-  The `GeoWeb.Components.Footer` module provides a customizable footer component for Phoenix applications,
-  allowing for various styles, colors, and layout options. It supports different design variants
-  such as default, outline, transparent, shadow, and unbordered.
-
-  ### Features:
-
-  - **Customizable Styles:** Choose from multiple color themes and design variants.
-  - **Flexible Layouts:** Control text positioning, spacing, padding, and border styles.
-  - **Responsive Design:** Set max width and rounded corners for adaptive layouts.
-  - **Global Attributes Support:** Allows for additional attributes to be merged with component defaults.
-
-  This component is designed to enhance the appearance and functionality of footers in web applications.
-  """
-
-  use Phoenix.Component
-
-  @doc """
-  Renders a customizable `footer` component with different sections and styling options, allowing
-  for the inclusion of text, links, and other content.
-
-  ## Examples
-
-  ```elixir
-  <.footer color="secondary" padding="large" space="medium">
-    <.footer_section class="border-b" padding="small">Mishka Chelekom</.footer_section>
-
-    <.footer_section class="grid grid-cols-3 gap-2 justify-between" padding="large">
-      <.list color="secondary">
-        <:item><a href="/">Home</a></:item>
-        <:item><a href="/">Contact</a></:item>
-        <:item><a href="/">About</a></:item>
-      </.list>
-
-      <.list color="secondary" style="list-disc">
-        <:item>list</:item>
-        <:item>list</:item>
-        <:item>list</:item>
-      </.list>
-
-      <div>
-        Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an
-        unknown printer took a galley of type and scrambled it to make a type specimen bookged.
-      </div>
-    </.footer_section>
-
-    <.footer_section text_position="center" class="border-t" padding="small">
-      © 2023 Mishka Chelekom
-    </.footer_section>
-  </.footer>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :text_position, :string, default: "", doc: "Determines the element' text position"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :max_width, :string, default: "", doc: "Determines the style of element max width"
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to footer content wrapper"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def footer(assigns) do
-    ~H"""
-    <footer
-      id={@id}
-      class={[
-        border_class(@border, @variant),
-        color_variant(@variant, @color),
-        rounded_size(@rounded),
-        padding_size(@padding),
-        text_position(@text_position),
-        maximum_width(@max_width),
-        space_class(@space),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={@wrapper_class}>
-        {render_slot(@inner_block)}
-      </div>
-    </footer>
-    """
-  end
-
-  @doc """
-  Renders a section within a footer component, allowing for customized text alignment, spacing, and styling.
-
-  ## Examples
-
-  ```elixir
-  <.footer_section class="border-b" padding="small">Mishka Chelekom</.footer_section>
-  ```
-  """
-  @doc type: :component
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :text_position, :string, default: "", doc: "Determines the element' text position"
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def footer_section(assigns) do
-    ~H"""
-    <div class={[
-      padding_size(@padding),
-      text_position(@text_position),
-      space_class(@space),
-      @font_weight,
-      @class
-    ]}>
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp text_position("left"), do: "text-left"
-  defp text_position("right"), do: "text-right"
-  defp text_position("center"), do: "text-center"
-  defp text_position(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp maximum_width("extra_small"), do: "[&>div]:max-w-3xl	[&>div]:mx-auto"
-  defp maximum_width("small"), do: "[&>div]:max-w-4xl [&>div]:mx-auto"
-  defp maximum_width("medium"), do: "[&>div]:max-w-5xl [&>div]:mx-auto"
-  defp maximum_width("large"), do: "[&>div]:max-w-6xl [&>div]:mx-auto"
-  defp maximum_width("extra_large"), do: "[&>div]:max-w-7xl [&>div]:mx-auto"
-  defp maximum_width(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: "border-t-0"
-  defp border_class("extra_small", _), do: "border-t"
-  defp border_class("small", _), do: "border-t-2"
-  defp border_class("medium", _), do: "border-t-[3px]"
-  defp border_class("large", _), do: "border-t-4"
-  defp border_class("extra_large", _), do: "border-t-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-t-sm"
-
-  defp rounded_size("small"), do: "rounded-t"
-
-  defp rounded_size("medium"), do: "rounded-t-md"
-
-  defp rounded_size("large"), do: "rounded-t-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-t-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/form_wrapper.ex b/lib/geo_web/components/form_wrapper.ex
deleted file mode 100644
index c028229..0000000
--- a/lib/geo_web/components/form_wrapper.ex
+++ /dev/null
@@ -1,539 +0,0 @@
-defmodule GeoWeb.Components.FormWrapper do
-  @moduledoc """
-  The `GeoWeb.Components.FormWrapper` module provides a flexible and customizable form
-  wrapper component for Phoenix applications. It offers various options for styling,
-  size, and layout to suit different form designs and requirements.
-
-  ### Features:
-  - **Customizable Styles:** Choose from multiple color themes, border styles, and design variants.
-  - **Layout Flexibility:** Control padding, spacing, and border radius to adjust the form's appearance.
-  - **Form Slots:** Define inner content and actions slots to organize form elements and buttons.
-  - **Global Attribute Support:** Allows for additional attributes like `autocomplete`, `method`,
-  and more to be merged with component defaults.
-
-  This component is ideal for wrapping forms with consistent styles and structure across an application.
-  """
-
-  use Phoenix.Component
-
-  @doc """
-  Renders a `form_wrapper` component that supports custom styles and input fields.
-
-  It allows for the inclusion of multiple input fields and form actions, such as a submit button,
-  within a consistent layout.
-
-  ## Examples
-
-  ```elixir
-  <.form_wrapper class="space-y-10">
-    <div class="grid lg:grid-cols-2 gap-2">
-      <.text_field name="name1" space="small" color="light"/>
-      ...
-    </div>
-  </.form_wrapper>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "", doc: "Determines color theme"
-  attr :variant, :string, default: "", doc: "Determines the style"
-  attr :border, :string, default: "", doc: "Determines border style"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :form_wrapper_class, :string, default: "", doc: "Custom classes form wrapper"
-  attr :action_wrapper_class, :string, default: "", doc: "Custom classes action wrapper"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :for, :any, required: false, doc: "the data structure for the form"
-  attr :as, :any, default: nil, doc: "the server side parameter to collect all input under"
-
-  attr :rest, :global,
-    include: ~w(autocomplete name rel action enctype method novalidate target multipart),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-  slot :actions, required: false, doc: "the slot for form actions, such as a submit button"
-
-  def form_wrapper(assigns) do
-    ~H"""
-    <.form
-      :let={f}
-      for={@for}
-      as={@as}
-      id={@id}
-      class={[
-        color_variant(@variant, @color),
-        padding_class(@padding),
-        rounded_size(@rounded),
-        border_class(@border, @variant),
-        space_class(@space),
-        size_class(@size),
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={["wrapper-form", @form_wrapper_class]}>
-        {render_slot(@inner_block, f)}
-        <div :for={action <- @actions} class={["wrapper-form-actions", @action_wrapper_class]}>
-          {render_slot(action, f)}
-        </div>
-      </div>
-    </.form>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :for, :any, required: true, doc: "the data structure for the form"
-  attr :as, :any, default: nil, doc: "the server side parameter to collect all input under"
-
-  attr :extra_classes, :list,
-    default: [
-      "[&_.wrapper-form]:mt-10 [&_.wrapper-form]:space-y-8",
-      "[&_.wrapper-form]:bg-white [&_.wrapper-form-actions]:mt-2",
-      "[&_.wrapper-form-actions]:flex [&_.wrapper-form-actions]:items-center",
-      "[&_.wrapper-form-actions]:justify-between [&_.wrapper-form-actions]:gap-6"
-    ],
-    doc: "additional classes to apply to the form wrapper"
-
-  attr :rest, :global,
-    include: ~w(autocomplete name rel action enctype method novalidate target multipart),
-    doc: "the arbitrary HTML attributes to apply to the form tag"
-
-  slot :inner_block, required: true
-  slot :actions, doc: "the slot for form actions, such as a submit button"
-
-  def simple_form(assigns) do
-    ~H"""
-    <.form_wrapper :let={f} class={@extra_classes} {assigns}>
-      {render_slot(@inner_block, f)}
-    </.form_wrapper>
-    """
-  end
-
-  defp size_class("extra_small"), do: "text-xs"
-
-  defp size_class("small"), do: "text-sm"
-
-  defp size_class("medium"), do: "text-base"
-
-  defp size_class("large"), do: "text-lg"
-
-  defp size_class("extra_large"), do: "text-xl"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp padding_class("extra_small"), do: "p-2"
-
-  defp padding_class("small"), do: "p-3"
-
-  defp padding_class("medium"), do: "p-4"
-
-  defp padding_class("large"), do: "p-5"
-
-  defp padding_class("extra_large"), do: "p-6"
-
-  defp padding_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "[&_.wrapper-form]:space-y-2"
-
-  defp space_class("small"), do: "[&_.wrapper-form]:space-y-3"
-
-  defp space_class("medium"), do: "[&_.wrapper-form]:space-y-4"
-
-  defp space_class("large"), do: "[&_.wrapper-form]:space-y-5"
-
-  defp space_class("extra_large"), do: "[&_.wrapper-form]:space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/gallery.ex b/lib/geo_web/components/gallery.ex
deleted file mode 100644
index d40955d..0000000
--- a/lib/geo_web/components/gallery.ex
+++ /dev/null
@@ -1,355 +0,0 @@
-defmodule GeoWeb.Components.Gallery do
-  @moduledoc """
-  The `GeoWeb.Components.Gallery` module provides a customizable gallery component for displaying
-  media content in a structured and visually appealing layout.
-
-  It supports various styles, including default, masonry, and featured galleries,
-  with options to control the number of columns, gaps, and additional styling.
-
-  ### Features:
-
-  - **Gallery Types:** Choose between "default", "masonry", and "featured" gallery layouts.
-  - **Customizable Columns and Gaps:** Configure the number of columns and spacing between gallery items.
-  - **Flexible Media Display:** Includes a `gallery_media` component for displaying individual
-  media items with options for styling, shadow, and border radius.
-
-  This component is ideal for showcasing images, videos, or other media content in a grid
-  or masonry layout, offering a clean and flexible way to present visual elements on a web page.
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-
-  @doc """
-  Renders a `gallery` component that supports various layout types including default grid,
-  masonry, and featured styles.
-
-  You can customize the number of columns and gaps between items to achieve the desired layout.
-
-  ## Examples
-
-  ```elixir
-  <.gallery type="masonry" cols="four" gap="large">
-    <.gallery_media src="https://example.com/gallery/masonry/image.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-2.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-3.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-4.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-5.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-6.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-7.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-8.jpg" />
-    <.gallery_media src="https://example.com/gallery/masonry/image-1.jpg" />
-  </.gallery>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :type, :string, values: ["default", "masonry", "featured"], default: "default", doc: ""
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :cols, :string, default: "", doc: "Determines cols of elements"
-  attr :gap, :string, default: "", doc: "Determines gap between elements"
-  attr :animation, :string, default: "", doc: "Determines gap between elements"
-  attr :animation_size, :string, default: "extra_small", doc: "Determines gap between elements"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def gallery(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="region"
-      class={[
-        (@type == "masonry" && "gallery-masonry") || "grid",
-        grid_gap(@gap),
-        @type == "masonry" && column_class(@cols),
-        grid_cols(@cols) != "masonry" && grid_cols(@cols),
-        animation(@animation, @animation_size),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a `gallery_media` component within a gallery, which typically includes images.
-  You can customize the border radius and shadow style of the media element.
-
-  ## Examples
-
-  ```elixir
-  <.gallery_media src="https://example.com/gallery/masonry/image.jpg" />
-  <.gallery_media src="https://example.com/gallery/masonry/image-2.jpg" rounded="large" shadow="shadow-lg" />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :wrapper_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :src, :string, default: nil, doc: "Media link"
-  attr :alt, :string, default: nil, doc: "Media link description"
-  attr :rounded, :string, default: "none", doc: "Determines the border radius"
-  attr :shadow, :string, default: "shadow-none", doc: "Determines shadow style"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def gallery_media(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={["relative gallery-media overflow-hidden transition-all duration-300", @wrapper_class]}
-      {@rest}
-    >
-      <img
-        :if={@src}
-        class={[
-          "gallery-media-img h-auto max-w-full transition-all duration-300",
-          rounded_size(@rounded),
-          shadow_class(@shadow),
-          @class
-        ]}
-        src={@src}
-        alt={@alt}
-        {@rest}
-      />
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a filterable gallery.
-
-  ## Attributes:
-  - `:id` - A unique DOM ID for the root element.
-  - `:filters` - A list of category names (e.g., ["all", "nature"]).
-  - `:media` - A list of media items (each should have `:src`, `:alt`, and `:category` keys).
-
-  ## Slots:
-  - `:filter` - Optional slot for rendering custom filter buttons. You will receive the current filter value with `let={filter}`.
-  """
-  @doc type: :component
-  attr :id, :string, doc: "Unique DOM ID"
-  attr :filters, :list, default: [], doc: "List of filter categories"
-  attr :media, :list, default: [], doc: "List of media items with :src, :alt, and :category"
-  attr :cols, :string, default: "three", doc: "Determines cols of elements"
-  attr :gap, :string, default: "small", doc: "Determines gap between elements"
-  attr :class, :string, default: nil, doc: "Add custom classe"
-  attr :default_filter, :string, default: "All", doc: "Default Button to show all images"
-  slot :filter, required: false, doc: "Slot for rendering each filter button with let={filter}"
-  attr :animation, :string, default: "", doc: "Determines gap between elements"
-  attr :animation_size, :string, default: "extra_small", doc: "Determines gap between elements"
-  attr :content_class, :string, default: nil, doc: "Add custom classe to content wrapper"
-
-  attr :filters_wrapper_class, :string,
-    default: nil,
-    doc: "Add custom classe to filter button wrapper"
-
-  slot :media_block,
-    required: false,
-    doc: "Optional slot for rendering each media item with let={media}"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def filterable_gallery(assigns) do
-    assigns = assign_new(assigns, :id, fn -> random_id() end)
-
-    ~H"""
-    <div
-      id={@id}
-      phx-hook="GalleryFilter"
-      phx-update="ignore"
-      role="region"
-      data-default-filter={@default_filter}
-      class={["filterable-gallery", animation(@animation, @animation_size), @class]}
-      {@rest}
-    >
-      <div
-        class={["filter-buttons mb-4 flex flex-wrap gap-2", @filters_wrapper_class]}
-        role="group"
-        aria-label={gettext("Filter options")}
-      >
-        <div :if={not Enum.member?(@filters, @default_filter)}>
-          <div :if={@filter != []}>
-            {render_slot(@filter, @default_filter)}
-          </div>
-          <button
-            :if={@filter == []}
-            data-gallery-filter
-            data-category={@default_filter}
-            class="filter-btn bg-white border rounded py-1.5 px-3 leading-5 text-[#09090b] border-[#e4e4e7] hover:bg-[#F8F9FA] dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a] dark:hover:bg-[#242424] disabled:bg-[#f1f3f5] disabled:text-[#adb5bd] dark:disabled:bg-[#2e2e2e] dark:disabled:text-[#696969] disabled:border-[#dee2e6] dark:disabled:border-[#424242] shadow-sm"
-          >
-            {@default_filter}
-          </button>
-        </div>
-
-        <div :for={filter <- @filters}>
-          <div :for={entry <- @filter}>
-            {render_slot(entry, filter)}
-          </div>
-
-          <button
-            :if={@filter == []}
-            data-gallery-filter
-            data-category={filter}
-            class="filter-btn bg-white border rounded py-1.5 px-3 leading-5 text-[#09090b] border-[#e4e4e7] hover:bg-[#F8F9FA] dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a] dark:hover:bg-[#242424] disabled:bg-[#f1f3f5] disabled:text-[#adb5bd] dark:disabled:bg-[#2e2e2e] dark:disabled:text-[#696969] disabled:border-[#dee2e6] dark:disabled:border-[#424242] shadow-sm"
-          >
-            {filter}
-          </button>
-        </div>
-      </div>
-      <div class={["grid", grid_gap(@gap), grid_cols(@cols), @content_class]}>
-        <div
-          :for={media <- @media}
-          data-gallery-item
-          data-category={
-            if is_list(media.category), do: Enum.join(media.category, ","), else: media.category
-          }
-          class="transition-all duration-300 ease-in-out transform opacity-100 scale-100"
-        >
-          <div :if={@media_block != []}>
-            {render_slot(@media_block, media)}
-          </div>
-
-          <.gallery_media :if={@media_block == []} src={media.src} alt={media.alt} />
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp shadow_class("extra_small"), do: "shadow-sm"
-  defp shadow_class("small"), do: "shadow"
-  defp shadow_class("medium"), do: "shadow-md"
-  defp shadow_class("large"), do: "shadow-lg"
-  defp shadow_class("extra_large"), do: "shadow-xl"
-  defp shadow_class("none"), do: "shadow-none"
-  defp shadow_class(params) when is_binary(params), do: params
-
-  defp animation("scale-down", "extra_small"), do: "hover:[&_.gallery-media-img]:scale-[0.99]"
-  defp animation("scale-down", "small"), do: "hover:[&_.gallery-media-img]:scale-[0.97]"
-  defp animation("scale-down", "medium"), do: "hover:[&_.gallery-media-img]:scale-[0.95]"
-  defp animation("scale-down", "large"), do: "hover:[&_.gallery-media-img]:scale-[0.93]"
-  defp animation("scale-down", "extra_large"), do: "hover:[&_.gallery-media-img]:scale-[0.91]"
-
-  defp animation("scale-up", "extra_small"), do: "hover:[&_.gallery-media-img]:scale-[1.02]"
-  defp animation("scale-up", "small"), do: "hover:[&_.gallery-media-img]:scale-[1.04]"
-  defp animation("scale-up", "medium"), do: "hover:[&_.gallery-media-img]:scale-[1.06]"
-  defp animation("scale-up", "large"), do: "hover:[&_.gallery-media-img]:scale-[1.08]"
-  defp animation("scale-up", "extra_large"), do: "hover:[&_.gallery-media-img]:scale-[1.1]"
-
-  defp animation("blur", "extra_small"), do: "hover:[&_.gallery-media-img]:blur-[0.05rem]"
-  defp animation("blur", "small"), do: "hover:[&_.gallery-media-img]:blur-[0.07rem]"
-  defp animation("blur", "medium"), do: "hover:[&_.gallery-media-img]:blur-[0.09rem]"
-  defp animation("blur", "large"), do: "hover:[&_.gallery-media-img]:blur-[0.1rem]"
-  defp animation("blur", "extra_large"), do: "hover:[&_.gallery-media-img]:blur-[0.12rem]"
-
-  defp animation("backdrop", "extra_small") do
-    [
-      "hover:[&_.gallery-media]:after:bg-[#4B4B4B]/30 dark:hover:[&_.gallery-media]:after:bg-[#DDDDDD]/30",
-      "[&_.gallery-media]:after:absolute [&_.gallery-media]:after:inset-0 hover:[&_.gallery-media]:after:backdrop-blur-[0.02rem]"
-    ]
-  end
-
-  defp animation("backdrop", "small") do
-    [
-      "hover:[&_.gallery-media]:after:bg-[#4B4B4B]/30 dark:hover:[&_.gallery-media]:after:bg-[#DDDDDD]/30",
-      "[&_.gallery-media]:after:absolute [&_.gallery-media]:after:inset-0 hover:[&_.gallery-media]:after:backdrop-blur-[0.04rem]"
-    ]
-  end
-
-  defp animation("backdrop", "medium") do
-    [
-      "hover:[&_.gallery-media]:after:bg-[#4B4B4B]/30 dark:hover:[&_.gallery-media]:after:bg-[#DDDDDD]/30",
-      "[&_.gallery-media]:after:absolute [&_.gallery-media]:after:inset-0 hover:[&_.gallery-media]:after:backdrop-blur-[0.06rem]"
-    ]
-  end
-
-  defp animation("backdrop", "large") do
-    [
-      "hover:[&_.gallery-media]:after:bg-[#4B4B4B]/30 dark:hover:[&_.gallery-media]:after:bg-[#DDDDDD]/30",
-      "[&_.gallery-media]:after:absolute [&_.gallery-media]:after:inset-0 hover:[&_.gallery-media]:after:backdrop-blur-[0.08rem]"
-    ]
-  end
-
-  defp animation("backdrop", "extra_large") do
-    [
-      "hover:[&_.gallery-media]:after:bg-[#4B4B4B]/30 dark:hover:[&_.gallery-media]:after:bg-[#DDDDDD]/30",
-      "[&_.gallery-media]:after:absolute [&_.gallery-media]:after:inset-0 hover:[&_.gallery-media]:after:backdrop-blur-[0.1rem]"
-    ]
-  end
-
-  defp animation(params, _) when is_binary(params), do: params
-
-  defp grid_cols("one"), do: "grid-cols-1"
-  defp grid_cols("two"), do: "grid-cols-2"
-  defp grid_cols("three"), do: "grid-cols-2 md:grid-cols-3"
-  defp grid_cols("four"), do: "grid-cols-2 md:grid-cols-4"
-  defp grid_cols("five"), do: "grid-cols-2 md:grid-cols-5"
-  defp grid_cols("six"), do: "grid-cols-2 md:grid-cols-6"
-  defp grid_cols("seven"), do: "grid-cols-2 md:grid-cols-7"
-  defp grid_cols("eight"), do: "grid-cols-2 md:grid-cols-8"
-  defp grid_cols("nine"), do: "grid-cols-2 md:grid-cols-9"
-  defp grid_cols("ten"), do: "grid-cols-2 md:grid-cols-10"
-  defp grid_cols("eleven"), do: "grid-cols-2 md:grid-cols-11"
-  defp grid_cols("twelve"), do: "grid-cols-2 md:grid-cols-12"
-  defp grid_cols(params) when is_binary(params), do: params
-
-  defp column_class("one"), do: "columns-1"
-  defp column_class("two"), do: "columns-2"
-  defp column_class("three"), do: "columns-2 md:columns-3"
-  defp column_class("four"), do: "columns-2 md:columns-4"
-  defp column_class("five"), do: "columns-2 md:columns-5"
-  defp column_class("six"), do: "columns-2 md:columns-6"
-  defp column_class("seven"), do: "columns-2 md:columns-7"
-  defp column_class("eight"), do: "columns-2 md:columns-8"
-  defp column_class("nine"), do: "columns-2 md:columns-9"
-  defp column_class("ten"), do: "columns-2 md:columns-10"
-  defp column_class("eleven"), do: "columns-2 md:columns-11"
-  defp column_class("twelve"), do: "columns-2 md:columns-12"
-  defp column_class(params) when is_binary(params), do: params
-
-  defp grid_gap("extra_small"), do: "gap-1 [&.gallery-masonry_.gallery-media]:mb-1"
-  defp grid_gap("small"), do: "gap-2 [&.gallery-masonry_.gallery-media]:mb-2"
-  defp grid_gap("medium"), do: "gap-3 [&.gallery-masonry_.gallery-media]:mb-3"
-  defp grid_gap("large"), do: "gap-4 [&.gallery-masonry_.gallery-media]:mb-4"
-  defp grid_gap("extra_large"), do: "gap-5 [&.gallery-masonry_.gallery-media]:mb-5"
-  defp grid_gap("double_large"), do: "gap-6 [&.gallery-masonry_.gallery-media]:mb-6"
-  defp grid_gap("triple_large"), do: "gap-7 [&.gallery-masonry_.gallery-media]:mb-7"
-  defp grid_gap("quadruple_large"), do: "gap-8 [&.gallery-masonry_.gallery-media]:mb-8"
-  defp grid_gap(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/image.ex b/lib/geo_web/components/image.ex
deleted file mode 100644
index 4cee219..0000000
--- a/lib/geo_web/components/image.ex
+++ /dev/null
@@ -1,158 +0,0 @@
-defmodule GeoWeb.Components.Image do
-  @moduledoc """
-  The `GeoWeb.Components.Image` module provides a component for rendering images in a Phoenix application.
-  It supports various attributes to control the display, loading behavior, and styling of the image.
-
-  This module simplifies the use of images with various configurations and styling
-  options in a Phoenix application.
-  """
-
-  use Phoenix.Component
-
-  @doc """
-  Renders an `image` component with various customization options such as border `radius`, `shadow`,
-  and `loading` behavior.
-
-  It supports additional attributes like width, height, and srcset for responsive images.
-
-  ## Examples
-
-  ```elixir
-  <.image src="https://example.com/1.jpg" />
-  <.image src="https://example.com/1.jpg" loading="lazy"/>
-  <.image shadow="large" src="https://example.com/1.jpg" width={100} height={100}/>
-  <.image rounded="full" src="https://example.com/1.jpg" width={100} height={100}/>
-  <.image fetchpriority="low" rounded="rounded-3xl" shadow="extra_large" src="https://example.com/1.jpg"/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :src, :string, required: true, doc: "Media link"
-  attr :alt, :string, default: nil, doc: "Media link description"
-  attr :srcset, :string, default: nil, doc: "Allows you to specify a list of different images"
-
-  attr :loading, :any,
-    values: ["eager", "lazy", nil],
-    default: nil,
-    doc: "eager: is default, lazy"
-
-  attr :referrerpolicy, :string, default: nil, doc: ""
-
-  attr :fetchpriority, :any,
-    values: ["high", "low", "auto", nil],
-    default: nil,
-    doc: "high, low, auto is default"
-
-  attr :width, :integer, default: nil, doc: "Determines width style"
-  attr :height, :integer, default: nil, doc: "Determines width height"
-
-  attr :sizes, :string,
-    default: nil,
-    doc:
-      "Specifies the intended display size of the image in the layout for different viewport conditions"
-
-  attr :ismap, :string, default: nil, doc: "Make the image act as a server-side image map"
-
-  attr :filter, :string, default: "", doc: "Utilities for applying filters"
-  attr :filter_size, :string, default: "", doc: "Utilities for applying filters sizes"
-
-  attr :decoding, :string,
-    default: nil,
-    doc:
-      "Refers to the process of converting encoded or encrypted data back into its original format"
-
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :shadow, :string, default: "", doc: "Determines shadow style"
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def image(assigns) do
-    ~H"""
-    <img
-      id={@id}
-      src={@src}
-      alt={@alt}
-      width={@width}
-      height={@height}
-      srcset={@srcset}
-      sizes={@sizes}
-      loading={@loading}
-      ismap={@ismap}
-      decoding={@decoding}
-      fetchpriority={@fetchpriority}
-      referrerpolicy={@referrerpolicy}
-      class={[
-        "max-w-full",
-        rounded_size(@rounded),
-        shadow_size(@shadow),
-        filter_class(@filter, @filter_size),
-        @class
-      ]}
-      {@rest}
-    />
-    """
-  end
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp shadow_size("extra_small"), do: "shadow-sm"
-  defp shadow_size("small"), do: "shadow"
-  defp shadow_size("medium"), do: "shadow-md"
-  defp shadow_size("large"), do: "shadow-lg"
-  defp shadow_size("extra_large"), do: "shadow-xl"
-  defp shadow_size(params) when is_binary(params), do: params
-
-  defp filter_class("blur", "extra_small"), do: "blur-sm"
-  defp filter_class("blur", "small"), do: "blur"
-  defp filter_class("blur", "medium"), do: "blur-md"
-  defp filter_class("blur", "large"), do: "blur-lg"
-  defp filter_class("blur", "extra_large"), do: "blur-xl"
-
-  defp filter_class("brightness", "extra_small"), do: "brightness-50"
-  defp filter_class("brightness", "small"), do: "brightness-75"
-  defp filter_class("brightness", "medium"), do: "brightness-90"
-  defp filter_class("brightness", "large"), do: "brightness-95"
-  defp filter_class("brightness", "extra_large"), do: "brightness-100"
-
-  defp filter_class("contrast", "extra_small"), do: "contrast-50"
-  defp filter_class("contrast", "small"), do: "contrast-75"
-  defp filter_class("contrast", "medium"), do: "contrast-100"
-  defp filter_class("contrast", "large"), do: "contrast-125"
-  defp filter_class("contrast", "extra_large"), do: "contrast-150"
-
-  defp filter_class("hue", "extra_small"), do: "hue-rotate-15"
-  defp filter_class("hue", "small"), do: "hue-rotate-30"
-  defp filter_class("hue", "medium"), do: "hue-rotate-60"
-  defp filter_class("hue", "large"), do: "hue-rotate-90"
-  defp filter_class("hue", "extra_large"), do: "hue-rotate-180"
-
-  defp filter_class("saturation", "extra_small"), do: "saturate-50"
-  defp filter_class("saturation", "small"), do: "saturate-[0.75]"
-  defp filter_class("saturation", "medium"), do: "saturate-100"
-  defp filter_class("saturation", "large"), do: "saturate-150"
-  defp filter_class("saturation", "extra_large"), do: "saturate-200"
-
-  defp filter_class("grayscale", _), do: "grayscale"
-  defp filter_class("invert", _), do: "invert"
-  defp filter_class("sepia", _), do: "sepia"
-
-  defp filter_class(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/indicator.ex b/lib/geo_web/components/indicator.ex
deleted file mode 100644
index ae900ad..0000000
--- a/lib/geo_web/components/indicator.ex
+++ /dev/null
@@ -1,254 +0,0 @@
-defmodule GeoWeb.Components.Indicator do
-  @moduledoc """
-  The `GeoWeb.Components.Indicator` module provides a versatile component for visually highlighting
-  specific areas or elements in your Phoenix application.
-
-  It is designed to display small, circular indicators that can be used for notifications,
-  status updates, or visual cues on UI elements.
-
-  This component supports various sizes and colors and can be positioned in multiple areas
-  relative to its parent element. Additionally, it has an optional ping animation for drawing
-  attention to a specific point on the interface.
-
-  The indicator can be used in diverse scenarios, such as showing the number of unread messages,
-  indicating active states, or displaying connectivity status. It is customizable with different
-  styles, making it adaptable to various design needs.
-  """
-
-  use Phoenix.Component
-
-  @indicator_positions [
-    "top_left",
-    "top_center",
-    "top_right",
-    "middle_left",
-    "middle_right",
-    "bottom_left",
-    "bottom_center",
-    "bottom_right"
-  ]
-
-  @doc """
-  Renders an `indicator` component with customizable size, color, and position.
-
-  The indicator can be positioned around its parent element and supports various sizes and styles.
-
-  ## Examples
-
-  ```elixir
-  <.indicator />
-  <.indicator color="misc" />
-  <.indicator size="extra_small" />
-  <.indicator color="warning" size="extra_small" bottom_left />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-
-  attr :rest, :global,
-    include: ["pinging"] ++ @indicator_positions,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def indicator(%{rest: %{top_left: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute -translate-y-1/2 -translate-x-1/2 right-auto top-0 left-0 indicator-top-left",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{top_center: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute top-0 -translate-y-1/2 translate-x-1/2 right-1/2",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{top_right: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute -translate-y-1/2 translate-x-1/2 left-auto top-0 right-0  indicator-top-right",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{middle_left: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute -translate-y-1/2 -translate-x-1/2 right-auto left-0 top-2/4",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{middle_right: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute -translate-y-1/2 translate-x-1/2 left-auto right-0 top-2/4",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{bottom_left: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute translate-y-1/2 -translate-x-1/2 right-auto bottom-0 left-0  indicator-bottom-left",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{bottom_center: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute translate-y-1/2 translate-x-1/2 bottom-0 right-1/2",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(%{rest: %{bottom_right: true}} = assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "indicator block rounded-full absolute translate-y-1/2 translate-x-1/2 left-auto bottom-0 right-0  indicator-bottom-right",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  def indicator(assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        indicator_size(@size),
-        color_class(@color),
-        "block indicator rounded-full",
-        !is_nil(@rest[:pinging]) && "animate-ping",
-        @class
-      ]}
-      {drop_rest(@rest)}
-    />
-    """
-  end
-
-  defp indicator_size("extra_small"), do: "!size-2"
-
-  defp indicator_size("small"), do: "!size-2.5"
-
-  defp indicator_size("medium"), do: "!size-3"
-
-  defp indicator_size("large"), do: "!size-3.5"
-
-  defp indicator_size("extra_large"), do: "!size-4"
-
-  defp indicator_size(params) when is_binary(params), do: params
-
-  defp color_class("base"), do: "bg-[#e4e4e7] dark:bg-[#27272a]"
-
-  defp color_class("white"), do: "bg-white"
-
-  defp color_class("natural"), do: "bg-[#4B4B4B] dark:bg-[#DDDDDD]"
-
-  defp color_class("primary"), do: "bg-[#007F8C] dark:bg-[#01B8CA]"
-
-  defp color_class("secondary"), do: "bg-[#266EF1] dark:bg-[#6DAAFB]"
-
-  defp color_class("success"), do: "bg-[#0E8345] dark:bg-[#06C167]"
-
-  defp color_class("warning"), do: "bg-[#CA8D01] dark:bg-[#FDC034]"
-
-  defp color_class("danger"), do: "bg-[#DE1135] dark:bg-[#FC7F79]"
-
-  defp color_class("info"), do: "bg-[#0B84BA] dark:bg-[#3EB7ED]"
-
-  defp color_class("misc"), do: "bg-[#8750C5] dark:bg-[#BA83F9]"
-
-  defp color_class("dawn"), do: "bg-[#A86438] dark:bg-[#DB976B]"
-
-  defp color_class("silver"), do: "bg-[#868686] dark:bg-[#A6A6A6]"
-
-  defp color_class("dark"), do: "bg-[#282828]"
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp drop_rest(rest) do
-    all_rest =
-      (["pinging"] ++ @indicator_positions)
-      |> Enum.map(&if(is_binary(&1), do: String.to_atom(&1), else: &1))
-
-    Map.drop(rest, all_rest)
-  end
-end
diff --git a/lib/geo_web/components/input_field.ex b/lib/geo_web/components/input_field.ex
deleted file mode 100644
index c550eb7..0000000
--- a/lib/geo_web/components/input_field.ex
+++ /dev/null
@@ -1,228 +0,0 @@
-defmodule GeoWeb.Components.InputField do
-  @moduledoc """
-  The `GeoWeb.Components.InputField` module provides a customizable input field component that
-  integrates with Phoenix forms.
-
-  This component supports a variety of input types, including text, email, password,
-  select, textarea, and checkbox, making it versatile for
-  different data entry scenarios.
-
-  It includes features such as displaying error messages, handling various HTML
-  attributes, and generating labels for inputs. This component is ideal for creating
-  form fields with consistent styling and behavior across your application.
-
-  ### Key Features:
-
-  - **Flexible Input Types:** Supports multiple input types such as text, email,
-  password, select, textarea, and checkbox.
-  - **Form Integration:** Can be integrated with Phoenix.HTML.FormField for easier
-  management of form data and error handling.
-  - **Error Display:** Automatically displays error messages associated with the input field.
-  - **Custom Styling:** Provides options for custom classes, labels, and other HTML attributes.
-
-  This component is designed to simplify form handling and user input validation in Phoenix applications.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders an `input` with label and error messages.
-
-  A `Phoenix.HTML.FormField` may be passed as argument,
-  which is used to retrieve the input name, id, and values.
-  Otherwise all attributes may be passed explicitly.
-
-  ## Types
-
-  This function accepts all HTML input types, considering that:
-
-    * You may also set `type="select"` to render a `<select>` tag
-
-    * `type="checkbox"` is used exclusively to render boolean values
-
-    * For live file uploads, see `Phoenix.Component.live_file_input/1`
-
-  See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
-  for more information. Unsupported types, such as hidden and radio,
-  are best written directly in your templates.
-
-  ## Examples
-
-      <.input field={@form[:email]} type="email" />
-      <.input name="my-input" errors={["oh no!"]} />
-  """
-
-  @doc type: :component
-  attr :id, :any, default: nil, doc: "A unique identifier is used to manage state and interaction"
-  attr :name, :any, doc: "Name of input"
-  attr :label, :string, default: nil
-  attr :value, :any, doc: "Value of input"
-
-  attr :type, :string,
-    default: "text",
-    values: ~w(checkbox color date datetime-local email file month number password
-               range search select tel text textarea time url week)
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :checked, :boolean, doc: "the checked flag for checkbox inputs"
-  attr :prompt, :string, default: nil, doc: "the prompt for select inputs"
-  attr :options, :list, doc: "the options to pass to Phoenix.HTML.Form.options_for_select/2"
-  attr :multiple, :boolean, default: false, doc: "the multiple flag for select inputs"
-
-  attr :rest, :global,
-    include: ~w(accept autocomplete capture cols disabled form list max maxlength min minlength
-                multiple pattern placeholder readonly required rows size step),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def input(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> if assigns.multiple, do: field.name <> "[]", else: field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> input()
-  end
-
-  def input(%{type: "checkbox"} = assigns) do
-    assigns =
-      assign_new(assigns, :checked, fn ->
-        Phoenix.HTML.Form.normalize_value("checkbox", assigns[:value])
-      end)
-
-    ~H"""
-    <div>
-      <label class="flex items-center gap-4 text-sm leading-6 text-zinc-600 dark:text-zinc-200">
-        <input type="hidden" name={@name} value="false" disabled={@rest[:disabled]} />
-        <input
-          type="checkbox"
-          id={@id}
-          name={@name}
-          value="true"
-          checked={@checked}
-          class="rounded border-zinc-300 text-zinc-900 focus:ring-0"
-          {@rest}
-        /> {@label}
-      </label>
-
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def input(%{type: "select"} = assigns) do
-    ~H"""
-    <div>
-      <.label for={@id}>{@label}</.label>
-
-      <select
-        id={@id}
-        name={@name}
-        class="mt-2 block w-full rounded-md border border-gray-300 bg-white shadow-sm focus:border-zinc-400 focus:ring-0 sm:text-sm"
-        multiple={@multiple}
-        {@rest}
-      >
-        <option :if={@prompt} value="">{@prompt}</option>
-        {Phoenix.HTML.Form.options_for_select(@options, @value)}
-      </select>
-
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def input(%{type: "textarea"} = assigns) do
-    ~H"""
-    <div>
-      <.label for={@id}>{@label}</.label>
-      <textarea
-        id={@id}
-        name={@name}
-        class={[
-          "mt-2 block w-full rounded-lg text-zinc-900 dark:text-zinc-200 focus:ring-0 sm:text-sm sm:leading-6 min-h-[6rem]",
-          @errors == [] && "border-zinc-300 focus:border-zinc-400",
-          @errors != [] && "border-rose-400 focus:border-rose-400"
-        ]}
-        {@rest}
-      >{Phoenix.HTML.Form.normalize_value("textarea", @value)}</textarea>
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  # All other inputs text, datetime-local, url, password, etc. are handled here...
-  def input(assigns) do
-    ~H"""
-    <div>
-      <.label for={@id}>{@label}</.label>
-
-      <input
-        type={@type}
-        name={@name}
-        id={@id}
-        value={Phoenix.HTML.Form.normalize_value(@type, @value)}
-        class={[
-          "mt-2 block w-full rounded-lg text-zinc-900 dark:text-zinc-200 focus:ring-0 sm:text-sm sm:leading-6",
-          @errors == [] && "border-zinc-300 focus:border-zinc-400",
-          @errors != [] && "border-rose-400 focus:border-rose-400"
-        ]}
-        {@rest}
-      />
-      <.error :for={msg <- @errors}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a label.
-  """
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def label(assigns) do
-    ~H"""
-    <label for={@for} class="block text-sm font-semibold leading-6 text-zinc-800 dark:text-zinc-200">
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc """
-  Generates a generic error message.
-  """
-  @doc type: :component
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def error(assigns) do
-    ~H"""
-    <p class="mt-3 flex gap-3 text-sm leading-6 text-rose-600">
-      <.icon name="hero-exclamation-circle-mini" class="mt-0.5 h-5 w-5 flex-none" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/jumbotron.ex b/lib/geo_web/components/jumbotron.ex
deleted file mode 100644
index d12f206..0000000
--- a/lib/geo_web/components/jumbotron.ex
+++ /dev/null
@@ -1,601 +0,0 @@
-defmodule GeoWeb.Components.Jumbotron do
-  @moduledoc """
-  The `GeoWeb.Components.Jumbotron` module provides a versatile component for creating large,
-  prominent sections within a Phoenix LiveView or static page. This component is typically
-  used for showcasing important content or messages, often at the top of a page, similar to a
-  traditional `hero` section.
-
-  ### Key Features:
-
-  - **Customizable Variants and Colors:** Supports multiple variants (`default`, `outline`, `transparent`,
-  `shadow`, `unbordered`) and a wide range of colors, allowing you to adapt the style to your needs.
-  - **Border and Spacing Control:** Options for configuring border size and position, as well as spacing
-  and padding, give you fine-grained control over the component's appearance.
-  - **Inner Block Rendering:** Supports an inner block slot for rendering custom content
-  within the jumbotron, making it flexible for various types of content such as headings,
-  paragraphs, images, and more.
-
-  This component is designed to provide a visually appealing and prominent section for
-  highlighting key content on your pages.
-  """
-  use Phoenix.Component
-
-  @doc """
-  Renders a `jumbotron` component, a large content area designed to showcase key information with a
-  prominent background. It supports customizable styles, borders, and spacing.
-
-  ## Examples
-
-  ```elixir
-  <.jumbotron color="primary" border_position="bottom">
-    <div class="py-8 px-4 mx-auto max-w-screen-xl text-center lg:py-16">
-      <h1 class="mb-4 text-4xl font-extrabold tracking-tight leading-none md:text-5xl lg:text-6xl">
-        We invest in the world’s potential
-      </h1>
-      <p class="mb-8 text-lg font-normal lg:text-xl sm:px-16 lg:px-48">
-        Here at Flowbite we focus on markets where technology, innovation, and capital
-        can unlock long-term value and drive economic growth.
-      </p>
-      <div class="flex flex-col space-y-4 sm:flex-row sm:justify-center sm:space-y-0">
-        <a
-          href="#"
-          class={[
-            "inline-flex justify-center items-center py-3 px-5 text-base font-medium",
-            "text-center text-white rounded-lg bg-blue-700 hover:bg-blue-800",
-            "focus:ring-4 focus:ring-blue-300"
-          ]}
-        >
-          Get started
-          <svg
-            class="w-3.5 h-3.5 ms-2 rtl:rotate-180"
-            aria-hidden="true"
-            xmlns="http://www.w3.org/2000/svg"
-            fill="none"
-            viewBox="0 0 14 10"
-          >
-            <path
-              stroke="currentColor"
-              stroke-linecap="round"
-              stroke-linejoin="round"
-              stroke-width="2"
-              d="M1 5h12m0 0L9 1m4 4L9 9"
-            />
-          </svg>
-        </a>
-        <a
-          href="#"
-          class={[
-            "py-3 px-5 sm:ms-4 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg",
-            "border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4",
-            "focus:ring-gray-100"
-          ]}
-        >
-          Learn more
-        </a>
-      </div>
-    </div>
-  </.jumbotron>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border_size, :string, default: "extra_small", doc: ""
-  attr :border_position, :string, default: "bottom", doc: ""
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def jumbotron(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        space_class(@space),
-        border_class(@border_size, @border_position, @variant),
-        color_variant(@variant, @color),
-        padding_size(@padding),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp border_class(_, _, variant)
-       when variant in ["default", "shadow", "transparent", "gradient"],
-       do: nil
-
-  defp border_class("none", _, _), do: nil
-
-  defp border_class("extra_small", "top", _), do: "border-t"
-  defp border_class("small", "top", _), do: "border-t-2"
-  defp border_class("medium", "top", _), do: "border-t-[3px]"
-  defp border_class("large", "top", _), do: "border-t-4"
-  defp border_class("extra_large", "top", _), do: "border-t-[5px]"
-
-  defp border_class("extra_small", "bottom", _), do: "border-b"
-  defp border_class("small", "bottom", _), do: "border-b-2"
-  defp border_class("medium", "bottom", _), do: "border-b-[3px]"
-  defp border_class("large", "bottom", _), do: "border-b-4"
-  defp border_class("extra_large", "bottom", _), do: "border-b-[5px]"
-
-  defp border_class("extra_small", "vertical", _), do: "border-y"
-  defp border_class("small", "vertical", _), do: "border-y-2"
-  defp border_class("medium", "vertical", _), do: "border-y-[3px]"
-  defp border_class("large", "vertical", _), do: "border-y-4"
-  defp border_class("extra_large", "vertical", _), do: "border-y-[5px]"
-
-  defp border_class(params, _, _) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size("double_large"), do: "p-6"
-
-  defp padding_size("triple_large"), do: "p-7"
-
-  defp padding_size("quadruple_large"), do: "p-8"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/keyboard.ex b/lib/geo_web/components/keyboard.ex
deleted file mode 100644
index 517de34..0000000
--- a/lib/geo_web/components/keyboard.ex
+++ /dev/null
@@ -1,553 +0,0 @@
-defmodule GeoWeb.Components.Keyboard do
-  @moduledoc """
-  The `GeoWeb.Components.Keyboard` module provides a customizable keyboard component,
-  primarily used for displaying keyboard shortcuts, key combinations, or highlighting
-  key inputs in a user interface. The component is designed with flexibility in mind,
-  allowing you to easily change its appearance and style through various attributes.
-
-  ### Key Features:
-
-  - **Flexible Styling Options:** Choose from multiple color themes and variants
-  (e.g., `default`, `outline`, `transparent`, `shadow`) to match your application's look and feel.
-  - **Customizable Size and Border Radius:** Adjust the size of the keyboard
-  keys and control the border radius with predefined sizes like `small`, `medium`,
-  `large`, or even `full` for a rounded key appearance.
-  - **Inner Block Content:** Use the inner block slot to include text, icons, or any other
-  content inside the keyboard component, providing context or explanation for the
-  keys being represented.
-
-  This component is ideal for visually representing keyboard shortcuts or commands,
-  making it easy for users to understand and remember key combinations.
-  """
-  use Phoenix.Component
-
-  @doc """
-  Renders a `keyboard` component, typically used to represent key presses or shortcuts in UI documentation.
-  It supports various styles, colors, and border radius options.
-
-  ## Examples
-
-  ```elixir
-  <.keyboard>CTRL</.keyboard>
-  <.keyboard color="primary">Esc</.keyboard>
-  <.keyboard color="secondary">Tab</.keyboard>
-  <.keyboard color="silver">Tab</.keyboard>
-  <.keyboard color="info">Tab</.keyboard>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def keyboard(assigns) do
-    ~H"""
-    <kbd
-      id={@id}
-      class={[
-        "px-2 py-1.5",
-        color_variant(@variant, @color),
-        size_class(@size),
-        border_class(@border, @variant),
-        rounded_size(@rounded),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </kbd>
-    """
-  end
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-
-  defp border_class("extra_small", _), do: "border"
-
-  defp border_class("small", _), do: "border-2"
-
-  defp border_class("medium", _), do: "border-[3px]"
-
-  defp border_class("large", _), do: "border-4"
-
-  defp border_class("extra_large", _), do: "border-[5px]"
-
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs"
-
-  defp size_class("small"), do: "text-sm"
-
-  defp size_class("medium"), do: "text-base"
-
-  defp size_class("large"), do: "text-lg"
-
-  defp size_class("extra_large"), do: "text-xl"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "text-[#0E8345] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "text-[#A86438] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/layout.ex b/lib/geo_web/components/layout.ex
deleted file mode 100644
index 48c2a9e..0000000
--- a/lib/geo_web/components/layout.ex
+++ /dev/null
@@ -1,383 +0,0 @@
-defmodule GeoWeb.Components.Layout do
-  @moduledoc """
-  The `GeoWeb.Components.Layout` module provides powerful and customizable layout components
-  for building responsive user interfaces using Tailwind CSS utilities.
-
-  It includes two core components: `flex` and `grid`, which abstract common layout patterns in a
-  declarative and consistent way. These components are ideal for building dynamic and responsive
-  layouts across all screen sizes.
-
-  ### Key Features:
-
-  - **Flex and Grid Layout Support:** Easily implement Tailwind’s Flexbox and Grid utilities
-    with a simple interface using Phoenix LiveView components.
-  - **Fully Configurable Props:** Customize direction, alignment, spacing, order, wrapping,
-    and sizing via intuitive props.
-  - **Dark Mode Ready:** Compatible with Tailwind's dark mode utilities out of the box.
-  - **Slot-Based Composition:** Supports inner content slots for nesting arbitrary elements.
-  - **Clean Code Integration:** Simplifies your markup while keeping full control of layout logic.
-
-  The `Layout` component is designed to give developers complete flexibility with minimal boilerplate.
-  """
-
-  use Phoenix.Component
-
-  @doc """
-  Renders a `flex` container component that wraps Tailwind’s Flexbox utilities
-  with a clean and consistent interface.
-
-  You can control direction, alignment, spacing, and other flex-related behaviors
-  through simple props.
-
-  ## Examples
-
-  ```elixir
-  <.flex direction="col" gap="medium">
-    <div>Item 1</div>
-    <div>Item 2</div>
-  </.flex>
-
-  <.flex justify="center" align="center" class="h-32 bg-gray-100">
-    <div class="bg-pink-300 p-2 rounded">Centered</div>
-  </.flex>
-  """
-  @doc type: :component
-
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier for the root element of the component"
-
-  attr :direction, :string,
-    default: "row",
-    doc: "Sets the flex direction of the container"
-
-  attr :justify, :string,
-    default: "start",
-    doc: "Controls alignment of items along the main axis"
-
-  attr :align, :string,
-    default: "stretch",
-    doc: "Controls alignment of items along the cross axis"
-
-  attr :align_self, :string,
-    default: "",
-    doc: "Controls alignment for a single item, overriding the container's align setting"
-
-  attr :gap, :string,
-    default: "",
-    doc: "Sets the space between child elements"
-
-  attr :wrap, :string,
-    default: "wrap",
-    doc: "Controls wrapping behavior of flex items"
-
-  attr :grow, :string,
-    default: "",
-    doc: "Determines whether flex items grow to fill available space"
-
-  attr :shrink, :string,
-    default: "",
-    doc: "Determines whether flex items shrink if needed"
-
-  attr :basis, :string,
-    default: "",
-    doc: "Sets the initial main size of a flex item"
-
-  attr :order, :string,
-    default: "",
-    doc: "Controls the visual order of an item within a flex or grid container"
-
-  attr :class, :string,
-    default: "",
-    doc: "Additional CSS classes to apply to the container"
-
-  attr :rest, :global,
-    doc: "Any valid global HTML attributes passed to the component (e.g. aria, data-*)"
-
-  slot :inner_block,
-    required: false,
-    doc: "The inner content to render inside the component"
-
-  def flex(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "flex",
-        direction_class(@direction),
-        justify_class(@justify),
-        align_class(@align),
-        align_self_class(@align_self),
-        wrap_class(@wrap),
-        shrink_class(@shrink),
-        grow_class(@grow),
-        basis_class(@basis),
-        gap_class(@gap),
-        order_class(@order),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a `grid` container component that wraps Tailwind's Grid utilities
-  with a clean and consistent interface.
-
-  You can control columns, rows, gaps, and other grid-related behaviors
-  through simple props.
-
-  ## Examples
-
-  ```elixir
-  <.grid cols="three" gap="medium">
-    <div>Item 1</div>
-    <div>Item 2</div>
-    <div>Item 3</div>
-  </.grid>
-
-  <.grid cols="two" rows="two" class="h-32 bg-gray-100">
-    <div class="bg-pink-300 p-2 rounded">Grid Item</div>
-    <div class="bg-blue-300 p-2 rounded">Grid Item</div>
-    <div class="bg-green-300 p-2 rounded">Grid Item</div>
-    <div class="bg-yellow-300 p-2 rounded">Grid Item</div>
-  </.grid>
-  """
-
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier for the root element of the component"
-
-  attr :cols, :string,
-    default: "twelve",
-    doc: "Defines the number of columns in the grid"
-
-  attr :rows, :string,
-    default: "",
-    doc: "Defines the number of rows in the grid"
-
-  attr :auto_cols, :string,
-    default: "",
-    doc: "Sets the size for implicitly created columns"
-
-  attr :auto_rows, :string,
-    default: "",
-    doc: "Sets the size for implicitly created rows"
-
-  attr :auto_flow, :string,
-    default: "",
-    doc: "Controls how auto-placed items are inserted into the grid"
-
-  attr :justify_items, :string,
-    default: "",
-    doc: "Controls how grid items are aligned along the row axis"
-
-  attr :justify_self, :string,
-    default: "",
-    doc: "Overrides alignment for a single grid item along the row axis"
-
-  attr :gap, :string,
-    default: "",
-    doc: "Sets the space between child elements"
-
-  attr :align_content, :string,
-    default: "",
-    doc: "Controls how multiple rows are aligned within the grid container"
-
-  attr :place_content, :string,
-    default: "",
-    doc: "Shorthand for setting both align-content and justify-content"
-
-  attr :order, :string,
-    default: "",
-    doc: "Controls the visual order of an item within a flex or grid container"
-
-  attr :place_items, :string,
-    default: "",
-    doc: "Shorthand to align items along both axes in the grid container"
-
-  attr :place_self, :string,
-    default: "",
-    doc: "Shorthand to align a single item along both axes"
-
-  attr :class, :string,
-    default: "",
-    doc: "Additional CSS classes to apply to the container"
-
-  attr :rest, :global,
-    doc: "Any valid global HTML attributes passed to the component (e.g. aria, data-*)"
-
-  slot :inner_block,
-    required: false,
-    doc: "The inner content to render inside the component"
-
-  def grid(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "grid",
-        cols_class(@cols),
-        rows_class(@rows),
-        auto_cols_class(@auto_cols),
-        auto_rows_class(@auto_rows),
-        auto_flow_class(@auto_flow),
-        justify_self_class(@justify_self),
-        align_content_class(@align_content),
-        place_content_class(@place_content),
-        place_items_class(@place_items),
-        place_self_class(@place_self),
-        gap_class(@gap),
-        order_class(@order),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp direction_class("row"), do: "flex-row"
-  defp direction_class("row-reverse"), do: "flex-row-reverse"
-  defp direction_class("col"), do: "flex-col"
-  defp direction_class("col-reverse"), do: "flex-col-reverse"
-  defp direction_class(param) when is_binary(param), do: param
-
-  defp justify_class("start"), do: "justify-start"
-  defp justify_class("center"), do: "justify-center"
-  defp justify_class("end"), do: "justify-end"
-  defp justify_class("between"), do: "justify-between"
-  defp justify_class("around"), do: "justify-around"
-  defp justify_class("evenly"), do: "justify-evenly"
-  defp justify_class(param) when is_binary(param), do: param
-
-  defp align_class("start"), do: "items-start"
-  defp align_class("center"), do: "items-center"
-  defp align_class("end"), do: "items-end"
-  defp align_class("stretch"), do: "items-stretch"
-  defp align_class("baseline"), do: "items-baseline"
-  defp align_class(param) when is_binary(param), do: param
-
-  defp align_self_class("auto"), do: "self-auto"
-  defp align_self_class("start"), do: "self-start"
-  defp align_self_class("center"), do: "self-center"
-  defp align_self_class("end"), do: "self-end"
-  defp align_self_class("stretch"), do: "self-stretch"
-  defp align_self_class(param) when is_binary(param), do: param
-
-  defp wrap_class("nowrap"), do: "flex-nowrap"
-  defp wrap_class("wrap"), do: "flex-wrap"
-  defp wrap_class("wrap-reverse"), do: "flex-wrap-reverse"
-  defp wrap_class(param) when is_binary(param), do: param
-
-  defp grow_class("grow"), do: "grow"
-  defp grow_class("none"), do: "grow-0"
-  defp grow_class(param) when is_binary(param), do: param
-
-  defp shrink_class("shrink"), do: "shrink"
-  defp shrink_class("none"), do: "shrink-0"
-  defp shrink_class(param) when is_binary(param), do: param
-
-  defp basis_class("extra_small"), do: "basis-1"
-  defp basis_class("small"), do: "basis-2"
-  defp basis_class("medium"), do: "basis-3"
-  defp basis_class("large"), do: "basis-4"
-  defp basis_class("extra_large"), do: "basis-5"
-  defp basis_class(param) when is_binary(param), do: param
-
-  defp gap_class("extra_small"), do: "gap-1"
-  defp gap_class("small"), do: "gap-2"
-  defp gap_class("medium"), do: "gap-3"
-  defp gap_class("large"), do: "gap-4"
-  defp gap_class("extra_large"), do: "gap-5"
-  defp gap_class(param) when is_binary(param), do: param
-
-  defp order_class("first"), do: "order-first"
-  defp order_class("last"), do: "order-last"
-  defp order_class("none"), do: "order-none"
-  defp order_class(param) when is_binary(param), do: param
-
-  defp cols_class("one"), do: "grid-cols-1"
-  defp cols_class("two"), do: "grid-cols-2"
-  defp cols_class("three"), do: "grid-cols-3"
-  defp cols_class("four"), do: "grid-cols-4"
-  defp cols_class("five"), do: "grid-cols-5"
-  defp cols_class("six"), do: "grid-cols-6"
-  defp cols_class("seven"), do: "grid-cols-7"
-  defp cols_class("eight"), do: "grid-cols-8"
-  defp cols_class("nine"), do: "grid-cols-9"
-  defp cols_class("ten"), do: "grid-cols-10"
-  defp cols_class("eleven"), do: "grid-cols-11"
-  defp cols_class("twelve"), do: "grid-cols-12"
-  defp cols_class("none"), do: "grid-cols-none"
-  defp cols_class(param) when is_binary(param), do: param
-
-  defp rows_class("one"), do: "grid-rows-1"
-  defp rows_class("two"), do: "grid-rows-2"
-  defp rows_class("three"), do: "grid-rows-3"
-  defp rows_class("four"), do: "grid-rows-4"
-  defp rows_class("five"), do: "grid-rows-5"
-  defp rows_class("six"), do: "grid-rows-6"
-  defp rows_class("none"), do: "grid-rows-none"
-  defp rows_class(param) when is_binary(param), do: param
-
-  defp auto_cols_class("auto"), do: "auto-cols-auto"
-  defp auto_cols_class("min"), do: "auto-cols-min"
-  defp auto_cols_class("max"), do: "auto-cols-max"
-  defp auto_cols_class("fr"), do: "auto-cols-fr"
-  defp auto_cols_class(param) when is_binary(param), do: param
-
-  defp auto_rows_class("auto"), do: "auto-rows-auto"
-  defp auto_rows_class("min"), do: "auto-rows-min"
-  defp auto_rows_class("max"), do: "auto-rows-max"
-  defp auto_rows_class("fr"), do: "auto-rows-fr"
-  defp auto_rows_class(param) when is_binary(param), do: param
-
-  defp auto_flow_class("row"), do: "grid-flow-row"
-  defp auto_flow_class("col"), do: "grid-flow-col"
-  defp auto_flow_class("row-dense"), do: "grid-flow-row-dense"
-  defp auto_flow_class("col-dense"), do: "grid-flow-col-dense"
-  defp auto_flow_class(param) when is_binary(param), do: param
-
-  defp justify_self_class("auto"), do: "justify-self-auto"
-  defp justify_self_class("start"), do: "justify-self-start"
-  defp justify_self_class("end"), do: "justify-self-end"
-  defp justify_self_class("center"), do: "justify-self-center"
-  defp justify_self_class("stretch"), do: "justify-self-stretch"
-  defp justify_self_class(param) when is_binary(param), do: param
-
-  defp align_content_class("start"), do: "content-start"
-  defp align_content_class("center"), do: "content-center"
-  defp align_content_class("end"), do: "content-end"
-  defp align_content_class("between"), do: "content-between"
-  defp align_content_class("around"), do: "content-around"
-  defp align_content_class("evenly"), do: "content-evenly"
-  defp align_content_class(param) when is_binary(param), do: param
-
-  defp place_content_class("start"), do: "place-content-start"
-  defp place_content_class("center"), do: "place-content-center"
-  defp place_content_class("end"), do: "place-content-end"
-  defp place_content_class("between"), do: "place-content-between"
-  defp place_content_class("around"), do: "place-content-around"
-  defp place_content_class("evenly"), do: "place-content-evenly"
-  defp place_content_class("stretch"), do: "place-content-stretch"
-  defp place_content_class(param) when is_binary(param), do: param
-
-  defp place_items_class("start"), do: "place-items-start"
-  defp place_items_class("end"), do: "place-items-end"
-  defp place_items_class("center"), do: "place-items-center"
-  defp place_items_class("stretch"), do: "place-items-stretch"
-  defp place_items_class(param) when is_binary(param), do: param
-
-  defp place_self_class("auto"), do: "place-self-auto"
-  defp place_self_class("start"), do: "place-self-start"
-  defp place_self_class("end"), do: "place-self-end"
-  defp place_self_class("center"), do: "place-self-center"
-  defp place_self_class("stretch"), do: "place-self-stretch"
-  defp place_self_class(param) when is_binary(param), do: param
-end
diff --git a/lib/geo_web/components/layouts.ex b/lib/geo_web/components/layouts.ex
deleted file mode 100644
index 448bab3..0000000
--- a/lib/geo_web/components/layouts.ex
+++ /dev/null
@@ -1,14 +0,0 @@
-defmodule GeoWeb.Layouts do
-  @moduledoc """
-  This module holds different layouts used by your application.
-
-  See the `layouts` directory for all templates available.
-  The "root" layout is a skeleton rendered as part of the
-  application router. The "app" layout is set as the default
-  layout on both `use GeoWeb, :controller` and
-  `use GeoWeb, :live_view`.
-  """
-  use GeoWeb, :html
-
-  embed_templates "layouts/*"
-end
diff --git a/lib/geo_web/components/list.ex b/lib/geo_web/components/list.ex
deleted file mode 100644
index 7aee835..0000000
--- a/lib/geo_web/components/list.ex
+++ /dev/null
@@ -1,1272 +0,0 @@
-defmodule GeoWeb.Components.List do
-  @moduledoc """
-  The `GeoWeb.Components.List` module provides a versatile and customizable list
-  component for building both ordered and unordered lists, as well as a list
-  group component for more structured content. This module is designed to cater to
-  various styles and use cases, such as navigation menus, data presentations, or simple item listings.
-
-  ### Features
-
-  - **Styling Variants:** The component offers multiple variants like `default`,
-  `bordered`, `outline`, `outline_separated`, `bordered_separated`, and `transparent` to meet diverse design requirements.
-  - **Color Customization:** Choose from a variety of colors to style the list according to
-  your application's theme.
-  - **Flexible Layouts:** Control the size, spacing, and appearance of list items with extensive
-  customization options.
-  - **Nested Structure:** Easily nest lists and group items together with the list group
-  component for more complex layouts.
-
-  This module is ideal for creating well-structured and visually appealing lists in
-  your Phoenix LiveView applications.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a `list` component that supports both ordered and unordered lists with customizable styles,
-  sizes, and colors.
-
-  ## Examples
-
-  ```elixir
-  <.list font_weight="font-bold" color="silver" size="small">
-    <:item padding="small" count={1}>list count small</:item>
-    <:item padding="small" count={2}>list count small</:item>
-    <:item padding="small" count={3}>list count small</:item>
-    <:item padding="small" count={23658}>list count small</:item>
-  </.list>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :border, :string, default: "extra_small", doc: "Border size"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "transparent", doc: "Determines the style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :hoverable, :boolean, default: false, doc: "active hover style"
-  attr :style, :string, default: "list-none", doc: ""
-
-  slot :item, validate_attrs: false do
-    attr :id, :string, doc: "A unique identifier is used to manage state and interaction"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :count, :integer, doc: "Li counter"
-    attr :count_separator, :string, doc: "Li counter separator"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :content_class, :string, doc: "Determines custom class for the content"
-    attr :padding, :string, doc: "Determines padding for items"
-    attr :position, :string, doc: "Determines the element position"
-    attr :title, :string, required: false
-  end
-
-  attr :rest, :global,
-    include: ~w(ordered unordered),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, doc: "Inner block that renders HEEx content"
-
-  def list(%{rest: %{ordered: true}} = assigns) do
-    ~H"""
-    <.ol {assigns}>
-      <.li :for={item <- @item} {item}>
-        {render_slot(item)}
-      </.li>
-      {render_slot(@inner_block)}
-    </.ol>
-    """
-  end
-
-  def list(assigns) do
-    ~H"""
-    <.ul {assigns}>
-      <.li
-        :for={item <- @item}
-        class={
-          Enum.join(["[&_.list-content]:flex [&_.list-content]:items-center", item[:class]], " ")
-        }
-        {item}
-      >
-        <div :if={!is_nil(Map.get(item, :title))} class="font-semibold me-2">
-          {item.title}
-        </div>
-        {render_slot(item)}
-      </.li>
-      {render_slot(@inner_block)}
-    </.ul>
-    """
-  end
-
-  @doc """
-  Renders a list item (`li`) component with optional count, icon, and custom styles.
-  This component is versatile and can be used within a list to display content with specific alignment,
-  padding, and style.
-
-  ## Examples
-
-  ```elixir
-  <.li>LI 1</.li>
-
-  <.li>L2</.li>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :count, :integer, default: nil, doc: "Li counter"
-  attr :count_separator, :string, default: ". ", doc: "Li counter separator"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-
-  attr :icon_class, :string,
-    default: "list-item-icon",
-    doc: "Determines custom class for the icon"
-
-  attr :content_class, :string, default: nil, doc: "Determines custom class for the content"
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-
-  attr :position, :string,
-    values: ["start", "end", "center"],
-    default: "start",
-    doc: "Determines the element position"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  @spec li(map()) :: Phoenix.LiveView.Rendered.t()
-  def li(assigns) do
-    ~H"""
-    <li
-      id={@id}
-      class={[
-        padding_size(@padding),
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={[
-        "flex items-center gap-2 w-full",
-        content_position(@position)
-      ]}>
-        <.icon :if={!is_nil(@icon)} name={@icon} class={@icon_class} />
-        <span :if={is_integer(@count)}>{@count}{@count_separator}</span>
-        <div class={["w-full list-content", @content_class]}>
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-    </li>
-    """
-  end
-
-  @doc """
-  Renders an unordered list (`ul`) component with customizable styles and attributes.
-  You can define the appearance of the list using options for color, variant, size, width, and more.
-
-  It supports a variety of styles including `list-disc` for bulleted lists.
-
-  ## Examples
-
-  ```elixir
-  <.ul style="list-disc">
-    <li>Default background ul list disc</li>
-    <li>Default background ul list disc</li>
-    <li>Default background ul list disc</li>
-  </.ul>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "transparent", doc: "Determines the style"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :border, :string, default: "extra_small", doc: "Border size"
-  attr :style, :string, default: "list-none", doc: "Determines the element style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :hoverable, :boolean, default: false, doc: "active hover style"
-
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def ul(assigns) do
-    ~H"""
-    <ul
-      id={@id}
-      class={[
-        "[&.list-decimal]:ps-5 [&.list-disc]:ps-5",
-        color_variant(@variant, @color, @hoverable),
-        border_class(@border, @variant),
-        rounded_size(@rounded),
-        size_class(@size),
-        width_class(@width),
-        variant_space(@space, @variant),
-        @style,
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </ul>
-    """
-  end
-
-  @doc """
-  Renders an ordered list (`ol`) component with customizable styles and attributes.
-  The list can be styled with different colors, variants, sizes, widths, and spacing to
-  fit various design needs.
-
-  ## Examples
-
-  ```elixir
-  <.ol style="list-decimal">
-    <li>Ordered list item 1</li>
-    <li>Ordered list item 2</li>
-    <li>Ordered list item 3</li>
-  </.ol>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "transparent", doc: "Determines the style"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :border, :string, default: "extra_small", doc: "Border size"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :hoverable, :boolean, default: false, doc: "active hover style"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def ol(assigns) do
-    ~H"""
-    <ol
-      id={@id}
-      class={[
-        "list-decimal [&.list-decimal]:ps-5 [&.list-disc]:ps-5",
-        color_variant(@variant, @color, @hoverable),
-        border_class(@border, @variant),
-        size_class(@size),
-        rounded_size(@rounded),
-        width_class(@width),
-        variant_space(@space, @variant),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </ol>
-    """
-  end
-
-  @doc """
-  Renders a list group component with customizable styles, borders, and padding. It can be used to group list items with different variants, colors, and sizes.
-
-  ## Examples
-
-  ```elixir
-  <.list_group variant="separated" rounded="extra_small" color="dawn">
-    <.li position="end" icon="hero-chat-bubble-left-ellipsis">HBase</.li>
-    <.li>SQL</.li>
-    <.li>Sqlight</.li>
-  </.list_group>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "transparent", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :space, :string, default: "small", doc: "Space between items"
-  attr :hoverable, :boolean, default: false, doc: "active hover style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def list_group(assigns) do
-    ~H"""
-    <ul
-      id={@id}
-      class={[
-        "overflow-hidden",
-        rounded_size(@rounded),
-        variant_space(@space, @variant),
-        padding_size(@padding),
-        width_class(@width),
-        border_class(@border, @variant),
-        size_class(@size),
-        color_variant(@variant, @color, @hoverable),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </ul>
-    """
-  end
-
-  defp content_position("start") do
-    "justify-start"
-  end
-
-  defp content_position("end") do
-    "justify-end"
-  end
-
-  defp content_position("center") do
-    "justify-center"
-  end
-
-  defp content_position(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"),
-    do: "[&:not(.list-items-gap)]:rounded-sm [&.list-items-gap>li]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&:not(.list-items-gap)]:rounded [&.list-items-gap>li]:rounded"
-
-  defp rounded_size("medium"),
-    do: "[&:not(.list-items-gap)]:rounded-md [&.list-items-gap>li]:rounded-md"
-
-  defp rounded_size("large"),
-    do: "[&:not(.list-items-gap)]:rounded-lg [&.list-items-gap>li]:rounded-lg"
-
-  defp rounded_size("extra_large"),
-    do: "[&:not(.list-items-gap)]:rounded-xl [&.list-items-gap>li]:rounded-xl"
-
-  defp rounded_size("full"),
-    do: "[&:not(.list-items-gap)]:rounded-full [&.list-items-gap>li]:rounded:full"
-
-  defp rounded_size("none"),
-    do: "[&:not(.list-items-gap)]:rounded-none [&.list-items-gap>li]:rounded-none"
-
-  defp variant_space(_, variant)
-       when variant not in ["outline_separated", "bordered_separated", "base_separated"],
-       do: nil
-
-  defp variant_space("extra_small", _), do: "list-items-gap space-y-2"
-
-  defp variant_space("small", _), do: "list-items-gap space-y-3"
-
-  defp variant_space("medium", _), do: "list-items-gap space-y-4"
-
-  defp variant_space("large", _), do: "list-items-gap space-y-5"
-
-  defp variant_space("extra_large", _), do: "list-items-gap space-y-6"
-
-  defp variant_space(params, _) when is_binary(params), do: params
-
-  defp width_class("extra_small"), do: "w-60"
-  defp width_class("small"), do: "w-64"
-  defp width_class("medium"), do: "w-72"
-  defp width_class("large"), do: "w-80"
-  defp width_class("extra_large"), do: "w-96"
-  defp width_class("full"), do: "w-full"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs [&_.list-item-icon]:size-4"
-
-  defp size_class("small"), do: "text-sm [&_.list-item-icon]:size-5"
-
-  defp size_class("medium"), do: "text-base [&_.list-item-icon]:size-6"
-
-  defp size_class("large"), do: "text-lg [&_.list-item-icon]:size-7"
-
-  defp size_class("extra_large"), do: "text-xl [&_.list-item-icon]:size-8"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent", "gradient"],
-    do: nil
-
-  defp border_class("none", "outline"), do: "border-0 [&>li:not(:last-child)]:border-b-0"
-
-  defp border_class("extra_small", "outline"), do: "border [&>li:not(:last-child)]:border-b"
-
-  defp border_class("small", "outline"), do: "border-2 [&>li:not(:last-child)]:border-b-2"
-
-  defp border_class("medium", "outline"),
-    do: "border-[3px] [&>li:not(:last-child)]:border-b-[3px]"
-
-  defp border_class("large", "outline"), do: "border-4 [&>li:not(:last-child)]:border-b-4"
-
-  defp border_class("extra_large", "outline"),
-    do: "border-[5px] [&>li:not(:last-child)]:border-b-[5px]"
-
-  defp border_class("none", "bordered"), do: "border-0 [&>li:not(:last-child)]:border-b-0"
-
-  defp border_class("extra_small", "bordered"), do: "border [&>li:not(:last-child)]:border-b"
-
-  defp border_class("small", "bordered"), do: "border-2 [&>li:not(:last-child)]:border-b-2"
-
-  defp border_class("medium", "bordered"),
-    do: "border-[3px] [&>li:not(:last-child)]:border-b-[3px]"
-
-  defp border_class("large", "bordered"), do: "border-4 [&>li:not(:last-child)]:border-b-4"
-
-  defp border_class("extra_large", "bordered"),
-    do: "border-[5px] [&>li:not(:last-child)]:border-b-[5px]"
-
-  defp border_class("none", "bordered_separated"), do: "[&>li]:border-0"
-
-  defp border_class("extra_small", "bordered_separated"), do: "[&>li]:border"
-
-  defp border_class("small", "bordered_separated"), do: "[&>li]:border-2"
-
-  defp border_class("medium", "bordered_separated"), do: "[&>li]:border-[3px]"
-
-  defp border_class("large", "bordered_separated"), do: "[&>li]:border-4"
-
-  defp border_class("extra_large", "bordered_separated"), do: "[&>li]:border-[5px]"
-
-  defp border_class("none", "outline_separated"), do: "[&>li]:border-0"
-
-  defp border_class("extra_small", "outline_separated"), do: "[&>li]:border"
-
-  defp border_class("small", "outline_separated"), do: "[&>li]:border-2"
-
-  defp border_class("medium", "outline_separated"), do: "[&>li]:border-[3px]"
-
-  defp border_class("large", "outline_separated"), do: "[&>li]:border-4"
-
-  defp border_class("extra_large", "outline_separated"), do: "[&>li]:border-[5px]"
-
-  defp border_class("none", "base"), do: "border-0 [&>li:not(:last-child)]:border-b-0"
-
-  defp border_class("extra_small", "base"), do: "border [&>li:not(:last-child)]:border-b"
-
-  defp border_class("small", "base"), do: "border-2 [&>li:not(:last-child)]:border-b-2"
-
-  defp border_class("medium", "base"),
-    do: "border-[3px] [&>li:not(:last-child)]:border-b-[3px]"
-
-  defp border_class("large", "base"), do: "border-4 [&>li:not(:last-child)]:border-b-4"
-
-  defp border_class("extra_large", "base"),
-    do: "border-[5px] [&>li:not(:last-child)]:border-b-[5px]"
-
-  defp border_class("none", "base_separated"), do: "[&>li]:border-0"
-
-  defp border_class("extra_small", "base_separated"), do: "[&>li]:border"
-
-  defp border_class("small", "base_separated"), do: "[&>li]:border-2"
-
-  defp border_class("medium", "base_separated"), do: "[&>li]:border-[3px]"
-
-  defp border_class("large", "base_separated"), do: "[&>li]:border-4"
-
-  defp border_class("extra_large", "base_separated"), do: "[&>li]:border-[5px]"
-
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _, hoverable) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]",
-      "[&>li:not(:last-child)]:border-[#e4e4e7] dark:[&>li:not(:last-child)]:border-[#27272a]",
-      hoverable && "hover:[&_li]:bg-[#F8F9FA] dark:hover:[&_li]:bg-[#242424]"
-    ]
-  end
-
-  defp color_variant("base_separated", _, hoverable) do
-    [
-      "[&>li]:text-[#09090b] [&>li]:border-[#e4e4e7] [&>li]:bg-white",
-      "dark:[&>li]:text-[#FAFAFA] dark:[&>li]:border-[#27272a] dark:[&>li]:bg-[#18181B]",
-      hoverable && "hover:[&_li]:bg-[#F8F9FA] dark:hover:[&_li]:bg-[#242424]"
-    ]
-  end
-
-  defp color_variant("default", "white", hoverable) do
-    [
-      "bg-white text-black",
-      hoverable && "hover:[&_li]:bg-[#f1f1f1]"
-    ]
-  end
-
-  defp color_variant("default", "dark", hoverable) do
-    [
-      "bg-[#282828] text-white",
-      hoverable && "hover:[&_li]:bg-[#4b4b4b]"
-    ]
-  end
-
-  defp color_variant("default", "natural", hoverable) do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      hoverable && "hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "primary", hoverable) do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", hoverable) do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("default", "success", hoverable) do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("default", "warning", hoverable) do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("default", "danger", hoverable) do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("default", "info", hoverable) do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("default", "misc", hoverable) do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", hoverable) do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("default", "silver", hoverable) do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", hoverable) do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "[&>li:not(:last-child)]:border-[#4B4B4B] dark:[&>li:not(:last-child)]:border-[#DDDDDD]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("outline", "primary", hoverable) do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "[&>li:not(:last-child)]:border-[#007F8C] dark:[&>li:not(:last-child)]:border-[#01B8CA]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", hoverable) do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "[&>li:not(:last-child)]:border-[#266EF1] dark:[&>li:not(:last-child)]:border-[#6DAAFB]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline", "success", hoverable) do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]",
-      "[&>li:not(:last-child)]:border-[#0E8345] dark:[&>li:not(:last-child)]:border-[#06C167]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", hoverable) do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]",
-      "[&>li:not(:last-child)]:border-[#CA8D01] dark:[&>li:not(:last-child)]:border-[#FDC034]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", hoverable) do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "[&>li:not(:last-child)]:border-[#DE1135] dark:[&>li:not(:last-child)]:border-[#FC7F79]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline", "info", hoverable) do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "[&>li:not(:last-child)]:border-[#0B84BA] dark:[&>li:not(:last-child)]:border-[#3EB7ED]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", hoverable) do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "[&>li:not(:last-child)]:border-[#8750C5] dark:[&>li:not(:last-child)]:border-[#BA83F9]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", hoverable) do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]",
-      "[&>li:not(:last-child)]:border-[#A86438] dark:[&>li:not(:last-child)]:border-[#DB976B]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", hoverable) do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "[&>li:not(:last-child)]:border-[#868686] dark:[&>li:not(:last-child)]:border-[#A6A6A6]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", hoverable) do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", hoverable) do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", hoverable) do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", hoverable) do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", hoverable) do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", hoverable) do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", hoverable) do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", hoverable) do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", hoverable) do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", hoverable) do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      hoverable && "hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", hoverable) do
-    [
-      "bg-white text-black border-[#DDDDDD]",
-      "[&>li:not(:last-child)]:border-[#DDDDDD]",
-      hoverable && "hover:[&_li]:text-black hover:[&_li]:bg-[#4b4b4b]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", hoverable) do
-    [
-      "bg-[#282828] text-white border-[#727272]",
-      "[&>li:not(:last-child)]:border-[#727272]",
-      hoverable && "hover:[&_li]:text-white hover:[&_li]:bg-[#4b4b4b]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", hoverable) do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]",
-      "[&>li:not(:last-child)]:border-[#282828] dark:[&>li:not(:last-child)]:border-[#E8E8E8]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", hoverable) do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]",
-      "[&>li:not(:last-child)]:border-[#016974] dark:[&>li:not(:last-child)]:border-[#77D5E3]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", hoverable) do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]",
-      "[&>li:not(:last-child)]:border-[#175BCC] dark:[&>li:not(:last-child)]:border-[#A9C9FF]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", hoverable) do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]",
-      "[&>li:not(:last-child)]:border-[#166C3B] dark:[&>li:not(:last-child)]:border-[#7FD99A]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", hoverable) do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]",
-      "[&>li:not(:last-child)]:border-[#976A01] dark:[&>li:not(:last-child)]:border-[#FDD067]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", hoverable) do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]",
-      "[&>li:not(:last-child)]:border-[#BB032A] dark:[&>li:not(:last-child)]:border-[#FFB2AB]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", hoverable) do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]",
-      "[&>li:not(:last-child)]:border-[#0B84BA] dark:[&>li:not(:last-child)]:border-[#6EC9F2]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", hoverable) do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]",
-      "[&>li:not(:last-child)]:border-[#653C94] dark:[&>li:not(:last-child)]:border-[#CBA2FA]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", hoverable) do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]",
-      "[&>li:not(:last-child)]:border-[#7E4B2A] dark:[&>li:not(:last-child)]:border-[#E4B190]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", hoverable) do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]",
-      "[&>li:not(:last-child)]:border-[#727272] dark:[&>li:not(:last-child)]:border-[#BBBBBB]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", hoverable) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", hoverable) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", hoverable) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("transparent", "success", hoverable) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", hoverable) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", hoverable) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("transparent", "info", hoverable) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", hoverable) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", hoverable) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", hoverable) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural", hoverable) do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black",
-      hoverable && "hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("gradient", "primary", hoverable) do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary", hoverable) do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("gradient", "success", hoverable) do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("gradient", "warning", hoverable) do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("gradient", "danger", hoverable) do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("gradient", "info", hoverable) do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("gradient", "misc", hoverable) do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn", hoverable) do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("gradient", "silver", hoverable) do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black",
-      hoverable && "hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "natural", hoverable) do
-    [
-      "[&>li]:text-[#282828] [&>li]:border-[#282828] [&>li]:bg-[#F3F3F3]",
-      "dark:[&>li]:text-[#E8E8E8] dark:[&>li]:border-[#E8E8E8] dark:[&>li]:bg-[#4B4B4B]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "primary", hoverable) do
-    [
-      "[&>li]:text-[#016974] [&>li]:border-[#016974] [&>li]:bg-[#E2F8FB]",
-      "dark:[&>li]:text-[#77D5E3] dark:[&>li]:border-[#77D5E3] dark:[&>li]:bg-[#002D33]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "secondary", hoverable) do
-    [
-      "[&>li]:text-[#175BCC] [&>li]:border-[#175BCC] [&>li]:bg-[#EFF4FE]",
-      "dark:[&>li]:text-[#A9C9FF] dark:[&>li]:border-[#A9C9FF] dark:[&>li]:bg-[#002661]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "success", hoverable) do
-    [
-      "[&>li]:text-[#166C3B] [&>li]:border-[#166C3B] [&>li]:bg-[#EAF6ED]",
-      "dark:[&>li]:text-[#7FD99A] dark:[&>li]:border-[#7FD99A] dark:[&>li]:bg-[#002F14]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "warning", hoverable) do
-    [
-      "[&>li]:text-[#976A01] [&>li]:border-[#976A01] [&>li]:bg-[#FFF7E6]",
-      "dark:[&>li]:text-[#FDD067] dark:[&>li]:border-[#FDD067] dark:[&>li]:bg-[#322300]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "danger", hoverable) do
-    [
-      "[&>li]:text-[#BB032A] [&>li]:border-[#BB032A] [&>li]:bg-[#FFF0EE]",
-      "dark:[&>li]:text-[#FFB2AB] dark:[&>li]:border-[#FFB2AB] dark:[&>li]:bg-[#520810]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "info", hoverable) do
-    [
-      "[&>li]:text-[#0B84BA] [&>li]:border-[#0B84BA] [&>li]:bg-[#E7F6FD]",
-      "dark:[&>li]:text-[#6EC9F2] dark:[&>li]:border-[#6EC9F2] dark:[&>li]:bg-[#03212F]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "misc", hoverable) do
-    [
-      "[&>li]:text-[#653C94] [&>li]:border-[#653C94] [&>li]:bg-[#F6F0FE]",
-      "dark:[&>li]:text-[#CBA2FA] dark:[&>li]:border-[#CBA2FA] dark:[&>li]:bg-[#221431]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "dawn", hoverable) do
-    [
-      "[&>li]:text-[#7E4B2A] [&>li]:border-[#7E4B2A] [&>li]:bg-[#FBF2ED]",
-      "dark:[&>li]:text-[#E4B190] dark:[&>li]:border-[#E4B190] dark:[&>li]:bg-[#2A190E]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("bordered_separated", "silver", hoverable) do
-    [
-      "[&>li]:text-[#727272] [&>li]:border-[#727272] [&>li]:bg-[#F3F3F3]",
-      "dark:[&>li]:text-[#BBBBBB] dark:[&>li]:border-[#BBBBBB] dark:[&>li]:bg-[#4B4B4B]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "natural", hoverable) do
-    [
-      "[&>li]:text-[#4B4B4B] [&>li]:border-[#4B4B4B] dark:[&>li]:text-[#DDDDDD] dark:[&>li]:border-[#DDDDDD]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-black dark:hover:[&_li]:bg-white"
-    ]
-  end
-
-  defp color_variant("outline_separated", "primary", hoverable) do
-    [
-      "[&>li]:text-[#007F8C] [&>li]:border-[#007F8C]  dark:[&>li]:text-[#01B8CA] dark:[&>li]:border-[#01B8CA]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1A535A] dark:hover:[&_li]:bg-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "secondary", hoverable) do
-    [
-      "[&>li]:text-[#266EF1] [&>li]:border-[#266EF1] dark:[&>li]:text-[#6DAAFB] dark:[&>li]:border-[#6DAAFB]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#1948A3] dark:hover:[&_li]:bg-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "success", hoverable) do
-    [
-      "[&>li]:text-[#0E8345] [&>li]:border-[#0E8345] dark:[&>li]:text-[#06C167] dark:[&>li]:border-[#06C167]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#0D572D] dark:hover:[&_li]:bg-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "warning", hoverable) do
-    [
-      "[&>li]:text-[#CA8D01] [&>li]:border-[#CA8D01] dark:[&>li]:text-[#FDC034] dark:[&>li]:border-[#FDC034]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#654600] dark:hover:[&_li]:bg-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "danger", hoverable) do
-    [
-      "[&>li]:text-[#DE1135] [&>li]:border-[#DE1135] dark:[&>li]:text-[#FC7F79] dark:[&>li]:border-[#FC7F79]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#950F22] dark:hover:[&_li]:bg-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "info", hoverable) do
-    [
-      "[&>li]:text-[#0B84BA] [&>li]:border-[#0B84BA] dark:[&>li]:text-[#3EB7ED] dark:[&>li]:border-[#3EB7ED]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#06425D] dark:hover:[&_li]:bg-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "misc", hoverable) do
-    [
-      "[&>li]:text-[#8750C5] [&>li]:border-[#8750C5] dark:[&>li]:text-[#BA83F9] dark:[&>li]:border-[#BA83F9]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#442863] dark:hover:[&_li]:bg-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "dawn", hoverable) do
-    [
-      "[&>li]:text-[#A86438] [&>li]:border-[#A86438] dark:[&>li]:text-[#DB976B] dark:[&>li]:border-[#DB976B]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#54321C] dark:hover:[&_li]:bg-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline_separated", "silver", hoverable) do
-    [
-      "[&>li]:text-[#868686] [&>li]:border-[#868686] dark:[&>li]:text-[#A6A6A6] dark:[&>li]:border-[#A6A6A6]",
-      hoverable &&
-        "hover:[&_li]:text-white dark:hover:[&_li]:text-black hover:[&_li]:bg-[#5E5E5E] dark:hover:[&_li]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/mega_menu.ex b/lib/geo_web/components/mega_menu.ex
deleted file mode 100644
index e8dba7c..0000000
--- a/lib/geo_web/components/mega_menu.ex
+++ /dev/null
@@ -1,672 +0,0 @@
-defmodule GeoWeb.Components.MegaMenu do
-  @moduledoc """
-  The `GeoWeb.Components.MegaMenu` module provides a customizable and interactive mega menu component
-  for building sophisticated navigation systems in Phoenix LiveView applications.
-
-  This component can be used to create multi-level navigation menus with various styling and
-  layout options, making it ideal for sites with complex information architectures.
-
-  ### Features
-
-  - **Multiple Styling Options:** Choose from several variants, including `default` and `shadow`,
-  to match your design needs.
-  - **Color Customization:** Supports a wide range of color themes to integrate seamlessly with
-  your application's style.
-  - **Interactive Elements:** Allows for click or hover-based activation of the menu, giving users
-  flexibility in interaction.
-  - **Customizable Slots:** Utilize the `trigger` and `inner_block` slots to define custom content
-  and layout within the mega menu.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `mega_menu` component that can display various sections of content.
-  It includes slots for defining a trigger element, such as a button, and inner content blocks.
-
-  ## Examples
-
-  ```elixir
-  <.mega_menu id="mega" space="small" rounded="large" padding="extra_small" top_gap="large" clickable>
-    <:trigger>
-      <button class="text-start w-full block">MegaMenu</button>
-    </:trigger>
-
-    <div>
-      <div class="grid md:grid-cols-2 lg:grid-cols-3">
-        <ul class="space-y-4 sm:mb-4 md:mb-0" aria-labelledby="mega-menu-full-cta-button">
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Online Stores
-            </a>
-          </li>
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Segmentation
-            </a>
-          </li>
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Marketing CRM
-            </a>
-          </li>
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Online Stores
-            </a>
-          </li>
-        </ul>
-        <ul class="hidden mb-4 space-y-4 md:mb-0 sm:block">
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Our Blog
-            </a>
-          </li>
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Terms & Conditions
-            </a>
-          </li>
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              License
-            </a>
-          </li>
-          <li>
-            <a href="#" class="hover:underline hover:text-blue-600">
-              Resources
-            </a>
-          </li>
-        </ul>
-        <div class="mt-4 md:mt-0">
-          <h2 class="mb-2 font-semibold text-gray-900">Our brands</h2>
-          <p class="mb-2 text-gray-500">
-            At Flowbite, we have a portfolio of brands that cater to a variety of preferences.
-          </p>
-          <a
-            href="#"
-            class="inline-flex items-center text-sm font-medium text-blue-600 hover:underline hover:text-blue-600"
-          >
-            Explore our brands <span class="sr-only">Explore our brands </span>
-            <svg
-              class="w-3 h-3 ms-2 rtl:rotate-180"
-              aria-hidden="true"
-              xmlns="http://www.w3.org/2000/svg"
-              fill="none"
-              viewBox="0 0 14 10"
-            >
-              <path
-                stroke="currentColor"
-                stroke-linecap="round"
-                stroke-linejoin="round"
-                stroke-width="2"
-                d="M1 5h12m0 0L9 1m4 4L9 9"
-              />
-            </svg>
-          </a>
-        </div>
-      </div>
-    </div>
-  </.mega_menu>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :clickable, :boolean,
-    default: false,
-    doc: "Determines if the element can be activated on click"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :width, :string, default: "full", doc: "Determines the element width"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Determines custom class for the icon"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :title_class, :string, default: nil, doc: "Determines custom class for the title"
-  attr :content_class, :string, default: nil, doc: "Determines custom class for the content"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :top_gap, :string, default: "extra_small", doc: "Determines top gap of the element"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :trigger, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  def mega_menu(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      phx-open-mega={
-        JS.toggle_class("show-mega-menu",
-          to: "##{@id}-mega-menu-content",
-          transition: "duration-100"
-        )
-      }
-      class={[
-        "[&>.mega-menu-content]:invisible [&>.mega-menu-content]:opacity-0",
-        "[&>.mega-menu-content.show-mega-menu]:visible [&>.mega-menu-content.show-mega-menu]:opacity-100",
-        !@clickable && tirgger_mega_menu(),
-        color_variant(@variant, @color),
-        padding_size(@padding),
-        rounded_size(@rounded),
-        width_size(@width),
-        border_class(@border, @variant),
-        top_gap(@top_gap),
-        space_class(@space),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      role="navigation"
-      {@rest}
-    >
-      <button
-        :if={!is_nil(@title)}
-        role="button"
-        aria-haspopup="true"
-        phx-click={@id && JS.exec("phx-open-mega", to: "##{@id}")}
-        class={["flex items-center", @title_class]}
-      >
-        <.icon :if={!is_nil(@icon)} name={@icon} class={["aler-icon", @icon_class]} />
-        <span>{@title}</span>
-      </button>
-
-      <div
-        :if={@trigger}
-        phx-click={@id && JS.exec("phx-open-mega", to: "##{@id}")}
-        class={["cursor-pointer mega-menu-trigger", @trigger[:class]]}
-      >
-        {render_slot(@trigger)}
-      </div>
-
-      <div
-        id={@id && "#{@id}-mega-menu-content"}
-        phx-click-away={
-          @id &&
-            JS.remove_class("show-mega-menu",
-              to: "##{@id}-mega-menu-content",
-              transition: "duration-300"
-            )
-        }
-        class={[
-          "mega-menu-content inset-x-0 top-full absolute z-20 transition-all ease-in-out delay-100 duratio-500 w-full",
-          "invisible opacity-0",
-          @content_class
-        ]}
-        role="menu"
-      >
-        {render_slot(@inner_block)}
-      </div>
-    </div>
-    """
-  end
-
-  defp tirgger_mega_menu(),
-    do: "[&>.mega-menu-content]:hover:visible [&>.mega-menu-content]:hover:opacity-100"
-
-  defp top_gap("none"), do: "[&>.mega-menu-content]:mt-0"
-  defp top_gap("extra_small"), do: "[&>.mega-menu-content]:mt-1"
-  defp top_gap("small"), do: "[&>.mega-menu-content]:mt-2"
-  defp top_gap("medium"), do: "[&>.mega-menu-content]:mt-3"
-  defp top_gap("large"), do: "[&>.mega-menu-content]:mt-4"
-  defp top_gap("extra_large"), do: "[&>.mega-menu-content]:mt-5"
-  defp top_gap(params) when is_binary(params), do: params
-
-  defp width_size("full"), do: "[&>.mega-menu-content]:w-ful"
-
-  defp width_size("half"),
-    do:
-      "[&>.mega-menu-content]:w-full md:[&>.mega-menu-content]:w-1/2 md:[&>.mega-menu-content]:mx-auto"
-
-  defp width_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: "[&>.mega-menu-content]:border-0"
-  defp border_class("extra_small", _), do: "[&>.mega-menu-content]:border"
-  defp border_class("small", _), do: "[&>.mega-menu-content]:border-2"
-  defp border_class("medium", _), do: "[&>.mega-menu-content]:[&>.mega-menu-content]:border-[3px]"
-  defp border_class("large", _), do: "[&>.mega-menu-content]:border-4"
-
-  defp border_class("extra_large", _),
-    do: "[&>.mega-menu-content]:[&>.mega-menu-content]:border-[5px]"
-
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&>.mega-menu-content]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&>.mega-menu-content]:rounded"
-
-  defp rounded_size("medium"), do: "[&>.mega-menu-content]:rounded-md"
-
-  defp rounded_size("large"), do: "[&>.mega-menu-content]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&>.mega-menu-content]:rounded-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs"
-
-  defp size_class("small"), do: "text-sm"
-
-  defp size_class("medium"), do: "text-base"
-
-  defp size_class("large"), do: "text-lg"
-
-  defp size_class("extra_large"), do: "text-xl"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "[&>.mega-menu-content]:p-2"
-
-  defp padding_size("small"), do: "[&>.mega-menu-content]:p-3"
-
-  defp padding_size("medium"), do: "[&>.mega-menu-content]:p-4"
-
-  defp padding_size("large"), do: "[&>.mega-menu-content]:p-5"
-
-  defp padding_size("extra_large"), do: "[&>.mega-menu-content]:p-6"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "[&>.mega-menu-content]:space-y-2"
-
-  defp space_class("small"), do: "[&>.mega-menu-content]:space-y-3"
-
-  defp space_class("medium"), do: "[&>.mega-menu-content]:space-y-4"
-
-  defp space_class("large"), do: "[&>.mega-menu-content]:space-y-5"
-
-  defp space_class("extra_large"), do: "[&>.mega-menu-content]:space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "[&>.mega-menu-content]:bg-white text-[#09090b] [&>.mega-menu-content]:border-[#e4e4e7] [&>.mega-menu-content]:shadow-sm",
-      "dark:[&>.mega-menu-content]:bg-[#18181B] dark:text-[#FAFAFA] dark:[&>.mega-menu-content]:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&>.mega-menu-content]:bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&>.mega-menu-content]:bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&>.mega-menu-content]:bg-[#4B4B4B] text-white dark:[&>.mega-menu-content]:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&>.mega-menu-content]:bg-[#007F8C] text-white dark:[&>.mega-menu-content]:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&>.mega-menu-content]:bg-[#266EF1] text-white dark:[&>.mega-menu-content]:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&>.mega-menu-content]:bg-[#0E8345] text-white dark:[&>.mega-menu-content]:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&>.mega-menu-content]:bg-[#CA8D01] text-white dark:[&>.mega-menu-content]:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&>.mega-menu-content]:bg-[#DE1135] text-white dark:[&>.mega-menu-content]:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&>.mega-menu-content]:bg-[#0B84BA] text-white dark:[&>.mega-menu-content]:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&>.mega-menu-content]:bg-[#8750C5] text-white dark:[&>.mega-menu-content]:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&>.mega-menu-content]:bg-[#A86438] text-white dark:[&>.mega-menu-content]:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&>.mega-menu-content]:bg-[#868686] text-white dark:[&>.mega-menu-content]:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] [&>.mega-menu-content]:border-[#4B4B4B] dark:text-[#DDDDDD] dark:[&>.mega-menu-content]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] [&>.mega-menu-content]:border-[#007F8C]  dark:text-[#01B8CA] dark:[&>.mega-menu-content]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] [&>.mega-menu-content]:border-[#266EF1] dark:text-[#6DAAFB] dark:[&>.mega-menu-content]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] [&>.mega-menu-content]:border-[#0E8345] dark:text-[#06C167] dark:[&>.mega-menu-content]:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] [&>.mega-menu-content]:border-[#CA8D01] dark:text-[#FDC034] dark:[&>.mega-menu-content]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] [&>.mega-menu-content]:border-[#DE1135] dark:text-[#FC7F79] dark:[&>.mega-menu-content]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] [&>.mega-menu-content]:border-[#0B84BA] dark:text-[#3EB7ED] dark:[&>.mega-menu-content]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] [&>.mega-menu-content]:border-[#8750C5] dark:text-[#BA83F9] dark:[&>.mega-menu-content]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] [&>.mega-menu-content]:border-[#A86438] dark:text-[#DB976B] dark:[&>.mega-menu-content]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] [&>.mega-menu-content]:border-[#868686] dark:text-[#A6A6A6] dark:[&>.mega-menu-content]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&>.mega-menu-content]:bg-[#4B4B4B] text-white dark:[&>.mega-menu-content]:bg-[#DDDDDD] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&>.mega-menu-content]:bg-[#007F8C] text-white dark:[&>.mega-menu-content]:bg-[#01B8CA] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&>.mega-menu-content]:bg-[#266EF1] text-white dark:[&>.mega-menu-content]:bg-[#6DAAFB] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&>.mega-menu-content]:bg-[#0E8345] text-white hover:[&>.mega-menu-content]:bg-[#166C3B] dark:[&>.mega-menu-content]:bg-[#06C167] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&>.mega-menu-content]:bg-[#CA8D01] text-white dark:[&>.mega-menu-content]:bg-[#FDC034] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&>.mega-menu-content]:bg-[#DE1135] text-white dark:[&>.mega-menu-content]:bg-[#FC7F79] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&>.mega-menu-content]:bg-[#0B84BA] text-white dark:[&>.mega-menu-content]:bg-[#3EB7ED] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&>.mega-menu-content]:bg-[#8750C5] text-white dark:[&>.mega-menu-content]:bg-[#BA83F9] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&>.mega-menu-content]:bg-[#A86438] text-white dark:[&>.mega-menu-content]:bg-[#DB976B] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&>.mega-menu-content]:bg-[#868686] text-white dark:[&>.mega-menu-content]:bg-[#A6A6A6] dark:text-black",
-      "[&>.mega-menu-content]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&>.mega-menu-content]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:[&>.mega-menu-content]:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "[&>.mega-menu-content]:bg-white text-black [&>.mega-menu-content]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "[&>.mega-menu-content]:bg-[#282828] text-white [&>.mega-menu-content]:border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] [&>.mega-menu-content]:border-[#282828] [&>.mega-menu-content]:bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:[&>.mega-menu-content]:border-[#E8E8E8] dark:[&>.mega-menu-content]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] [&>.mega-menu-content]:border-[#016974] [&>.mega-menu-content]:bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:[&>.mega-menu-content]:border-[#77D5E3] dark:[&>.mega-menu-content]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] [&>.mega-menu-content]:border-[#175BCC] [&>.mega-menu-content]:bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:[&>.mega-menu-content]:border-[#A9C9FF] dark:[&>.mega-menu-content]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] [&>.mega-menu-content]:border-[#166C3B] [&>.mega-menu-content]:bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:[&>.mega-menu-content]:border-[#7FD99A] dark:[&>.mega-menu-content]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] [&>.mega-menu-content]:border-[#976A01] [&>.mega-menu-content]:bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:[&>.mega-menu-content]:border-[#FDD067] dark:[&>.mega-menu-content]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] [&>.mega-menu-content]:border-[#BB032A] [&>.mega-menu-content]:bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:[&>.mega-menu-content]:border-[#FFB2AB] dark:[&>.mega-menu-content]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] [&>.mega-menu-content]:border-[#0B84BA] [&>.mega-menu-content]:bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:[&>.mega-menu-content]:border-[#6EC9F2] dark:[&>.mega-menu-content]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] [&>.mega-menu-content]:border-[#653C94] [&>.mega-menu-content]:bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:[&>.mega-menu-content]:border-[#CBA2FA] dark:[&>.mega-menu-content]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] [&>.mega-menu-content]:border-[#7E4B2A] [&>.mega-menu-content]:bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:[&>.mega-menu-content]:border-[#E4B190] dark:[&>.mega-menu-content]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] [&>.mega-menu-content]:border-[#727272] [&>.mega-menu-content]:bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:[&>.mega-menu-content]:border-[#BBBBBB] dark:[&>.mega-menu-content]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&>.mega-menu-content]:bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/menu.ex b/lib/geo_web/components/menu.ex
deleted file mode 100644
index 0d32305..0000000
--- a/lib/geo_web/components/menu.ex
+++ /dev/null
@@ -1,421 +0,0 @@
-defmodule GeoWeb.Components.Menu do
-  @moduledoc """
-  The `GeoWeb.Components.Menu` module is designed to render a hierarchical menu structure in
-  Phoenix LiveView applications. It provides a versatile menu component capable of
-  handling both simple and complex navigation systems with nested sub-menus.
-
-  This module supports dynamic configuration of menu items through a list of maps,
-  allowing for a wide range of customization options. Menu items can be rendered as
-  standalone buttons or as expandable accordions containing nested sub-menus.
-  The `GeoWeb.Components.Menu` is ideal for creating multi-level navigation menus in
-  applications with complex information architectures.
-
-  The component integrates smoothly with other components from the `MishkaChelekom`
-  library, such as `accordion` and `button_link`, to offer a consistent and cohesive
-  UI experience. It also includes support for various padding and spacing options to
-  control the layout and appearance of the menu.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Accordion, only: [accordion: 1]
-  import GeoWeb.Components.Button, only: [button_link: 1]
-
-  @doc """
-  Renders a customizable `menu` component that can include menu items as a list of maps or use
-  additional slots to define nested content.
-
-  It supports both direct menu items and nested accordion submenus.
-
-  ## Examples
-
-  ```elixir
-  <.menu>
-    <li>
-      <.button_link
-        navigate="/"
-        size="extra_small"
-        color="misc"
-        variant="unbordered"
-        rounded="large"
-        class="w-full"
-        display="flex"
-        icon_class="size-5"
-        icon="hero-home"
-        font_weight="font-bold"
-      >
-        Dashboard
-      </.button_link>
-    </li>
-
-    <li>
-      <.button_link
-        size="extra_small"
-        color="misc"
-        variant="unbordered"
-        rounded="large"
-        class="w-full"
-        display="flex"
-        navigate="/examples/footer"
-        icon_class="size-5"
-        icon="hero-server"
-      >
-        Footer
-      </.button_link>
-    </li>
-
-    <li>
-      <.accordion
-        padding="none"
-        id="accordion1"
-        size="extra_small"
-        rounded="large"
-        color="misc"
-        variant="menu"
-      >
-        <:item title="Menu item" icon_class="size-5" icon="hero-bookmark">
-          <ul class="pl-5 space-y-3 mt-3">
-            <.button_link
-              navigate="/examples/indicator"
-              size="extra_small"
-              color="misc"
-              variant="unbordered"
-              rounded="large"
-              class="w-full"
-              display="flex"
-              icon_class="size-5"
-              icon="hero-scissors"
-            >
-              Indicator
-            </.button_link>
-
-            <.button_link
-              navigate="/examples/image"
-              size="extra_small"
-              color="misc"
-              variant="unbordered"
-              rounded="large"
-              class="w-full"
-              display="flex"
-              icon_class="size-5"
-              icon="hero-scale"
-            >
-              Image
-            </.button_link>
-
-            <.button_link
-              navigate="/examples/rating"
-              size="extra_small"
-              color="misc"
-              variant="unbordered"
-              rounded="large"
-              class="w-full"
-              display="flex"
-              icon_class="size-5"
-              icon="hero-building-storefront"
-            >
-              Rating
-            </.button_link>
-
-            <.accordion
-              variant="menu"
-              padding="none"
-              size="extra_small"
-              rounded="large"
-              color="misc"
-              id="accordion2"
-            >
-              <:item title="Invoice" icon_class="size-5" icon="hero-building-storefront">
-                <ul class="pl-5 space-y-3 mt-3">
-                  <.button_link
-                    navigate="/examples/popover"
-                    size="extra_small"
-                    color="misc"
-                    variant="unbordered"
-                    rounded="large"
-                    class="w-full"
-                    display="flex"
-                    icon_class="size-5"
-                    icon="hero-bolt"
-                  >
-                    Popover
-                  </.button_link>
-
-                  <.button_link
-                    navigate="/examples/overlay"
-                    size="extra_small"
-                    color="misc"
-                    variant="unbordered"
-                    rounded="large"
-                    class="w-full"
-                    display="flex"
-                    icon_class="size-5"
-                    icon="hero-shopping-bag"
-                  >
-                    Overlay
-                  </.button_link>
-                </ul>
-              </:item>
-            </.accordion>
-          </ul>
-        </:item>
-      </.accordion>
-    </li>
-
-    <li>
-      <.button_link
-        navigate="/examples/modal"
-        size="extra_small"
-        color="misc"
-        variant="unbordered"
-        rounded="large"
-        class="w-full"
-        display="flex"
-        icon_class="size-5"
-        icon="hero-bell"
-      >
-        Modal
-      </.button_link>
-    </li>
-
-    <li>
-      <.button_link
-        navigate="/examples/list"
-        size="extra_small"
-        color="misc"
-        variant="unbordered"
-        rounded="large"
-        class="w-full"
-        display="flex"
-        icon_class="size-5"
-        icon="hero-cake"
-      >
-        List
-      </.button_link>
-    </li>
-  </.menu>
-  ```
-
-  ### It can be used as list of map
-
-  ```elixir
-  list_menues = [
-    %{
-      id: "Dashaboard",
-      navigate: "/",
-      title: "Dashaboard",
-      size: "extra_small",
-      color: "misc",
-      variant: "unbordered",
-      rounded: "large",
-      class: "w-full",
-      display: "flex",
-      icon_class: "size-5",
-      icon: "hero-home",
-      active: true
-    },
-    %{
-      id: "Footer",
-      navigate: "/examples/footer",
-      title: "Footer",
-      size: "extra_small",
-      color: "misc",
-      variant: "unbordered",
-      rounded: "large",
-      class: "w-full",
-      display: "flex",
-      icon_class: "size-5",
-      icon: "hero-server"
-    },
-    %{
-      id: "Menu-item",
-      title: "Menu item",
-      padding: "pl-5 space-y-3 mt-3",
-      size: "extra_small",
-      rounded: "large",
-      color: "misc",
-      variant: "menu",
-      icon: "hero-bookmark",
-      icon_class: "size-5",
-      sub_items: [
-        %{
-          navigate: "/examples/indicator",
-          title: "Indicator",
-          size: "extra_small",
-          color: "misc",
-          variant: "unbordered",
-          rounded: "large",
-          class: "w-full",
-          display: "flex",
-          icon_class: "size-5",
-          icon: "hero-scissors"
-        },
-        %{
-          navigate: "/examples/image",
-          title: "Image",
-          size: "extra_small",
-          color: "misc",
-          variant: "unbordered",
-          rounded: "large",
-          class: "w-full",
-          display: "flex",
-          icon_class: "size-5",
-          icon: "hero-scale"
-        },
-        %{
-          navigate: "/examples/rating",
-          title: "Rating",
-          size: "extra_small",
-          color: "misc",
-          variant: "unbordered",
-          rounded: "large",
-          class: "w-full",
-          display: "flex",
-          icon_class: "size-5",
-          icon: "hero-building-storefront"
-        },
-        %{
-          id: "Invoice",
-          title: "Invoice",
-          variant: "menu",
-          padding: "pl-5 space-y-3 mt-3",
-          size: "extra_small",
-          rounded: "large",
-          color: "misc",
-          icon: "hero-bookmark",
-          icon_class: "size-5",
-          sub_items: [
-            %{
-              navigate: "/examples/popover",
-              title: "Popover",
-              size: "extra_small",
-              color: "misc",
-              variant: "unbordered",
-              rounded: "large",
-              class: "w-full",
-              display: "flex",
-              icon_class: "size-5",
-              icon: "hero-bolt"
-            },
-            %{
-              navigate: "/examples/overlay",
-              title: "Overlay",
-              size: "extra_small",
-              color: "misc",
-              variant: "unbordered",
-              rounded: "large",
-              class: "w-full",
-              display: "flex",
-              icon_class: "size-5",
-              icon: "hero-shopping-bag"
-            }
-          ]
-        }
-      ]
-    },
-    %{
-      navigate: "/examples/modal",
-      title: "Modal",
-      size: "extra_small",
-      color: "misc",
-      variant: "unbordered",
-      rounded: "large",
-      class: "w-full",
-      display: "flex",
-      icon_class: "size-5",
-      icon: "hero-bell"
-    }
-  ]
-
-  <.menu menu_items={@list_menues} />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :link_class, :string, default: nil, doc: "Custom CSS class for additional styling for link"
-  attr :item_class, :string, default: nil, doc: "Custom CSS class for additional styling for li"
-
-  attr :accordion_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling for accordion"
-
-  attr :menu_items, :list, default: [], doc: "Determines menu items as a list of maps"
-  attr :space, :string, default: "small", doc: "Space between items"
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-
-  slot :inner_block,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def menu(assigns) do
-    ~H"""
-    <ul
-      id={@id}
-      class={[
-        padding_size(@padding),
-        space_class(@space),
-        @class
-      ]}
-      {@rest}
-    >
-      <li :for={menu_item <- @menu_items} class={@item_class}>
-        <.button_link
-          :if={Map.get(menu_item, :sub_items, []) == []}
-          font_weight={menu_item[:active] && "font-bold"}
-          class={@link_class}
-          {menu_item}
-        />
-        <.accordion
-          :if={Map.get(menu_item, :sub_items, []) != []}
-          padding="none"
-          {Map.drop(menu_item, [:sub_items, :padding])}
-          class={@accordion_class}
-        >
-          <:item title={menu_item[:title]} icon_class={menu_item[:icon_class]} icon={menu_item[:icon]}>
-            <.menu
-              id={menu_item[:id]}
-              class={menu_item[:padding]}
-              menu_items={Map.get(menu_item, :sub_items, [])}
-            />
-          </:item>
-        </.accordion>
-      </li>
-      {render_slot(@inner_block)}
-    </ul>
-    """
-  end
-
-  defp padding_size("extra_small"), do: "p-2"
-
-  defp padding_size("small"), do: "p-2.5"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-3.5"
-
-  defp padding_size("extra_large"), do: "p-4"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/mishka_components.ex b/lib/geo_web/components/mishka_components.ex
index b90378f..ab8689c 100644
--- a/lib/geo_web/components/mishka_components.ex
+++ b/lib/geo_web/components/mishka_components.ex
@@ -1,172 +1,8 @@
 defmodule GeoWeb.Components.MishkaComponents do
   defmacro __using__(_) do
     quote do
-      import GeoWeb.Components.Accordion,
-        only: [
-          accordion: 1,
-          native_accordion: 1,
-          show_accordion_content: 1,
-          show_accordion_content: 2,
-          hide_accordion_content: 1,
-          hide_accordion_content: 2
-        ]
-
-      import GeoWeb.Components.Alert,
-        only: [
-          flash: 1,
-          flash_group: 1,
-          alert: 1,
-          show_alert: 1,
-          show_alert: 2,
-          hide_alert: 1,
-          hide_alert: 2
-        ]
-
-      import GeoWeb.Components.Avatar, only: [avatar: 1, avatar_group: 1]
-
-      import GeoWeb.Components.Badge,
-        only: [badge: 1, hide_badge: 1, hide_badge: 2, show_badge: 1, show_badge: 2]
-
-      import GeoWeb.Components.Banner,
-        only: [banner: 1, show_banner: 1, show_banner: 2, hide_banner: 1, hide_banner: 2]
-
-      import GeoWeb.Components.Blockquote, only: [blockquote: 1]
-      import GeoWeb.Components.Breadcrumb, only: [breadcrumb: 1]
-
-      import GeoWeb.Components.Button,
-        only: [button_group: 1, button: 1, input_button: 1, button_link: 1, back: 1]
-
-      import GeoWeb.Components.Card,
-        only: [card: 1, card_title: 1, card_media: 1, card_content: 1, card_footer: 1]
-
-      import GeoWeb.Components.Carousel, only: [carousel: 1]
-      import GeoWeb.Components.Chat, only: [chat: 1, chat_section: 1]
-      import GeoWeb.Components.CheckboxCard, only: [checkbox_card: 1, checkbox_card_check: 3]
-
-      import GeoWeb.Components.CheckboxField,
-        only: [checkbox_field: 1, group_checkbox: 1, checkbox_check: 3]
-
-      import GeoWeb.Components.Clipboard, only: [clipboard: 1]
-      import GeoWeb.Components.ColorField, only: [color_field: 1]
-      import GeoWeb.Components.Combobox, only: [combobox: 1]
-      import GeoWeb.Components.DateTimeField, only: [date_time_field: 1]
-      import GeoWeb.Components.DeviceMockup, only: [device_mockup: 1]
-      import GeoWeb.Components.Divider, only: [divider: 1, hr: 1]
-
-      import GeoWeb.Components.Drawer,
-        only: [drawer: 1, hide_drawer: 2, hide_drawer: 3, show_drawer: 2, show_drawer: 3]
-
-      import GeoWeb.Components.Dropdown,
-        only: [dropdown: 1, dropdown_trigger: 1, dropdown_content: 1]
-
-      import GeoWeb.Components.EmailField, only: [email_field: 1]
-      import GeoWeb.Components.Fieldset, only: [fieldset: 1]
-      import GeoWeb.Components.FileField, only: [file_field: 1]
-      import GeoWeb.Components.Footer, only: [footer: 1, footer_section: 1]
-      import GeoWeb.Components.FormWrapper, only: [form_wrapper: 1, simple_form: 1]
-
-      import GeoWeb.Components.Gallery,
-        only: [gallery: 1, gallery_media: 1, filterable_gallery: 1]
-
       import GeoWeb.Components.Icon, only: [icon: 1]
-      import GeoWeb.Components.Image, only: [image: 1]
-      import GeoWeb.Components.Indicator, only: [indicator: 1]
-      import GeoWeb.Components.InputField, only: [input: 1, error: 1]
-      import GeoWeb.Components.Jumbotron, only: [jumbotron: 1]
-      import GeoWeb.Components.Keyboard, only: [keyboard: 1]
-      import GeoWeb.Components.Layout, only: [flex: 1, grid: 1]
-      import GeoWeb.Components.List, only: [list: 1, li: 1, ul: 1, ol: 1, list_group: 1]
-      import GeoWeb.Components.MegaMenu, only: [mega_menu: 1]
-      import GeoWeb.Components.Menu, only: [menu: 1]
-
-      import GeoWeb.Components.Modal,
-        only: [
-          modal: 1,
-          show_modal: 1,
-          show_modal: 2,
-          hide_modal: 1,
-          hide_modal: 2,
-          show: 1,
-          show: 2,
-          hide: 1,
-          hide: 2
-        ]
-
-      import GeoWeb.Components.NativeSelect, only: [native_select: 1, select_option_group: 1]
-      import GeoWeb.Components.Navbar, only: [navbar: 1, header: 1]
-      import GeoWeb.Components.NumberField, only: [number_field: 1]
-      import GeoWeb.Components.Overlay, only: [overlay: 1]
-      import GeoWeb.Components.Pagination, only: [pagination: 1]
-      import GeoWeb.Components.PasswordField, only: [password_field: 1]
-      import GeoWeb.Components.Popover, only: [popover: 1, popover_trigger: 1, popover_content: 1]
-
-      import GeoWeb.Components.Progress,
-        only: [progress: 1, progress_section: 1, semi_circle_progress: 1, ring_progress: 1]
-
-      import GeoWeb.Components.RadioCard, only: [radio_card: 1, radio_card_check: 3]
-      import GeoWeb.Components.RadioField, only: [radio_field: 1, group_radio: 1, radio_check: 3]
-      import GeoWeb.Components.RangeField, only: [range_field: 1]
-      import GeoWeb.Components.Rating, only: [rating: 1]
       import GeoWeb.Components.ScrollArea, only: [scroll_area: 1]
-      import GeoWeb.Components.SearchField, only: [search_field: 1]
-      import GeoWeb.Components.Sidebar, only: [sidebar: 1]
-      import GeoWeb.Components.Skeleton, only: [skeleton: 1]
-      import GeoWeb.Components.SpeedDial, only: [speed_dial: 1]
-      import GeoWeb.Components.Spinner, only: [spinner: 1]
-      import GeoWeb.Components.Stepper, only: [stepper: 1, stepper_section: 1]
-      import GeoWeb.Components.Table, only: [table: 1, th: 1, tr: 1, td: 1]
-
-      import GeoWeb.Components.TableContent,
-        only: [table_content: 1, content_wrapper: 1, content_item: 1]
-
-      import GeoWeb.Components.Tabs,
-        only: [tabs: 1, show_tab: 2, show_tab: 3, hide_tab: 2, hide_tab: 3]
-
-      import GeoWeb.Components.TelField, only: [tel_field: 1]
-      import GeoWeb.Components.TextField, only: [text_field: 1]
-      import GeoWeb.Components.TextareaField, only: [textarea_field: 1]
-      import GeoWeb.Components.Timeline, only: [timeline: 1, timeline_section: 1]
-
-      import GeoWeb.Components.Toast,
-        only: [
-          toast: 1,
-          toast_group: 1,
-          show_toast: 1,
-          show_toast: 2,
-          hide_toast: 1,
-          hide_toast: 2
-        ]
-
-      import GeoWeb.Components.ToggleField, only: [toggle_field: 1, toggle_check: 2]
-      import GeoWeb.Components.Tooltip, only: [tooltip: 1]
-
-      import GeoWeb.Components.Typography,
-        only: [
-          h1: 1,
-          h2: 1,
-          h3: 1,
-          h4: 1,
-          h5: 1,
-          h6: 1,
-          p: 1,
-          strong: 1,
-          em: 1,
-          dl: 1,
-          dt: 1,
-          dd: 1,
-          figure: 1,
-          figcaption: 1,
-          abbr: 1,
-          mark: 1,
-          small: 1,
-          s: 1,
-          u: 1,
-          cite: 1,
-          del: 1
-        ]
-
-      import GeoWeb.Components.UrlField, only: [url_field: 1]
-      import GeoWeb.Components.Video, only: [video: 1]
     end
   end
 end
diff --git a/lib/geo_web/components/modal.ex b/lib/geo_web/components/modal.ex
deleted file mode 100644
index cd31607..0000000
--- a/lib/geo_web/components/modal.ex
+++ /dev/null
@@ -1,608 +0,0 @@
-defmodule GeoWeb.Components.Modal do
-  @moduledoc """
-  The `GeoWeb.Components.Modal` module provides a versatile and customizable modal component for
-  Phoenix LiveView applications. It supports various configurations for size, style, color,
-  padding, and border radius to match different design requirements. The module is designed
-  to facilitate user interactions with dynamic content, such as forms,
-  confirmation dialogs, or notifications.
-
-  The modal component includes JavaScript hooks for showing and hiding the modal,
-  which are triggered based on user actions or programmatic events.
-
-  The component is equipped to handle accessibility features like focus management
-  and keyboard navigation to ensure a seamless user experience.
-
-  This module can be integrated with other components and tailored for various use cases
-  in web applications, making it a powerful tool for enhancing user interfaces and interaction workflows.
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `modal` component that displays overlay content with optional title and inner content.
-  It can be controlled with the `show` attribute and includes actions for closing the modal.
-
-  ## Examples
-
-  ```elixir
-  <.modal id="modal-1" title="default">
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit.
-      Commodi ea atque soluta praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-  </.modal>
-
-  <.modal id="modal-2" title="Info Modal" show>
-    <div>
-      Lorem ipsum dolor sit amet consectetur adipisicing elit.
-      Commodi ea atque soluta praesentium quidem dicta sapiente accusamus nihil.
-    </div>
-  </.modal>
-
-  <.modal id="modal-3" color="primary" rounded="large" title="Custom Modal">
-    <p>Customize the modal appearance by changing attributes like `color` and `rounded`.</p>
-  </.modal>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :padding, :string, default: "medium", doc: "Determines padding for items"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :title_class, :string,
-    default: "text-base md:text-lg xl:text-2xl",
-    doc: "Custom CSS class for additional styling to title"
-
-  attr :icon_class, :string,
-    default: "size-5",
-    doc: "Custom CSS class for additional styling to icons close button"
-
-  attr :content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to content"
-
-  attr :close_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to content"
-
-  attr :focus_wrap_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to focus wrapper"
-
-  attr :inner_wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to inner wrap"
-
-  attr :wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to wrapper"
-
-  attr :overlay_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to overlay"
-
-  attr :show, :boolean, default: false, doc: "Show element"
-  attr :on_cancel, JS, default: %JS{}, doc: "Custom JS module for on_cancel action"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def modal(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      phx-mounted={@show && show_modal(@id)}
-      phx-remove={hide_modal(@id)}
-      data-cancel={JS.exec(@on_cancel, "phx-remove")}
-      class={["relative z-50 hidden", @class]}
-    >
-      <div
-        id={"#{@id}-bg"}
-        class={["bg-zinc-50/90 dark:bg-zinc-600/90 fixed inset-0 transition-opacity", @overlay_class]}
-        aria-hidden="true"
-      />
-      <div
-        class={["fixed inset-0 overflow-y-auto", @wrapper_class]}
-        aria-labelledby={@title && "#{@id}-title"}
-        aria-describedby={"#{@id}-description"}
-        role="dialog"
-        aria-modal="true"
-        tabindex="0"
-      >
-        <div class={["flex min-h-full items-center justify-center", @inner_wrapper_class]}>
-          <div class="w-full">
-            <.focus_wrap
-              id={"#{@id}-container"}
-              phx-window-keydown={JS.exec("data-cancel", to: "##{@id}")}
-              phx-key="escape"
-              phx-click-away={JS.exec("data-cancel", to: "##{@id}")}
-              class={[
-                "relative hidden transition",
-                color_variant(@variant, @color),
-                border_size(@border, @variant),
-                rounded_size(@rounded),
-                padding_size(@padding),
-                size_class(@size),
-                @focus_wrap_class
-              ]}
-            >
-              <div class="flex items-center justify-between mb-4">
-                <div :if={@title} id={"#{@id}-title"} class={["font-semibold", @title_class]}>
-                  {@title}
-                </div>
-                <button
-                  phx-click={JS.exec("data-cancel", to: "##{@id}")}
-                  type="button"
-                  class={["p-2 hover:opacity-60", @close_class]}
-                  aria-label={gettext("close")}
-                >
-                  <.icon name="hero-x-mark-solid" class={@icon_class} />
-                </button>
-              </div>
-
-              <div id={"#{@id}-description"} class={@content_class}>
-                {render_slot(@inner_block)}
-              </div>
-            </.focus_wrap>
-          </div>
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp border_size(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "gradient"
-            ],
-       do: nil
-
-  defp border_size("none", _), do: nil
-  defp border_size("extra_small", _), do: "border"
-  defp border_size("small", _), do: "border-2"
-  defp border_size("medium", _), do: "border-[3px]"
-  defp border_size("large", _), do: "border-4"
-  defp border_size("extra_large", _), do: "border-[5px]"
-  defp border_size(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-2"
-
-  defp padding_size("small"), do: "p-3"
-
-  defp padding_size("medium"), do: "p-4"
-
-  defp padding_size("large"), do: "p-5"
-
-  defp padding_size("extra_large"), do: "p-6"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "mx-auto max-w-xs"
-
-  defp size_class("small"), do: "mx-auto max-w-sm"
-
-  defp size_class("medium"), do: "mx-auto max-w-md"
-
-  defp size_class("large"), do: "mx-auto max-w-lg"
-
-  defp size_class("extra_large"), do: "mx-auto max-w-xl"
-
-  defp size_class("double_large"), do: "mx-auto max-w-2xl"
-
-  defp size_class("triple_large"), do: "mx-auto max-w-3xl"
-
-  defp size_class("quadruple_large"), do: "mx-auto max-w-4xl"
-
-  defp size_class("screen"), do: "w-full h-screen overflow-y-scroll"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  ## JS Commands
-
-  def show_modal(js \\ %JS{}, id) when is_binary(id) do
-    js
-    |> JS.show(to: "##{id}")
-    |> JS.show(
-      to: "##{id}-bg",
-      time: 300,
-      transition: {"transition-all transform ease-out duration-300", "opacity-0", "opacity-100"}
-    )
-    |> transition_show("##{id}-container")
-    |> JS.add_class("overflow-hidden", to: "body")
-    |> JS.focus_first(to: "##{id}-content")
-  end
-
-  def hide_modal(js \\ %JS{}, id) do
-    js
-    |> JS.hide(
-      to: "##{id}-bg",
-      transition: {"transition-all transform ease-in duration-200", "opacity-100", "opacity-0"}
-    )
-    |> transition_hide("##{id}-container")
-    |> JS.hide(to: "##{id}", transition: {"block", "block", "hidden"})
-    |> JS.remove_class("overflow-hidden", to: "body")
-    |> JS.pop_focus()
-  end
-
-  defp transition_show(js, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  defp transition_hide(js, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-
-  ## We do not use these functions, just for Phoenix CoreComponent backward compatibility
-
-  def show(js \\ %JS{}, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  def hide(js \\ %JS{}, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-end
diff --git a/lib/geo_web/components/native_select.ex b/lib/geo_web/components/native_select.ex
deleted file mode 100644
index ff27fee..0000000
--- a/lib/geo_web/components/native_select.ex
+++ /dev/null
@@ -1,711 +0,0 @@
-defmodule GeoWeb.Components.NativeSelect do
-  @moduledoc """
-  The `GeoWeb.Components.NativeSelect` module provides a customizable native select component
-  for forms in Phoenix LiveView. It supports a variety of styles, colors, and sizes, making
-  it adaptable to different design requirements. The module allows for flexible configuration
-  of the select element, including options for multi-selection, custom labels, and error handling.
-
-  This component is highly versatile, with extensive theming options such as border styles,
-  color variants, and rounded corners. It also provides a convenient way to render select
-  options through slots, enabling dynamic rendering of form elements based on the passed data.
-
-  With built-in error handling and custom error messages, `GeoWeb.Components.NativeSelect`
-  enhances the user experience by providing clear feedback and interaction states,
-  ensuring a polished and user-friendly interface for form-based applications.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `native_select` input component with options for single or multiple selections.
-  Supports validation and various styling options.
-
-  ## Examples
-
-  ```elixir
-  <.native_select name="name" description="This is description" label="This is outline label">
-    <:option value="usa">USA</:option>
-    <:option value="uae" selected>UAE</:option>
-  </.native_select>
-
-  <.native_select
-    name="name"
-    space="small"
-    color="danger"
-    variant="default"
-    multiple
-    min_height="min-h-36"
-    size="extra_small"
-    description="This is multiple option group"
-    label="This is outline label"
-  >
-    <.select_option_group label="group 1">
-      <:option value="usa">USA</:option>
-      <:option value="uae" selected>UAE</:option>
-    </.select_option_group>
-
-    <.select_option_group label="group 2">
-      <:option value="usa">USA</:option>
-      <:option value="uae">UAE</:option>
-      <:option value="br" selected>Great Britain</:option>
-    </.select_option_group>
-  </.native_select>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :min_height, :string, default: nil, doc: "Determines min height style"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :select_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  attr :multiple, :boolean,
-    default: false,
-    doc: "Specifies if the select input allows multiple selections"
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :option, required: false do
-    attr :value, :string, doc: "Value of each select option"
-    attr :selected, :boolean, required: false, doc: "Specifies this option is seleted"
-    attr :disabled, :string, required: false, doc: "Specifies this option is disabled"
-  end
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form readonly multiple required title autofocus tabindex),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec native_select(map()) :: Phoenix.LiveView.Rendered.t()
-  def native_select(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn ->
-      if assigns.rest[:multiple], do: field.name <> "[]", else: field.name
-    end)
-    |> assign_new(:value, fn -> field.value end)
-    |> native_select()
-  end
-
-  def native_select(assigns) do
-    ~H"""
-    <div class={[
-      @variant != "native" && color_variant(@variant, @color),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.select-field]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["select-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <select
-        name={@name}
-        id={@id}
-        multiple={@multiple}
-        class={[
-          "select-field appearance-none block w-full text-[16px] sm:font-inherit",
-          @multiple && "select-multiple-option",
-          @errors != [] && "select-field-error",
-          @min_height,
-          @select_class
-        ]}
-        {@rest}
-      >
-        <option
-          :for={{option, index} <- Enum.with_index(@option, 1)}
-          id={"#{@id}-option-#{index}"}
-          value={option[:value]}
-          selected={option[:selected]}
-          disabled={option[:disabled]}
-        >
-          {render_slot(option)}
-        </option>
-      </select>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a group (`select_option_group`) of selectable options within a native select input.
-  The group can have a label and multiple options, with support for selected and disabled states.
-
-  ## Examples
-
-  ```elixir
-  <.select_option_group label="group 2">
-    <:option value="usa">USA</:option>
-    <:option value="uae">UAE</:option>
-    <:option value="br" selected>Great Britain</:option>
-  </.select_option_group>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  slot :option, required: false, doc: "Option slot for select" do
-    attr :value, :string, doc: "Value of each select option"
-    attr :selected, :boolean, required: false, doc: "Specifies this option is seleted"
-    attr :disabled, :string, required: false, doc: "Specifies this option is disabled"
-  end
-
-  def select_option_group(assigns) do
-    ~H"""
-    <optgroup label={@label} class={@class}>
-      <option
-        :for={{option, index} <- Enum.with_index(@option, 1)}
-        id={"#{@id}-option-#{index}"}
-        value={option[:value]}
-        selected={option[:selected]}
-        disabled={option[:disabled]}
-      >
-        {render_slot(option)}
-      </option>
-    </optgroup>
-    <hr />
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp size_class("extra_small") do
-    [
-      "text-xs [&_.select-field]:text-xs [&_.select-field:not(.select-multiple-option)]:h-8"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "text-sm [&_.select-field]:text-sm [&_.select-field:not(.select-multiple-option)]:h-9"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "text-base [&_.select-field]:text-base [&_.select-field:not(.select-multiple-option)]:h-10"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "text-lg [&_.select-field]:text-lg [&_.select-field:not(.select-multiple-option)]:h-11"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "text-xl [&_.select-field]:text-xl [&_.select-field:not(.select-multiple-option)]:h-12"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.select-field]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.select-field]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.select-field]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.select-field]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.select-field]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.select-field]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "native"
-            ],
-       do: nil
-
-  defp border_class("none", _), do: "[&_.select-field]:border-0"
-  defp border_class("extra_small", _), do: "[&_.select-field]:border"
-  defp border_class("small", _), do: "[&_.select-field]:border-2"
-  defp border_class("medium", _), do: "[&_.select-field]:border-[3px]"
-  defp border_class("large", _), do: "[&_.select-field]:border-4"
-  defp border_class("extra_large", _), do: "[&_.select-field]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.select-field:not(:has(.select-field-error))]:border-[#e4e4e7] [&_.select-field]:shadow-sm",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-white",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#18181B]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#27272a]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#F8F9FA] dark:focus-within:[&_.select-field]:ring-[#242424]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&_..select-field]:bg-white text-[#3E3E3E]",
-      "[&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#DADADA]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#DDDDDD]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#4B4B4B] dark:focus-within:[&_.select-field]:ring-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#007F8C]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#01B8CA]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#007F8C] dark:focus-within:[&_.select-field]:ring-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#266EF1]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#6DAAFB]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#266EF1] dark:focus-within:[&_.select-field]:ring-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#0E8345]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#06C167]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#0E8345] dark:focus-within:[&_.select-field]:ring-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#FDC034]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#CA8D01] dark:focus-within:[&_.select-field]:ring-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#DE1135]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#FC7F79]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#DE1135] dark:focus-within:[&_.select-field]:ring-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#3EB7ED]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#0B84BA] dark:focus-within:[&_.select-field]:ring-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#8750C5]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#BA83F9]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#8750C5] dark:focus-within:[&_.select-field]:ring-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#A86438]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#DB976B]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#A86438] dark:focus-within:[&_.select-field]:ring-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#868686]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#A6A6A6]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#868686] dark:focus-within:[&_.select-field]:ring-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&_.select-field]:bg-[#282828] text-[#282828] [&_.select-field]:text-white",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "focus-within:[&_.select-field]:ring-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "[&_.select-field]:bg-white [&_.select-field]:border-transparent text-[#3E3E3E]",
-      "[&_.select-field>input]:placeholder:text-[#3E3E3E]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.select-field:not(:has(.select-field-error))]:border-[#282828]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#868686]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#4B4B4B] dark:focus-within:[&_.select-field]:ring-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.select-field:not(:has(.select-field-error))]:border-[#016974]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#77D5E3]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#007F8C] dark:focus-within:[&_.select-field]:ring-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.select-field:not(:has(.select-field-error))]:border-[#175BCC]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#002661]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#A9C9FF]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#266EF1] dark:focus-within:[&_.select-field]:ring-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.select-field:not(:has(.select-field-error))]:border-[#166C3B]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#002F14]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#7FD99A]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#0E8345] dark:focus-within:[&_.select-field]:ring-[#06C167]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.select-field:not(:has(.select-field-error))]:border-[#976A01]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#322300]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#FDD067]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#CA8D01] dark:focus-within:[&_.select-field]:ring-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.select-field:not(:has(.select-field-error))]:border-[#BB032A]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#520810]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#FFB2AB]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#DE1135] dark:focus-within:[&_.select-field]:ring-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.select-field:not(:has(.select-field-error))]:border-[#0B84BA]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#03212F]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#6EC9F2]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#0B84BA] dark:focus-within:[&_.select-field]:ring-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.select-field:not(:has(.select-field-error))]:border-[#653C94]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#221431]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#CBA2FA]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#8750C5] dark:focus-within:[&_.select-field]:ring-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.select-field:not(:has(.select-field-error))]:border-[#7E4B2A]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#2A190E]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#E4B190]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#A86438] dark:focus-within:[&_.select-field]:ring-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.select-field:not(:has(.select-field-error))]:border-[#727272]",
-      "[&_.select-field:not(:has(.select-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:border-[#BBBBBB]",
-      "[&_.select-field.select-field-error]:bg-rose-700 [&_.select-field.select-field-error]:border-rose-700",
-      "focus-within:[&_.select-field]:ring-[#868686] dark:focus-within:[&_.select-field]:ring-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "[&_.select-field]:bg-[#282828] text-[#282828] [&_.select-field]:border-[#727272] text-white",
-      "focus-within:[&_.select-field]:ring-[#050404]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#DDDDDD]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#4B4B4B] dark:focus-within:[&_.select-field]:ring-[#DDDDDD]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#007F8C]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#01B8CA]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#007F8C] dark:focus-within:[&_.select-field]:ring-[#01B8CA]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#266EF1]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#6DAAFB]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#266EF1] dark:focus-within:[&_.select-field]:ring-[#6DAAFB]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#0E8345]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#06C167]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#0E8345] dark:focus-within:[&_.select-field]:ring-[#06C167]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#FDC034]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#CA8D01] dark:focus-within:[&_.select-field]:ring-[#FDC034]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#DE1135]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#FC7F79]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#DE1135] dark:focus-within:[&_.select-field]:ring-[#FC7F79]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#3EB7ED]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#0B84BA] dark:focus-within:[&_.select-field]:ring-[#3EB7ED]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#8750C5]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#BA83F9]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#8750C5] dark:focus-within:[&_.select-field]:ring-[#BA83F9]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#A86438]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#DB976B]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#A86438] dark:focus-within:[&_.select-field]:ring-[#DB976B]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "text-black dark:text-white [&_.select-field:not(:has(.select-field-error))]:bg-[#868686]",
-      "dark:[&_.select-field:not(:has(.select-field-error))]:bg-[#A6A6A6]",
-      "[&_.select-field.select-field-error]:bg-rose-700",
-      "[&_.select-field]:text-white dark:[&_.select-field]:text-black",
-      "focus-within:[&_.select-field]:ring-[#868686] dark:focus-within:[&_.select-field]:ring-[#A6A6A6]",
-      "[&_.select-field]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.select-field]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.select-field]:shadow-none"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/navbar.ex b/lib/geo_web/components/navbar.ex
deleted file mode 100644
index a8d24f2..0000000
--- a/lib/geo_web/components/navbar.ex
+++ /dev/null
@@ -1,631 +0,0 @@
-defmodule GeoWeb.Components.Navbar do
-  @moduledoc """
-  The `GeoWeb.Components.Navbar` module provides a flexible and customizable navigation
-  bar component for Phoenix LiveView applications. It allows for a variety of styles,
-  colors, and configurations to fit different design needs, including border styles,
-  content alignment, and text positioning.
-
-  This component supports nested elements through slots, enabling complex navigation structures.
-
-  It also offers extensive theming options, such as rounded corners, shadow effects,
-  and maximum width settings.
-
-  With built-in support for icons and images, the `Navbar` module makes it easy to create
-  visually appealing and interactive navigation bars that enhance the user experience.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  Renders a customizable navigation bar (`navbar` component) that can include links,
-  dropdowns, and other components.
-
-  The navigation bar is designed to handle various styles, colors, and layouts.
-
-  ## Examples
-
-  ```elixir
-  <.navbar id="nav-11" color="success" variant="shadow">
-    <:list><.link navigate="/">Home</.link></:list>
-    <:list><.link navigate="/examples/sidebar">List</.link></:list>
-
-    <:list>
-      <.dropdown relative="md:relative" width="w-full" clickable>
-        <:trigger width="full" trigger_id="test-31">
-          <button class="text-start w-full block">Dropdown</button>
-        </:trigger>
-
-        <:content space="small" id="test-31" rounded="large" width="large" padding="extra_small">
-          <ul class="space-y-5">
-            <li>
-              <.dropdown width="w-full" position="right" clickable>
-                <:trigger trigger_id="test-19">
-                  <button class={[
-                    "py-1 px-2 text-start w-full flex items-center justify-between hover:bg-gray-200"
-                  ]}
-                  >
-                    Nested Dropdown <.icon name="hero-chevron-right" />
-                  </button>
-                </:trigger>
-
-                <:content id="test-19" rounded="large" width="large" padding="extra_small">
-                  <ul class="space-y-5">
-                    <li>
-                      <.link class="py-1 px-2 block hover:bg-gray-200" navigate="/examples/list">
-                        Security
-                      </.link>
-                    </li>
-
-                    <li>
-                      <.link class="py-1 px-2 block hover:bg-gray-200" navigate="/examples/dropdown">
-                        Memory
-                      </.link>
-                    </li>
-
-                    <li>
-                      <.link class="py-1 px-2 block hover:bg-gray-200" navigate="/examples/image">
-                        Design
-                      </.link>
-                    </li>
-                  </ul>
-                </:content>
-              </.dropdown>
-            </li>
-
-            <li>
-              <.link class="py-1 px-2 block hover:bg-gray-200" navigate="/examples/dropdown">
-                Memory
-              </.link>
-            </li>
-
-            <li>
-              <.link class="py-1 px-2 block hover:bg-gray-200" navigate="/examples/image">
-                Design
-              </.link>
-            </li>
-          </ul>
-        </:content>
-      </.dropdown>
-    </:list>
-
-    <:list><.link navigate="/examples/rating">Blog</.link></:list>
-    <:list><.link navigate="/examples/sidebar">Calendar</.link></:list>
-    <:list><.link navigate="/examples/rating">Booking</.link></:list>
-    <:list><.link navigate="/examples/sidebar">Partners</.link></:list>
-    <:list><.link navigate="/examples/rating">About</.link></:list>
-  </.navbar>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :text_position, :string, default: "", doc: "Determines the element' text position"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :max_width, :string, default: "", doc: "Determines the style of element max width"
-
-  attr :content_position, :string,
-    default: "between",
-    doc: "Determines the alignment of the element's content"
-
-  attr :image, :string, default: nil, doc: "Image displayed alongside of an item"
-  attr :image_class, :string, default: nil, doc: "Determines custom class for the image"
-  attr :name, :string, default: nil, doc: "Specifies the name of the element"
-  attr :relative, :boolean, default: false, doc: ""
-  attr :link, :string, default: nil, doc: ""
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :nav_wrapper_class, :string, default: nil, doc: "Custom CSS class for nav wrapper"
-  attr :link_class, :string, default: nil, doc: "Custom CSS class for link"
-  attr :list_wrapper_class, :string, default: nil, doc: "Custom CSS class for list main wrapper"
-  attr :list_class, :string, default: nil, doc: "Custom CSS class for list ul"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :start_content, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :end_content, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  slot :list, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :padding, :string, doc: "Determines padding for items"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :icon_position, :string, doc: "Determines icon position"
-  end
-
-  def navbar(assigns) do
-    ~H"""
-    <nav
-      id={@id}
-      role="navigation"
-      class={[
-        "relative",
-        "[&.show-nav-menu_.nav-menu]:block [&.show-nav-menu_.nav-menu]:opacity-100",
-        border_class(@border, @variant),
-        content_position(@content_position),
-        color_variant(@variant, @color),
-        rounded_size(@rounded),
-        padding_size(@padding),
-        text_position(@text_position),
-        maximum_width(@max_width),
-        space_class(@space),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={["nav-wrapper md:flex items-center gap-2 md:gap-5", @nav_wrapper_class]}>
-        <div :if={@start_content != [] and !is_nil(@start_content)} class={@start_content[:class]}>
-          {render_slot(@start_content)}
-        </div>
-        <.link
-          :if={!is_nil(@link)}
-          navigate={@link}
-          class={["flex items-center space-x-3 rtl:space-x-reverse mb-5 md:mb-0", @link_class]}
-        >
-          <img :if={!is_nil(@image)} src={@image} class={@image_class} alt={gettext("Logo")} />
-          <h1 :if={!is_nil(@name)} class="text-xl font-semibold">
-            {@name}
-          </h1>
-        </.link>
-
-        <div :if={!is_nil(@list) && length(@list) > 0} class={["w-auto", @list_wrapper_class]}>
-          <ul
-            role="menubar"
-            class={["flex flex-wrap md:flex-nowrap gap-4", @relative && "relative", @list_class]}
-          >
-            <li
-              :for={list <- @list}
-              role="none"
-              class={[
-                "inline-flex items-center",
-                list[:icon_position] == "end" && "flex-row-reverse",
-                list[:class]
-              ]}
-            >
-              <.icon :if={list[:icon]} name={list[:icon]} class={["list-icon", list[:icon_class]]} />
-              {render_slot(list)}
-            </li>
-          </ul>
-        </div>
-        {render_slot(@inner_block)}
-        <div :if={@end_content != [] and !is_nil(@end_content)} class={@end_content[:class]}>
-          {render_slot(@end_content)}
-        </div>
-      </div>
-    </nav>
-    """
-  end
-
-  @doc """
-  Renders a header with title.
-  """
-  @doc type: :component
-  attr :class, :string, default: nil
-
-  slot :inner_block, required: true
-  slot :subtitle
-  slot :actions
-
-  def header(assigns) do
-    ~H"""
-    <header class={[@actions != [] && "flex items-center justify-between gap-6", @class]}>
-      <div>
-        <h1 class="text-lg font-semibold leading-8 text-zinc-800">
-          {render_slot(@inner_block)}
-        </h1>
-        <p :if={@subtitle != []} class="mt-2 text-sm leading-6 text-zinc-600">
-          {render_slot(@subtitle)}
-        </p>
-      </div>
-      <div class="flex-none">{render_slot(@actions)}</div>
-    </header>
-    """
-  end
-
-  defp content_position("start") do
-    "[&_.nav-wrapper]:justify-start"
-  end
-
-  defp content_position("end") do
-    "[&_.nav-wrapper]:justify-end"
-  end
-
-  defp content_position("center") do
-    "[&_.nav-wrapper]:justify-center"
-  end
-
-  defp content_position("between") do
-    "[&_.nav-wrapper]:justify-between"
-  end
-
-  defp content_position("around") do
-    "[&_.nav-wrapper]:justify-around"
-  end
-
-  defp content_position(params) when is_binary(params), do: params
-
-  defp text_position("left"), do: "text-left"
-  defp text_position("right"), do: "text-right"
-  defp text_position("center"), do: "text-center"
-  defp text_position(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp maximum_width("extra_small"), do: "[&_.nav-wrapper]:max-w-3xl	[&_.nav-wrapper]:mx-auto"
-  defp maximum_width("small"), do: "[&_.nav-wrapper]:max-w-4xl [&_.nav-wrapper]:mx-auto"
-  defp maximum_width("medium"), do: "[&_.nav-wrapper]:max-w-5xl [&_.nav-wrapper]:mx-auto"
-  defp maximum_width("large"), do: "[&_.nav-wrapper]:max-w-6xl [&_.nav-wrapper]:mx-auto"
-  defp maximum_width("extra_large"), do: "[&_.nav-wrapper]:max-w-7xl [&_.nav-wrapper]:mx-auto"
-  defp maximum_width(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: "border-b-0"
-  defp border_class("extra_small", _), do: "border-b"
-  defp border_class("small", _), do: "border-b-2"
-  defp border_class("medium", _), do: "border-b-[3px]"
-  defp border_class("large", _), do: "border-b-4"
-  defp border_class("extra_large", _), do: "border-b-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-b-sm"
-
-  defp rounded_size("small"), do: "rounded-b"
-
-  defp rounded_size("medium"), do: "rounded-b-md"
-
-  defp rounded_size("large"), do: "rounded-b-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-b-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/number_field.ex b/lib/geo_web/components/number_field.ex
deleted file mode 100644
index a2a54b3..0000000
--- a/lib/geo_web/components/number_field.ex
+++ /dev/null
@@ -1,1062 +0,0 @@
-defmodule GeoWeb.Components.NumberField do
-  @moduledoc """
-  The `GeoWeb.Components.NumberField` module provides a versatile and customizable
-  number input component for Phoenix LiveView applications. This component offers
-  extensive options for theming, styling, and layout configurations, including border styles,
-  color variants, rounded corners, and size settings.
-
-  With support for custom slots and icon placements, it allows for enhanced user
-  interactions and detailed input structures. The module also includes advanced features
-  like floating labels, control visibility options, and error handling, making it an ideal
-  solution for creating dynamic and user-friendly forms in web applications.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `number_input` field with various options such as labels, descriptions,
-  and error messages.
-  It supports different sizes, colors, and styles, and can include additional sections and icons.
-
-  ## Examples
-
-  ```elixir
-  <.number_field
-    name="name"
-    value=""
-    space="small"
-    color="danger"
-    controls="hide"
-    description="This is description"
-    label="This is outline label Number"
-    placeholder="This is Number placeholder"
-    floating="outer"
-  />
-
-  <.number_field
-    name="name"
-    value="The value of input"
-    space="small"
-    label="This is label Number"
-    placeholder="This is Number placeholder"
-    errors={["Enter name"]}
-  >
-    <:end_section>
-      <button><.icon name="hero-clipboard-document" class="size-6" /></button>
-    </:end_section>
-  </.number_field>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :controls, :string, default: "default", doc: "fixed, hide, default"
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form list min max pattern placeholder
-        readonly required size inputmode inputmode step title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec number_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def number_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> number_field()
-  end
-
-  def number_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.number-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "number-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "number-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="number"
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @controls == "fixed" &&
-                "[&::-webkit-outer-spin-button]:opacity-100 [&::-webkit-inner-spin-button]:opacity-100",
-              @controls == "hide" &&
-                "[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def number_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.number-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["number-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "number-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "number-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="number"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @controls == "fixed" &&
-              "[&::-webkit-outer-spin-button]:opacity-100 [&::-webkit-inner-spin-button]:opacity-100",
-            @controls == "hide" &&
-              "[appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small"),
-    do:
-      "[&_.number-field-wrapper_input]:h-8 [&_.number-field-wrapper_.password-field-icon]:size-3"
-
-  defp size_class("small"),
-    do:
-      "[&_.number-field-wrapper_input]:h-9 [&_.number-field-wrapper_.password-field-icon]:size-3.5"
-
-  defp size_class("medium"),
-    do:
-      "[&_.number-field-wrapper_input]:h-10 [&_.number-field-wrapper_.password-field-icon]:size-4"
-
-  defp size_class("large"),
-    do:
-      "[&_.number-field-wrapper_input]:h-11 [&_.number-field-wrapper_.password-field-icon]:size-5"
-
-  defp size_class("extra_large"),
-    do:
-      "[&_.number-field-wrapper_input]:h-12 [&_.number-field-wrapper_.password-field-icon]:size-6"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.number-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.number-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.number-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.number-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.number-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.number-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.number-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.number-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.number-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.number-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.number-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.number-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.number-field-wrapper:not(:has(.number-field-error))]:bg-white",
-      "dark:[&_.number-field-wrapper:not(:has(.number-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.number-field-wrapper:not(:has(.number-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.number-field-wrapper:not(:has(.number-field-error))]:border-[#27272a]",
-      "[&_.number-field-wrapper.number-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.number-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.number-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.number-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.number-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#DDDDDD]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.number-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#007F8C]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#01B8CA]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.number-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#266EF1]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#6DAAFB]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.number-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#0E8345]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#06C167]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.number-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#CA8D01]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#FDC034]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.number-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#CA8D01]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#FC7F79]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.number-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#0B84BA]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#3EB7ED]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.number-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#8750C5]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#BA83F9]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.number-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#A86438]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#DB976B]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.number-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#868686]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#A6A6A6]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.number-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-white dark:[&_.number-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.number-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.number-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.number-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#DDDDDD]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.number-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.number-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#007F8C]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#01B8CA]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.number-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.number-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#266EF1]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#6DAAFB]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.number-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.number-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#0E8345]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#06C167]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.number-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.number-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FDC034]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.number-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.number-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#DE1135]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FC7F79]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.number-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.number-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#3EB7ED]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.number-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.number-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#8750C5]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#BA83F9]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.number-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.number-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#A86438]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#DB976B]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.number-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.number-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#868686]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#A6A6A6]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#868686] dark:focus-within:[&_.number-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.number-field-wrapper]:bg-[#1E1E1E] text-[#1E1E1E] [&_.number-field-wrapper]:text-white",
-      "[&_.number-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white focus-within:[&_.number-field-wrapper]:ring-[#050404]",
-      floating == "outer" && "[&_.number-field-wrapper_.floating-label]:bg-[#1E1E1E]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.number-field-wrapper]:bg-white [&_.number-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.number-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#282828]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#868686]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.number-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#016974]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#77D5E3]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.number-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#175BCC]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#002661]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#A9C9FF]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.number-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#166C3B]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#002F14]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#7FD99A]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.number-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#976A01]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#322300]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#FDD067]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.number-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#BB032A]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#520810]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#FFB2AB]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.number-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#0B84BA]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#03212F]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#6EC9F2]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.number-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#653C94]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#221431]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#CBA2FA]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.number-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#7E4B2A]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#2A190E]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#E4B190]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.number-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#727272]",
-      "[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:border-[#BBBBBB]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.number-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.number-field-wrapper]:ring-black dark:focus-within:[&_.number-field-wrapper]:ring-white",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.number-field-wrapper]:bg-[#1E1E1E] text-[#1E1E1E] [&_.number-field-wrapper]:border-transparent text-white",
-      "[&_.number-field-wrapper>input]:placeholder:text-white",
-      floating == "outer" && "[&_.number-field-wrapper_.floating-label]:bg-[#1E1E1E]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#DDDDDD]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.number-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.number-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#007F8C]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#01B8CA]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.number-field-wrapper]:ring-[#01B8CA]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.number-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#266EF1]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#6DAAFB]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.number-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.number-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#0E8345]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#06C167]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.number-field-wrapper]:ring-[#06C167]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.number-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FDC034]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.number-field-wrapper]:ring-[#FDC034]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.number-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#DE1135]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#FC7F79]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.number-field-wrapper]:ring-[#FC7F79]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.number-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#3EB7ED]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.number-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.number-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#8750C5]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#BA83F9]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.number-field-wrapper]:ring-[#BA83F9]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.number-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#A86438]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#DB976B]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.number-field-wrapper]:ring-[#DB976B]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.number-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#868686]",
-      "dark:[&_.number-field-wrapper:not(:has(.text-field-error))]:bg-[#A6A6A6]",
-      "[&_.number-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.number-field-wrapper>input]:placeholder:text-white dark:[&_.number-field-wrapper>input]:placeholder:text-black",
-      "[&_.number-field-wrapper>input]:text-white dark:[&_.number-field-wrapper>input]:text-black",
-      "focus-within:[&_.number-field-wrapper]:ring-[#868686] dark:focus-within:[&_.number-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.number-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.number-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.number-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.number-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.number-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.number-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.number-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.number-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/overlay.ex b/lib/geo_web/components/overlay.ex
deleted file mode 100644
index 30c00e3..0000000
--- a/lib/geo_web/components/overlay.ex
+++ /dev/null
@@ -1,195 +0,0 @@
-defmodule GeoWeb.Components.Overlay do
-  @moduledoc """
-  The `GeoWeb.Components.Overlay` module provides a versatile overlay component for
-  Phoenix LiveView applications, allowing developers to create layered content effects.
-  It supports various customization options, including color themes, opacity levels,
-  and backdrop effects, which enable the creation of visually engaging overlays.
-
-  This component is designed to be highly adaptable, offering predefined color themes,
-  opacity variations, and backdrop sizes to match the needs of different interface designs.
-  The `GeoWeb.Components.Overlay` is perfect for creating modal backgrounds, loading screens,
-  and other interactive elements that require content layering.
-  """
-
-  use Phoenix.Component
-
-  @doc """
-  Renders an `overlay` element with customizable color, opacity, and backdrop options.
-
-  The overlay can be used to create various visual effects such as loading screens or background dimming.
-
-  ## Examples
-
-  ```elixir
-  <.overlay color="misc" opacity="semi_opaque" />
-
-  <.overlay color="dawn" opacity="semi_opaque">
-    <div class="flex justify-center items-center gap-2 h-full">
-      <.spinner color="natural" size="large" />
-      <div class="text-white">Loading...</div>
-    </div>
-  </.overlay>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :opacity, :string, default: "", doc: ""
-  attr :backdrop, :string, default: "", doc: ""
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :z_index, :string,
-    default: "z-50",
-    doc:
-      "Utility class for controlling the z-index stacking order of the overlay (e.g., 'z-10', 'z-50')."
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  @spec overlay(map()) :: Phoenix.LiveView.Rendered.t()
-  def overlay(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      aria-hidden="true"
-      role="presentation"
-      tabindex="-1"
-      class={[
-        "overlay absolute inset-0",
-        color_class(@color),
-        opacity_class(@opacity),
-        backdrop_class(@backdrop),
-        @z_index,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp color_class("base") do
-    ["bg-white dark:bg-[#18181B]"]
-  end
-
-  defp color_class("white") do
-    ["bg-white text-black"]
-  end
-
-  defp color_class("dark") do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_class("natural") do
-    ["bg-[#4B4B4B] dark:bg-[#DDDDDD]"]
-  end
-
-  defp color_class("primary") do
-    ["bg-[#007F8C] dark:bg-[#01B8CA]"]
-  end
-
-  defp color_class("secondary") do
-    ["bg-[#266EF1] dark:bg-[#6DAAFB]"]
-  end
-
-  defp color_class("success") do
-    ["bg-[#0E8345] dark:bg-[#06C167]"]
-  end
-
-  defp color_class("warning") do
-    ["bg-[#CA8D01] dark:bg-[#FDC034]"]
-  end
-
-  defp color_class("danger") do
-    ["bg-[#DE1135] dark:bg-[#FC7F79]"]
-  end
-
-  defp color_class("info") do
-    ["bg-[#0B84BA] dark:bg-[#3EB7ED]"]
-  end
-
-  defp color_class("misc") do
-    ["bg-[#8750C5] dark:bg-[#BA83F9]"]
-  end
-
-  defp color_class("dawn") do
-    ["bg-[#A86438] dark:bg-[#DB976B]"]
-  end
-
-  defp color_class("silver") do
-    ["bg-[#868686] dark:bg-[#A6A6A6]"]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp opacity_class("transparent") do
-    "bg-opacity-10"
-  end
-
-  defp opacity_class("translucent") do
-    "bg-opacity-20"
-  end
-
-  defp opacity_class("semi_transparent") do
-    "bg-opacity-30"
-  end
-
-  defp opacity_class("lightly_tinted") do
-    "bg-opacity-40"
-  end
-
-  defp opacity_class("tinted") do
-    "bg-opacity-50"
-  end
-
-  defp opacity_class("semi_opaque") do
-    "bg-opacity-60"
-  end
-
-  defp opacity_class("opaque") do
-    "bg-opacity-70"
-  end
-
-  defp opacity_class("heavily_tinted") do
-    "bg-opacity-80"
-  end
-
-  defp opacity_class("almost_solid") do
-    "bg-opacity-90"
-  end
-
-  defp opacity_class("solid") do
-    "bg-opacity-100"
-  end
-
-  defp opacity_class(params) when is_binary(params), do: params
-
-  defp backdrop_class("extra_small") do
-    "backdrop-backdrop-[1px]"
-  end
-
-  defp backdrop_class("small") do
-    "backdrop-backdrop-[2px]"
-  end
-
-  defp backdrop_class("medium") do
-    "backdrop-backdrop-[3px]"
-  end
-
-  defp backdrop_class("large") do
-    "backdrop-backdrop-[4px]"
-  end
-
-  defp backdrop_class("extra_large") do
-    "backdrop-backdrop-[5px]"
-  end
-
-  defp backdrop_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/pagination.ex b/lib/geo_web/components/pagination.ex
deleted file mode 100644
index e2c453d..0000000
--- a/lib/geo_web/components/pagination.ex
+++ /dev/null
@@ -1,1548 +0,0 @@
-defmodule GeoWeb.Components.Pagination do
-  @moduledoc """
-  The `GeoWeb.Components.Pagination` module provides a comprehensive and highly customizable
-  pagination component for Phoenix LiveView applications.
-
-  It is designed to handle complex pagination scenarios, supporting various styles,
-  sizes, colors, and interaction patterns.
-
-  This module offers several options to tailor the pagination component's appearance and behavior,
-  such as custom icons, separators, and control buttons.
-
-  It allows for fine-tuning of the pagination layout, including sibling and boundary
-  controls, as well as different visual variants like outlined, shadowed, and inverted styles.
-
-  These features enable developers to integrate pagination seamlessly into their UI,
-  enhancing user experience and interaction.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  Renders a `pagination` component that allows users to navigate through pages.
-
-  The component supports various configurations such as setting the total number of pages,
-  current active page, and the number of sibling and boundary pages to display.
-
-  Custom icons or labels can be used for navigation controls, and slots are available
-  for additional start and end items.
-
-  ## Examples
-
-  ```elixir
-  <.pagination
-    total={200}
-    active={@posts.active}
-    siblings={3}
-    show_edges
-    grouped
-    next_label="next"
-    previous_label="prev"
-    first_label="first"
-    last_label="last"
-  />
-
-  <.pagination total={@posts.total} active={@posts.active} siblings={3} variant="outline" show_edges grouped/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :total, :integer, required: true, doc: ""
-  attr :active, :integer, default: 1, doc: ""
-  attr :siblings, :integer, default: 1, doc: ""
-  attr :boundaries, :integer, default: 1, doc: ""
-  attr :on_select, JS, default: %JS{}, doc: "Custom JS module for on_select action"
-  attr :on_first, JS, default: %JS{}, doc: "Custom JS module for on_first action"
-  attr :on_last, JS, default: %JS{}, doc: "Custom JS module for on_last action"
-  attr :on_next, JS, default: %JS{}, doc: "Custom JS module for on_next action"
-  attr :on_previous, JS, default: %JS{}, doc: "Custom JS module for on_previous action"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "small", doc: "Space between items"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :border, :string, default: "extra_small", doc: "Determines the border radius"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-
-  attr :separator, :map,
-    default: %{type: :icon, value: "hero-ellipsis-horizontal"},
-    doc: "Separator between page groups"
-
-  attr :first_label, :map,
-    default: %{type: :icon, value: "hero-chevron-double-left"},
-    doc: "Label for the 'first' button"
-
-  attr :last_label, :map,
-    default: %{type: :icon, value: "hero-chevron-double-right"},
-    doc: "Label for the 'last' button"
-
-  attr :next_label, :map,
-    default: %{type: :icon, value: "hero-chevron-right"},
-    doc: "Label for the 'next' button"
-
-  attr :previous_label, :map,
-    default: %{type: :icon, value: "hero-chevron-left"},
-    doc: "Label for the 'previous' button"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :first_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to first button"
-
-  attr :next_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to next button"
-
-  attr :last_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to last button"
-
-  attr :prev_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to prveious button"
-
-  attr :pages_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to pages buttons"
-
-  attr :seperator_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to pages buttons"
-
-  attr :separator_icon_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to icon of seperator"
-
-  attr :separator_text_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to text of seperator"
-
-  attr :params, :map,
-    default: %{},
-    doc: "A map of additional parameters used for element configuration"
-
-  slot :start_items, required: false, doc: "Determines the start items which accept heex"
-  slot :end_items, required: false, doc: "Determines the end items which accept heex"
-
-  attr :rest, :global,
-    include: ~w(disabled hide_one_page show_edges hide_controls grouped),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def pagination(
-        %{siblings: siblings, boundaries: boundaries, total: total, active: active} = assigns
-      ) do
-    assigns = assign(assigns, %{siblings: build_pagination(total, active, siblings, boundaries)})
-
-    ~H"""
-    <nav
-      :if={show_pagination?(@rest[:hide_one_page], @total)}
-      id={@id}
-      class={[
-        default_classes(),
-        color_variant(@variant, @color),
-        border_size(@border, @variant),
-        rounded_size(@rounded),
-        size_class(@size),
-        border_class(@color),
-        (!is_nil(@rest[:grouped]) && "gap-0 grouped-pagination") || space_class(@space),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@start_items)}
-
-      <.item_button
-        :if={@rest[:show_edges]}
-        on_action={{"first", @on_next}}
-        page={{nil, @active}}
-        params={@params}
-        label={@first_label}
-        class={@first_label_class}
-        aria_label={gettext("First page")}
-        disabled={@active <= 1}
-      />
-
-      <.item_button
-        :if={is_nil(@rest[:hide_controls])}
-        on_action={{"previous", @on_previous}}
-        page={{nil, @active}}
-        params={@params}
-        label={@previous_label}
-        class={@prev_label_class}
-        aria_label={gettext("Previous page")}
-        disabled={@active <= 1}
-      />
-
-      <div :for={range <- @siblings.range}>
-        <%= if is_integer(range) do %>
-          <.item_button
-            on_action={{"select", @on_select}}
-            page={{range, @active}}
-            params={@params}
-            class={@pages_label_class}
-          />
-        <% else %>
-          <div
-            class={["pagination-seperator flex justify-center items-center", @seperator_class]}
-            aria-hidden="true"
-          >
-            <.icon
-              :if={Map.get(@separator, :type) == :icon}
-              name={@separator.value}
-              class={["pagination-icon", @separator_icon_class]}
-            />
-            <span
-              :if={Map.get(@separator, :type) != :icon}
-              class={["pagination-text", @separator_text_class]}
-            >
-              {@separator.value}
-            </span>
-          </div>
-        <% end %>
-      </div>
-
-      <.item_button
-        :if={is_nil(@rest[:hide_controls])}
-        on_action={{"next", @on_next}}
-        page={{nil, @active}}
-        params={@params}
-        label={@next_label}
-        class={@next_label_class}
-        aria_label={gettext("Next page")}
-        disabled={@active >= @total}
-      />
-
-      <.item_button
-        :if={@rest[:show_edges]}
-        on_action={{"last", @on_last}}
-        page={{nil, @active}}
-        params={@params}
-        label={@last_label}
-        class={@last_label_class}
-        aria_label={gettext("Last page")}
-        disabled={@active >= @total}
-      />
-
-      {render_slot(@end_items)}
-    </nav>
-    """
-  end
-
-  @doc type: :component
-  attr :params, :map,
-    default: %{},
-    doc: "A map of additional parameters used for element configuration"
-
-  attr :page, :list, required: true, doc: "Specifies pagination pages"
-  attr :on_action, JS, default: %JS{}, doc: "Custom JS module for on_action action"
-  attr :label, :string, required: false, doc: "Icon displayed alongside of an item"
-  attr :disabled, :boolean, required: false, doc: "Specifies whether the element is disabled"
-  attr :aria_label, :string, default: nil, doc: "Accessible label for screen readers"
-  attr :class, :string, default: nil, doc: "Custom class for addition styling"
-
-  defp item_button(%{on_action: {"select", _on_action}} = assigns) do
-    ~H"""
-    <button
-      aria-current={elem(@page, 1) == elem(@page, 0) && "page"}
-      aria-label={
-        if elem(@page, 1) == elem(@page, 0) do
-          gettext("Page %{page}, current page", page: elem(@page, 0))
-        else
-          gettext("Go to page %{page}", page: elem(@page, 0))
-        end
-      }
-      aria-disabled={elem(@page, 0) == elem(@page, 1)}
-      class={[
-        "pagination-button",
-        elem(@page, 1) == elem(@page, 0) && "active-pagination-button",
-        @class
-      ]}
-      phx-click={
-        elem(@on_action, 1)
-        |> JS.push("pagination", value: Map.merge(%{action: "select", page: elem(@page, 0)}, @params))
-      }
-      disabled={elem(@page, 0) == elem(@page, 1)}
-    >
-      {elem(@page, 0)}
-    </button>
-    """
-  end
-
-  defp item_button(assigns) do
-    ~H"""
-    <button
-      class={["pagination-control flex items-center justify-center", @class]}
-      aria-disabled={@disabled}
-      aria-label={@aria_label}
-      phx-click={
-        elem(@on_action, 1)
-        |> JS.push("pagination", value: Map.merge(%{action: elem(@on_action, 0)}, @params))
-      }
-      disabled={@disabled}
-    >
-      <.icon :if={Map.get(@label, :type) == :icon} name={@label.value} class="pagination-icon" />
-      <span :if={Map.get(@label, :type) != :icon} class="pagination-text">{@label.value}</span>
-    </button>
-    """
-  end
-
-  # We got the original code from mantine.dev pagination hook and changed some numbers
-  defp build_pagination(total, current_page, siblings, boundaries) do
-    total_pages = max(total, 0)
-
-    total_page_numbers = siblings * 2 + 3 + boundaries * 2
-
-    pagination_range =
-      if total_page_numbers >= total_pages do
-        range(1, total_pages)
-      else
-        left_sibling_index = max(current_page - siblings, boundaries + 1)
-        right_sibling_index = min(current_page + siblings, total_pages - boundaries)
-
-        should_show_left_dots = left_sibling_index > boundaries + 2
-        should_show_right_dots = right_sibling_index < total_pages - boundaries - 1
-
-        dots = :dots
-
-        cond do
-          !should_show_left_dots and should_show_right_dots ->
-            left_item_count = siblings * 2 + boundaries + 2
-
-            range(1, left_item_count) ++
-              [dots] ++ range(total_pages - boundaries + 1, total_pages)
-
-          should_show_left_dots and not should_show_right_dots ->
-            right_item_count = boundaries + 1 + 2 * siblings
-
-            range(1, boundaries) ++
-              [dots] ++ range(total_pages - right_item_count + 1, total_pages)
-
-          true ->
-            range(1, boundaries) ++
-              [dots] ++
-              range(left_sibling_index, right_sibling_index) ++
-              [dots] ++ range(total_pages - boundaries + 1, total_pages)
-        end
-      end
-
-    %{range: pagination_range(current_page, pagination_range), active: current_page}
-  end
-
-  defp pagination_range(active, range) do
-    if active != 1 and (active - 1) not in range do
-      index = Enum.find_index(range, &(&1 == active))
-      List.insert_at(range, index, active - 1)
-    else
-      range
-    end
-  end
-
-  defp range(start, stop) when start > stop, do: []
-  defp range(start, stop), do: Enum.to_list(start..stop)
-
-  defp space_class("extra_small"), do: "gap-2"
-  defp space_class("small"), do: "gap-3"
-  defp space_class("medium"), do: "gap-4"
-  defp space_class("large"), do: "gap-5"
-  defp space_class("extra_large"), do: "gap-6"
-  defp space_class("none"), do: nil
-  defp space_class(params) when is_binary(params), do: params
-
-  defp border_size(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "transparent",
-              "subtle",
-              "gradient"
-            ],
-       do: nil
-
-  defp border_size("none", _), do: "[&:not(.grouped-pagination)_.pagination-button]:border-0"
-
-  defp border_size("extra_small", _), do: "[&:not(.grouped-pagination)_.pagination-button]:border"
-
-  defp border_size("small", _), do: "[&:not(.grouped-pagination)_.pagination-button]:border-2"
-
-  defp border_size("medium", _),
-    do: "[&:not(.grouped-pagination)_.pagination-button]:border-[3px]"
-
-  defp border_size("large", _), do: "[&:not(.grouped-pagination)_.pagination-button]:border-4"
-
-  defp border_size("extra_large", _),
-    do: "[&:not(.grouped-pagination)_.pagination-button]:border-[5px]"
-
-  defp border_size(params, _) when is_binary(params), do: params
-
-  defp border_class("transparent") do
-    ["[&.grouped-pagination]:border border-transparent"]
-  end
-
-  defp border_class("base") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "border-[#e4e4e7] [&.grouped-pagination_.pagination-button]:border-[#e4e4e7]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#e4e4e7]",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#e4e4e7]",
-      "dark:border-[#27272a] dark:[&.grouped-pagination_.pagination-button]:border-[#27272a]",
-      "dark:[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#27272a]",
-      "dark:[&.grouped-pagination_.pagination-seperator]:border-[#27272a]"
-    ]
-  end
-
-  defp border_class("natural") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#DADADA] [&.grouped-pagination_.pagination-button]:border-[#DADADA]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#DADADA]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#DADADA]"
-    ]
-  end
-
-  defp border_class("primary") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#4363EC] [&.grouped-pagination_.pagination-button]:border-[#2441de]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#2441de]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#2441de]"
-    ]
-  end
-
-  defp border_class("secondary") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#6B6E7C] [&.grouped-pagination_.pagination-button]:border-[#3d3f49]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#3d3f49]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#3d3f49]"
-    ]
-  end
-
-  defp border_class("success") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#227A52] [&.grouped-pagination_.pagination-button]:border-[#227A52]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#227A52]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#227A52]"
-    ]
-  end
-
-  defp border_class("warning") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#FF8B08] [&.grouped-pagination_.pagination-button]:border-[#FF8B08]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#FF8B08]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#FF8B08]"
-    ]
-  end
-
-  defp border_class("danger") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#E73B3B] [&.grouped-pagination_.pagination-button]:border-[#E73B3B]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#E73B3B]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#E73B3B]"
-    ]
-  end
-
-  defp border_class("info") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#004FC4] [&.grouped-pagination_.pagination-button]:border-[#004FC4]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#004FC4]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#004FC4]"
-    ]
-  end
-
-  defp border_class("misc") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#52059C] [&.grouped-pagination_.pagination-button]:border-[#52059C]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#52059C]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#52059C]"
-    ]
-  end
-
-  defp border_class("dawn") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#4D4137] [&.grouped-pagination_.pagination-button]:border-[#4D4137]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#4D4137]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#4D4137]"
-    ]
-  end
-
-  defp border_class("silver") do
-    [
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#707483] [&.grouped-pagination_.pagination-button]:border-[#707483]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#707483]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#707483]"
-    ]
-  end
-
-  defp border_class("dark") do
-    [
-      "[&.grouped-pagination]:bg-[#282828] [&.grouped-pagination]:text-white",
-      "[&.grouped-pagination]:border [&.grouped-pagination_.pagination-button]:border-r",
-      "border-[#1E1E1E] [&.grouped-pagination_.pagination-button]:border-[#727272]",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-r",
-      "[&.grouped-pagination_.pagination-control:not(:last-child)]:border-[#727272]",
-      "[&.grouped-pagination_.pagination-seperator]:border-r",
-      "[&.grouped-pagination_.pagination-seperator]:border-[#727272]"
-    ]
-  end
-
-  defp border_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"),
-    do:
-      "[&.grouped-pagination]:rounded-sm [&:not(.grouped-pagination)_.pagination-button]:rounded-sm"
-
-  defp rounded_size("small"),
-    do: "[&.grouped-pagination]:rounded [&:not(.grouped-pagination)_.pagination-button]:rounded"
-
-  defp rounded_size("medium"),
-    do:
-      "[&.grouped-pagination]:rounded-md [&:not(.grouped-pagination)_.pagination-button]:rounded-md"
-
-  defp rounded_size("large"),
-    do:
-      "[&.grouped-pagination]:rounded-lg [&:not(.grouped-pagination)_.pagination-button]:rounded-lg"
-
-  defp rounded_size("extra_large"),
-    do:
-      "[&.grouped-pagination]:rounded-xl [&:not(.grouped-pagination)_.pagination-button]:rounded-xl"
-
-  defp rounded_size("full"),
-    do:
-      "[&.grouped-pagination]:rounded-full [&:not(.grouped-pagination)_.pagination-button]:rounded-full"
-
-  defp rounded_size("none"),
-    do:
-      "[&.grouped-pagination]:rounded-none [&:not(.grouped-pagination)_.pagination-button]:rounded-none"
-
-  defp size_class("extra_small") do
-    [
-      "[&.grouped-pagination_.pagination-button]:w-full [&.grouped-pagination_.pagination-button]:px-3",
-      "[&:not(.grouped-pagination)_.pagination-button]:w-6",
-      "[&.grouped-pagination_.pagination-button]:min-w-6 [&.grouped-pagination_.pagination-control]:min-w-6",
-      "[&_.pagination-button]:h-6 [&_.pagination-control>.pagination-icon]:h-6",
-      "[&_.pagination-control]:px-2",
-      "[&_.pagination-seperator]:h-6 text-xs",
-      "[&_:not(.pagination-seperator)>.pagination-icon]:size-3.5"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&.grouped-pagination_.pagination-button]:w-full [&.grouped-pagination_.pagination-button]:px-3",
-      "[&:not(.grouped-pagination)_.pagination-button]:w-7",
-      "[&.grouped-pagination_.pagination-button]:min-w-7 [&.grouped-pagination_.pagination-control]:min-w-7",
-      "[&_.pagination-button]:h-7 [&_.pagination-control>.pagination-icon]:h-7",
-      "[&_.pagination-control]:px-2",
-      "[&_.pagination-seperator]:w-full [&_.pagination-seperator]:h-7 text-sm",
-      "[&_:not(.pagination-seperator)>.pagination-icon]:size-4"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&.grouped-pagination_.pagination-button]:w-full [&.grouped-pagination_.pagination-button]:px-3",
-      "[&:not(.grouped-pagination)_.pagination-button]:w-8",
-      "[&.grouped-pagination_.pagination-button]:min-w-8 [&.grouped-pagination_.pagination-control]:min-w-8",
-      "[&_.pagination-control]:px-2",
-      "[&_.pagination-button]:h-8 [&_.pagination-control>.pagination-icon]:h-8",
-      "[&_.pagination-seperator]:w-full [&_.pagination-seperator]:h-8 text-base",
-      "[&_:not(.pagination-seperator)>.pagination-icon]:size-5"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&.grouped-pagination_.pagination-button]:w-full [&.grouped-pagination_.pagination-button]:px-3",
-      "[&:not(.grouped-pagination)_.pagination-button]:w-9",
-      "[&.grouped-pagination_.pagination-button]:min-w-9 [&.grouped-pagination_.pagination-control]:min-w-9",
-      "[&_.pagination-control]:px-2",
-      "[&_.pagination-button]:h-9 [&_.pagination-control>.pagination-icon]:h-9",
-      "[&_.pagination-seperator]:w-full [&_.pagination-seperator]:h-9 text-lg",
-      "[&_:not(.pagination-seperator)>.pagination-icon]:size-6"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&.grouped-pagination_.pagination-button]:w-full [&.grouped-pagination_.pagination-button]:px-3",
-      "[&:not(.grouped-pagination)_.pagination-button]:w-10",
-      "[&.grouped-pagination_.pagination-button]:min-w-10 [&.grouped-pagination_.pagination-control]:min-w-10",
-      "[&_.pagination-control]:px-2",
-      "[&_.pagination-button]:h-10 [&_.pagination-control>.pagination-icon]:h-10",
-      "[&_.pagination-seperator]:w-full [&_.pagination-seperator]:h-10 text-xl",
-      "[&_:not(.pagination-seperator)>.pagination-icon]:size-7"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white dark:bg-[#18181B] [&_.pagination-button]:border-[#e4e4e7] [&_.pagination-button]:text-[#09090b]",
-      "dark:[&_.pagination-button]:border-[#27272a] dark:[&_.pagination-button]:text-[#FAFAFA]",
-      "hover:[&_.pagination-button]:bg-[#F8F9FA] dark:hover:[&_.pagination-button]:bg-[#242424]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F8F9FA] dark:[&_.pagination-button.active-pagination-button]:bg-[#242424]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "[&_.pagination-button]:bg-white [&_.pagination-button]:text-[#3E3E3E]",
-      "hover:[&_.pagination-button]:bg-[#E8E8E8]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "[&_.pagination-button]:bg-[#282828] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#727272]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#727272]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&_.pagination-button]:bg-[#4B4B4B] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#282828]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#282828]",
-      "dark:[&_.pagination-button]:bg-[#DDDDDD] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#E8E8E8]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&_.pagination-button]:bg-[#007F8C] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#016974]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#016974]",
-      "dark:[&_.pagination-button]:bg-[#01B8CA] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#77D5E3]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&_.pagination-button]:bg-[#266EF1] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#175BCC]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#175BCC]",
-      "dark:[&_.pagination-button]:bg-[#6DAAFB] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#A9C9FF]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&_.pagination-button]:bg-[#0E8345] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#166C3B]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#166C3B]",
-      "dark:[&_.pagination-button]:bg-[#06C167] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#7FD99A]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&_.pagination-button]:bg-[#CA8D01] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#976A01]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#976A01]",
-      "dark:[&_.pagination-button]:bg-[#FDC034] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#FDD067]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&_.pagination-button]:bg-[#DE1135] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#BB032A]",
-      "dark:[&_.pagination-button]:bg-[#FC7F79] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&_.pagination-button]:bg-[#0B84BA] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#08638C]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#08638C]",
-      "dark:[&_.pagination-button]:bg-[#3EB7ED] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#6EC9F2]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&_.pagination-button]:bg-[#8750C5] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#653C94]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#653C94]",
-      "dark:[&_.pagination-button]:bg-[#BA83F9] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#CBA2FA]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&_.pagination-button]:bg-[#A86438] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#7E4B2A]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#7E4B2A]",
-      "dark:[&_.pagination-button]:bg-[#DB976B] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#E4B190]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&_.pagination-button]:bg-[#868686] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#727272]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#727272]",
-      "dark:[&_.pagination-button]:bg-[#A6A6A6] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#BBBBBB]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "[&_.pagination-button]:border-[#4B4B4B] [&_.pagination-button]:text-[#4B4B4B]",
-      "hover:[&_.pagination-button]:border-[#282828] hover:[&_.pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button]:border-[#DDDDDD] dark:[&_.pagination-button]:text-[#DDDDDD]",
-      "dark:hover:[&_.pagination-button]:border-[#E8E8E8] dark:hover:[&_.pagination-button]:text-[#E8E8E8]",
-      "[&_.pagination-button.active-pagination-button]:border-[#282828] [&_.pagination-button.active-pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#E8E8E8] dark:[&_.pagination-button.active-pagination-button]:text-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "[&_.pagination-button]:border-[#007F8C] [&_.pagination-button]:text-[#007F8C]",
-      "hover:[&_.pagination-button]:border-[#016974] hover:[&_.pagination-button]:text-[#016974]",
-      "[&_.pagination-button.active-pagination-button]:border-[#016974] [&_.pagination-button.active-pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button]:border-[#01B8CA] dark:[&_.pagination-button]:text-[#01B8CA]",
-      "dark:hover:[&_.pagination-button]:border-[#77D5E3] dark:hover:[&_.pagination-button]:text-[#77D5E3]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#77D5E3] dark:[&_.pagination-button.active-pagination-button]:text-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "[&_.pagination-button]:border-[#266EF1] [&_.pagination-button]:text-[#266EF1]",
-      "hover:[&_.pagination-button]:border-[#175BCC] hover:[&_.pagination-button]:text-[#175BCC]",
-      "[&_.pagination-button.active-pagination-button]:border-[#175BCC] [&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button]:border-[#6DAAFB] dark:[&_.pagination-button]:text-[#6DAAFB]",
-      "dark:hover:[&_.pagination-button]:border-[#A9C9FF] dark:hover:[&_.pagination-button]:text-[#A9C9FF]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#A9C9FF] dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "[&_.pagination-button]:border-[#0E8345] [&_.pagination-button]:text-[#0E8345]",
-      "hover:[&_.pagination-button]:border-[#166C3B] hover:[&_.pagination-button]:text-[#166C3B]",
-      "[&_.pagination-button.active-pagination-button]:border-[#166C3B] [&_.pagination-button.active-pagination-button]:text-[#166C3B]",
-      "dark:[&_.pagination-button]:border-[#06C167] dark:[&_.pagination-button]:text-[#06C167]",
-      "dark:hover:[&_.pagination-button]:border-[#7FD99A] dark:hover:[&_.pagination-button]:text-[#7FD99A]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#7FD99A] dark:[&_.pagination-button.active-pagination-button]:text-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "[&_.pagination-button]:border-[#CA8D01] [&_.pagination-button]:text-[#CA8D01]",
-      "hover:[&_.pagination-button]:border-[#976A01] hover:[&_.pagination-button]:text-[#976A01]",
-      "[&_.pagination-button.active-pagination-button]:border-[#976A01] [&_.pagination-button.active-pagination-button]:text-[#976A01]",
-      "dark:[&_.pagination-button]:border-[#FDC034] dark:[&_.pagination-button]:text-[#FDC034]",
-      "dark:hover:[&_.pagination-button]:border-[#FDD067] dark:hover:[&_.pagination-button]:text-[#FDD067]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FDD067] dark:[&_.pagination-button.active-pagination-button]:text-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "[&_.pagination-button]:border-[#DE1135] [&_.pagination-button]:text-[#DE1135]",
-      "hover:[&_.pagination-button]:border-[#BB032A] hover:[&_.pagination-button]:text-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#BB032A] [&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:border-[#FC7F79] dark:[&_.pagination-button]:text-[#FC7F79]",
-      "dark:hover:[&_.pagination-button]:border-[#FFB2AB] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FFB2AB] dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "[&_.pagination-button]:border-[#0B84BA] [&_.pagination-button]:text-[#0B84BA]",
-      "hover:[&_.pagination-button]:border-[#BB032A] hover:[&_.pagination-button]:text-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#BB032A] [&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:border-[#FC7F79] dark:[&_.pagination-button]:text-[#FC7F79]",
-      "dark:hover:[&_.pagination-button]:border-[#FFB2AB] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FFB2AB] dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "[&_.pagination-button]:border-[#8750C5] [&_.pagination-button]:text-[#8750C5]",
-      "hover:[&_.pagination-button]:border-[#653C94] hover:[&_.pagination-button]:text-[#653C94]",
-      "[&_.pagination-button.active-pagination-button]:border-[#653C94] [&_.pagination-button.active-pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button]:border-[#BA83F9] dark:[&_.pagination-button]:text-[#BA83F9]",
-      "dark:hover:[&_.pagination-button]:border-[#CBA2FA] dark:hover:[&_.pagination-button]:text-[#CBA2FA]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#CBA2FA] dark:[&_.pagination-button.active-pagination-button]:text-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "[&_.pagination-button]:border-[#A86438] [&_.pagination-button]:text-[#A86438]",
-      "hover:[&_.pagination-button]:border-[#7E4B2A] hover:[&_.pagination-button]:text-[#7E4B2A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#7E4B2A] [&_.pagination-button.active-pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button]:border-[#DB976B] dark:[&_.pagination-button]:text-[#DB976B]",
-      "dark:hover:[&_.pagination-button]:border-[#E4B190] dark:hover:[&_.pagination-button]:text-[#E4B190]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#E4B190] dark:[&_.pagination-button.active-pagination-button]:text-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "[&_.pagination-button]:border-[#868686] [&_.pagination-button]:text-[#868686]",
-      "hover:[&_.pagination-button]:border-[#727272] hover:[&_.pagination-button]:text-[#727272]",
-      "[&_.pagination-button.active-pagination-button]:border-[#727272] [&_.pagination-button.active-pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button]:border-[#A6A6A6] dark:[&_.pagination-button]:text-[#A6A6A6]",
-      "dark:hover:[&_.pagination-button]:border-[#BBBBBB] dark:hover:[&_.pagination-button]:text-[#BBBBBB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#BBBBBB] dark:[&_.pagination-button.active-pagination-button]:text-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#4B4B4B] [&_.pagination-button]:text-[#4B4B4B]",
-      "hover:[&_.pagination-button]:border-[#282828] hover:[&_.pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button]:border-[#DDDDDD] dark:[&_.pagination-button]:text-[#DDDDDD]",
-      "dark:hover:[&_.pagination-button]:border-[#E8E8E8] dark:hover:[&_.pagination-button]:text-[#E8E8E8]",
-      "[&_.pagination-button.active-pagination-button]:border-[#282828] [&_.pagination-button.active-pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#E8E8E8] dark:[&_.pagination-button.active-pagination-button]:text-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#007F8C] [&_.pagination-button]:text-[#007F8C]",
-      "hover:[&_.pagination-button]:border-[#016974] hover:[&_.pagination-button]:text-[#016974]",
-      "[&_.pagination-button.active-pagination-button]:border-[#016974] [&_.pagination-button.active-pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button]:border-[#01B8CA] dark:[&_.pagination-button]:text-[#01B8CA]",
-      "dark:hover:[&_.pagination-button]:border-[#77D5E3] dark:hover:[&_.pagination-button]:text-[#77D5E3]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#77D5E3] dark:[&_.pagination-button.active-pagination-button]:text-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#266EF1] [&_.pagination-button]:text-[#266EF1]",
-      "hover:[&_.pagination-button]:border-[#175BCC] hover:[&_.pagination-button]:text-[#175BCC]",
-      "[&_.pagination-button.active-pagination-button]:border-[#175BCC] [&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button]:border-[#6DAAFB] dark:[&_.pagination-button]:text-[#6DAAFB]",
-      "dark:hover:[&_.pagination-button]:border-[#A9C9FF] dark:hover:[&_.pagination-button]:text-[#A9C9FF]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#A9C9FF] dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#0E8345] [&_.pagination-button]:text-[#0E8345]",
-      "hover:[&_.pagination-button]:border-[#166C3B] hover:[&_.pagination-button]:text-[#166C3B]",
-      "[&_.pagination-button.active-pagination-button]:border-[#166C3B] [&_.pagination-button.active-pagination-button]:text-[#166C3B]",
-      "dark:[&_.pagination-button]:border-[#06C167] dark:[&_.pagination-button]:text-[#06C167]",
-      "dark:hover:[&_.pagination-button]:border-[#7FD99A] dark:hover:[&_.pagination-button]:text-[#7FD99A]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#7FD99A] dark:[&_.pagination-button.active-pagination-button]:text-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#CA8D01] [&_.pagination-button]:text-[#CA8D01]",
-      "hover:[&_.pagination-button]:border-[#976A01] hover:[&_.pagination-button]:text-[#976A01]",
-      "[&_.pagination-button.active-pagination-button]:border-[#976A01] [&_.pagination-button.active-pagination-button]:text-[#976A01]",
-      "dark:[&_.pagination-button]:border-[#FDC034] dark:[&_.pagination-button]:text-[#FDC034]",
-      "dark:hover:[&_.pagination-button]:border-[#FDD067] dark:hover:[&_.pagination-button]:text-[#FDD067]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FDD067] dark:[&_.pagination-button.active-pagination-button]:text-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#DE1135] [&_.pagination-button]:text-[#DE1135]",
-      "hover:[&_.pagination-button]:border-[#BB032A] hover:[&_.pagination-button]:text-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#BB032A] [&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:border-[#FC7F79] dark:[&_.pagination-button]:text-[#FC7F79]",
-      "dark:hover:[&_.pagination-button]:border-[#FFB2AB] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FFB2AB] dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#0B84BA] [&_.pagination-button]:text-[#0B84BA]",
-      "hover:[&_.pagination-button]:border-[#BB032A] hover:[&_.pagination-button]:text-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#BB032A] [&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:border-[#FC7F79] dark:[&_.pagination-button]:text-[#FC7F79]",
-      "dark:hover:[&_.pagination-button]:border-[#FFB2AB] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FFB2AB] dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#8750C5] [&_.pagination-button]:text-[#8750C5]",
-      "hover:[&_.pagination-button]:border-[#653C94] hover:[&_.pagination-button]:text-[#653C94]",
-      "[&_.pagination-button.active-pagination-button]:border-[#653C94] [&_.pagination-button.active-pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button]:border-[#BA83F9] dark:[&_.pagination-button]:text-[#BA83F9]",
-      "dark:hover:[&_.pagination-button]:border-[#CBA2FA] dark:hover:[&_.pagination-button]:text-[#CBA2FA]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#CBA2FA] dark:[&_.pagination-button.active-pagination-button]:text-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#A86438] [&_.pagination-button]:text-[#A86438]",
-      "hover:[&_.pagination-button]:border-[#7E4B2A] hover:[&_.pagination-button]:text-[#7E4B2A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#7E4B2A] [&_.pagination-button.active-pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button]:border-[#DB976B] dark:[&_.pagination-button]:text-[#DB976B]",
-      "dark:hover:[&_.pagination-button]:border-[#E4B190] dark:hover:[&_.pagination-button]:text-[#E4B190]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#E4B190] dark:[&_.pagination-button.active-pagination-button]:text-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "bg-white dark:bg-[#282828] [&_.pagination-button]:border-[#868686] [&_.pagination-button]:text-[#868686]",
-      "hover:[&_.pagination-button]:border-[#727272] hover:[&_.pagination-button]:text-[#727272]",
-      "[&_.pagination-button.active-pagination-button]:border-[#727272] [&_.pagination-button.active-pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button]:border-[#A6A6A6] dark:[&_.pagination-button]:text-[#A6A6A6]",
-      "dark:hover:[&_.pagination-button]:border-[#BBBBBB] dark:hover:[&_.pagination-button]:text-[#BBBBBB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#BBBBBB] dark:[&_.pagination-button.active-pagination-button]:text-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "[&_.pagination-button]:text-[#4B4B4B] hover:[&_.pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button]:text-[#DDDDDD] dark:hover:[&_.pagination-button]:text-[#E8E8E8]",
-      "[&_.pagination-button.active-pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "[&_.pagination-button]:text-[#007F8C] hover:[&_.pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button]:text-[#01B8CA] dark:hover:[&_.pagination-button]:text-[#77D5E3]",
-      "[&_.pagination-button.active-pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "[&_.pagination-button]:text-[#266EF1] hover:[&_.pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button]:text-[#6DAAFB] dark:hover:[&_.pagination-button]:text-[#A9C9FF]",
-      "[&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "[&_.pagination-button]:text-[#0E8345] hover:[&_.pagination-button]:text-[#166C3B]",
-      "dark:[&_.pagination-button]:text-[#06C167] dark:hover:[&_.pagination-button]:text-[#7FD99A]",
-      "[&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "[&_.pagination-button]:text-[#CA8D01] hover:[&_.pagination-button]:text-[#CA8D01]",
-      "dark:[&_.pagination-button]:text-[#FDC034] dark:hover:[&_.pagination-button]:text-[#FDD067]",
-      "[&_.pagination-button.active-pagination-button]:text-[#CA8D01]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "[&_.pagination-button]:text-[#DE1135] hover:[&_.pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:text-[#FC7F79] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "[&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "[&_.pagination-button]:text-[#0B84BA] hover:[&_.pagination-button]:text-[#08638C]",
-      "dark:[&_.pagination-button]:text-[#3EB7ED] dark:hover:[&_.pagination-button]:text-[#6EC9F2]",
-      "[&_.pagination-button.active-pagination-button]:text-[#08638C]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "[&_.pagination-button]:text-[#8750C5] hover:[&_.pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button]:text-[#BA83F9] dark:hover:[&_.pagination-button]:text-[#CBA2FA]",
-      "[&_.pagination-button.active-pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "[&_.pagination-button]:text-[#A86438] hover:[&_.pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button]:text-[#DB976B] dark:hover:[&_.pagination-button]:text-[#E4B190]",
-      "[&_.pagination-button.active-pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "[&_.pagination-button]:text-[#868686] hover:[&_.pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button]:text-[#A6A6A6] dark:hover:[&_.pagination-button]:text-[#BBBBBB]",
-      "[&_.pagination-button.active-pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("subtle", "natural") do
-    [
-      "[&_.pagination-button]:text-[#4B4B4B] hover:[&_.pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button]:text-[#DDDDDD] dark:hover:[&_.pagination-button]:text-[#E8E8E8]",
-      "[&_.pagination-button.active-pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#E8E8E8]",
-      "hover:[&_.pagination-button]:bg-[#F3F3F3] dark:hover:[&_.pagination-button]:bg-[#4B4B4B]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F3F3F3]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("subtle", "primary") do
-    [
-      "[&_.pagination-button]:text-[#007F8C] hover:[&_.pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button]:text-[#01B8CA] dark:hover:[&_.pagination-button]:text-[#77D5E3]",
-      "[&_.pagination-button.active-pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#77D5E3]",
-      "hover:[&_.pagination-button]:bg-[#E2F8FB] dark:hover:[&_.pagination-button]:bg-[#002D33]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#E2F8FB]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("subtle", "secondary") do
-    [
-      "[&_.pagination-button]:text-[#266EF1] hover:[&_.pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button]:text-[#6DAAFB] dark:hover:[&_.pagination-button]:text-[#A9C9FF]",
-      "[&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]",
-      "hover:[&_.pagination-button]:bg-[#EFF4FE] dark:hover:[&_.pagination-button]:bg-[#002661]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#EFF4FE]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("subtle", "success") do
-    [
-      "[&_.pagination-button]:text-[#0E8345] hover:[&_.pagination-button]:text-[#166C3B]",
-      "dark:[&_.pagination-button]:text-[#06C167] dark:hover:[&_.pagination-button]:text-[#7FD99A]",
-      "[&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]",
-      "hover:[&_.pagination-button]:bg-[#EAF6ED] dark:hover:[&_.pagination-button]:bg-[#002F14]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#EAF6ED]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("subtle", "warning") do
-    [
-      "[&_.pagination-button]:text-[#CA8D01] hover:[&_.pagination-button]:text-[#CA8D01]",
-      "dark:[&_.pagination-button]:text-[#FDC034] dark:hover:[&_.pagination-button]:text-[#FDD067]",
-      "[&_.pagination-button.active-pagination-button]:text-[#CA8D01]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#FDD067]",
-      "hover:[&_.pagination-button]:bg-[#FFF7E6] dark:hover:[&_.pagination-button]:bg-[#322300]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#FFF7E6]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("subtle", "danger") do
-    [
-      "[&_.pagination-button]:text-[#DE1135] hover:[&_.pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:text-[#FC7F79] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "[&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]",
-      "hover:[&_.pagination-button]:bg-[#FFF0EE] dark:hover:[&_.pagination-button]:bg-[#520810]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#FFF0EE]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("subtle", "info") do
-    [
-      "[&_.pagination-button]:text-[#0B84BA] hover:[&_.pagination-button]:text-[#08638C]",
-      "dark:[&_.pagination-button]:text-[#3EB7ED] dark:hover:[&_.pagination-button]:text-[#6EC9F2]",
-      "[&_.pagination-button.active-pagination-button]:text-[#08638C]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#6EC9F2]",
-      "hover:[&_.pagination-button]:bg-[#E7F6FD] dark:hover:[&_.pagination-button]:bg-[#03212F]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#E7F6FD]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("subtle", "misc") do
-    [
-      "[&_.pagination-button]:text-[#8750C5] hover:[&_.pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button]:text-[#BA83F9] dark:hover:[&_.pagination-button]:text-[#CBA2FA]",
-      "[&_.pagination-button.active-pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#CBA2FA]",
-      "hover:[&_.pagination-button]:bg-[#F6F0FE] dark:hover:[&_.pagination-button]:bg-[#221431]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F6F0FE]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("subtle", "dawn") do
-    [
-      "[&_.pagination-button]:text-[#A86438] hover:[&_.pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button]:text-[#DB976B] dark:hover:[&_.pagination-button]:text-[#E4B190]",
-      "[&_.pagination-button.active-pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#E4B190]",
-      "hover:[&_.pagination-button]:bg-[#FBF2ED] dark:hover:[&_.pagination-button]:bg-[#2A190E]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#FBF2ED]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("subtle", "silver") do
-    [
-      "[&_.pagination-button]:text-[#868686] hover:[&_.pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button]:text-[#A6A6A6] dark:hover:[&_.pagination-button]:text-[#BBBBBB]",
-      "[&_.pagination-button.active-pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button.active-pagination-button]:text-[#BBBBBB]",
-      "hover:[&_.pagination-button]:bg-[#F3F3F3] dark:hover:[&_.pagination-button]:bg-[#4B4B4B]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F3F3F3]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&_.pagination-button]:bg-[#4B4B4B] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#282828]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#282828]",
-      "dark:[&_.pagination-button]:bg-[#DDDDDD] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#E8E8E8]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#E8E8E8]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&_.pagination-button]:bg-[#007F8C] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#016974]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#016974]",
-      "dark:[&_.pagination-button]:bg-[#01B8CA] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#77D5E3]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#77D5E3]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&_.pagination-button]:bg-[#266EF1] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#175BCC]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#175BCC]",
-      "dark:[&_.pagination-button]:bg-[#6DAAFB] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#A9C9FF]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#A9C9FF]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&_.pagination-button]:bg-[#0E8345] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#166C3B]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#166C3B]",
-      "dark:[&_.pagination-button]:bg-[#06C167] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#7FD99A]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#7FD99A]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&_.pagination-button]:bg-[#CA8D01] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#976A01]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#976A01]",
-      "dark:[&_.pagination-button]:bg-[#FDC034] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#FDD067]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#FDD067]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&_.pagination-button]:bg-[#DE1135] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#BB032A]",
-      "dark:[&_.pagination-button]:bg-[#FC7F79] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#FFB2AB]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&_.pagination-button]:bg-[#0B84BA] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#08638C]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#08638C]",
-      "dark:[&_.pagination-button]:bg-[#3EB7ED] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#6EC9F2]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#6EC9F2]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&_.pagination-button]:bg-[#8750C5] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#653C94]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#653C94]",
-      "dark:[&_.pagination-button]:bg-[#BA83F9] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#CBA2FA]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#CBA2FA]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&_.pagination-button]:bg-[#A86438] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#7E4B2A]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#7E4B2A]",
-      "dark:[&_.pagination-button]:bg-[#DB976B] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#E4B190]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#E4B190]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&_.pagination-button]:bg-[#868686] [&_.pagination-button]:text-white",
-      "hover:[&_.pagination-button]:bg-[#727272]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#727272]",
-      "dark:[&_.pagination-button]:bg-[#A6A6A6] dark:[&_.pagination-button]:text-black",
-      "dark:hover:[&_.pagination-button]:bg-[#BBBBBB]",
-      "dark:[&_.pagination-button.active-pagination-button]:bg-[#BBBBBB]",
-      "[&_.pagination-button]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.pagination-button]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.pagination-button]:shadow-none"
-    ]
-  end
-
-  defp color_variant("inverted", "natural") do
-    [
-      "[&_.pagination-button]:border-[#4B4B4B] [&_.pagination-button]:text-[#4B4B4B]",
-      "hover:[&_.pagination-button]:border-[#282828] hover:[&_.pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button]:border-[#DDDDDD] dark:[&_.pagination-button]:text-[#DDDDDD]",
-      "dark:hover:[&_.pagination-button]:border-[#E8E8E8] dark:hover:[&_.pagination-button]:text-[#E8E8E8]",
-      "[&_.pagination-button.active-pagination-button]:border-[#282828] [&_.pagination-button.active-pagination-button]:text-[#282828]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#E8E8E8] dark:[&_.pagination-button.active-pagination-button]:text-[#E8E8E8]",
-      "hover:[&_.pagination-button]:bg-[#F3F3F3] dark:hover:[&_.pagination-button]:bg-[#4B4B4B]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F3F3F3] dark:[&_.pagination-button.active-pagination-button]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("inverted", "primary") do
-    [
-      "[&_.pagination-button]:border-[#007F8C] [&_.pagination-button]:text-[#007F8C]",
-      "hover:[&_.pagination-button]:border-[#016974] hover:[&_.pagination-button]:text-[#016974]",
-      "[&_.pagination-button.active-pagination-button]:border-[#016974] [&_.pagination-button.active-pagination-button]:text-[#016974]",
-      "dark:[&_.pagination-button]:border-[#01B8CA] dark:[&_.pagination-button]:text-[#01B8CA]",
-      "dark:hover:[&_.pagination-button]:border-[#77D5E3] dark:hover:[&_.pagination-button]:text-[#77D5E3]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#77D5E3] dark:[&_.pagination-button.active-pagination-button]:text-[#77D5E3]",
-      "hover:[&_.pagination-button]:bg-[#E2F8FB] dark:hover:[&_.pagination-button]:bg-[#002D33]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#E2F8FB] dark:[&_.pagination-button.active-pagination-button]:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("inverted", "secondary") do
-    [
-      "[&_.pagination-button]:border-[#266EF1] [&_.pagination-button]:text-[#266EF1]",
-      "hover:[&_.pagination-button]:border-[#175BCC] hover:[&_.pagination-button]:text-[#175BCC]",
-      "[&_.pagination-button.active-pagination-button]:border-[#175BCC] [&_.pagination-button.active-pagination-button]:text-[#175BCC]",
-      "dark:[&_.pagination-button]:border-[#6DAAFB] dark:[&_.pagination-button]:text-[#6DAAFB]",
-      "dark:hover:[&_.pagination-button]:border-[#A9C9FF] dark:hover:[&_.pagination-button]:text-[#A9C9FF]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#A9C9FF] dark:[&_.pagination-button.active-pagination-button]:text-[#A9C9FF]",
-      "hover:[&_.pagination-button]:bg-[#EFF4FE] dark:hover:[&_.pagination-button]:bg-[#002661]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#EFF4FE] dark:[&_.pagination-button.active-pagination-button]:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("inverted", "success") do
-    [
-      "[&_.pagination-button]:border-[#0E8345] [&_.pagination-button]:text-[#0E8345]",
-      "hover:[&_.pagination-button]:border-[#166C3B] hover:[&_.pagination-button]:text-[#166C3B]",
-      "[&_.pagination-button.active-pagination-button]:border-[#166C3B] [&_.pagination-button.active-pagination-button]:text-[#166C3B]",
-      "dark:[&_.pagination-button]:border-[#06C167] dark:[&_.pagination-button]:text-[#06C167]",
-      "dark:hover:[&_.pagination-button]:border-[#7FD99A] dark:hover:[&_.pagination-button]:text-[#7FD99A]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#7FD99A] dark:[&_.pagination-button.active-pagination-button]:text-[#7FD99A]",
-      "hover:[&_.pagination-button]:bg-[#EAF6ED] dark:hover:[&_.pagination-button]:bg-[#002F14]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#EAF6ED] dark:[&_.pagination-button.active-pagination-button]:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("inverted", "warning") do
-    [
-      "[&_.pagination-button]:border-[#CA8D01] [&_.pagination-button]:text-[#CA8D01]",
-      "hover:[&_.pagination-button]:border-[#976A01] hover:[&_.pagination-button]:text-[#976A01]",
-      "[&_.pagination-button.active-pagination-button]:border-[#976A01] [&_.pagination-button.active-pagination-button]:text-[#976A01]",
-      "dark:[&_.pagination-button]:border-[#FDC034] dark:[&_.pagination-button]:text-[#FDC034]",
-      "dark:hover:[&_.pagination-button]:border-[#FDD067] dark:hover:[&_.pagination-button]:text-[#FDD067]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FDD067] dark:[&_.pagination-button.active-pagination-button]:text-[#FDD067]",
-      "hover:[&_.pagination-button]:bg-[#FFF7E6] dark:hover:[&_.pagination-button]:bg-[#322300]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#FFF7E6] dark:[&_.pagination-button.active-pagination-button]:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("inverted", "danger") do
-    [
-      "[&_.pagination-button]:border-[#DE1135] [&_.pagination-button]:text-[#DE1135]",
-      "hover:[&_.pagination-button]:border-[#BB032A] hover:[&_.pagination-button]:text-[#BB032A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#BB032A] [&_.pagination-button.active-pagination-button]:text-[#BB032A]",
-      "dark:[&_.pagination-button]:border-[#FC7F79] dark:[&_.pagination-button]:text-[#FC7F79]",
-      "dark:hover:[&_.pagination-button]:border-[#FFB2AB] dark:hover:[&_.pagination-button]:text-[#FFB2AB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#FFB2AB] dark:[&_.pagination-button.active-pagination-button]:text-[#FFB2AB]",
-      "hover:[&_.pagination-button]:bg-[#FFF0EE] dark:hover:[&_.pagination-button]:bg-[#520810]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#FFF0EE] dark:[&_.pagination-button.active-pagination-button]:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("inverted", "info") do
-    [
-      "[&_.pagination-button]:border-[#0B84BA] [&_.pagination-button]:text-[#0B84BA]",
-      "hover:[&_.pagination-button]:border-[#08638C] hover:[&_.pagination-button]:text-[#08638C]",
-      "[&_.pagination-button.active-pagination-button]:border-[#08638C] [&_.pagination-button.active-pagination-button]:text-[#08638C]",
-      "dark:[&_.pagination-button]:border-[#3EB7ED] dark:[&_.pagination-button]:text-[#3EB7ED]",
-      "dark:hover:[&_.pagination-button]:border-[#6EC9F2] dark:hover:[&_.pagination-button]:text-[#6EC9F2]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#6EC9F2] dark:[&_.pagination-button.active-pagination-button]:text-[#6EC9F2]",
-      "hover:[&_.pagination-button]:bg-[#E7F6FD] dark:hover:[&_.pagination-button]:bg-[#03212F]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#E7F6FD] dark:[&_.pagination-button.active-pagination-button]:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("inverted", "misc") do
-    [
-      "[&_.pagination-button]:border-[#8750C5] [&_.pagination-button]:text-[#8750C5]",
-      "hover:[&_.pagination-button]:border-[#653C94] hover:[&_.pagination-button]:text-[#653C94]",
-      "[&_.pagination-button.active-pagination-button]:border-[#653C94] [&_.pagination-button.active-pagination-button]:text-[#653C94]",
-      "dark:[&_.pagination-button]:border-[#BA83F9] dark:[&_.pagination-button]:text-[#BA83F9]",
-      "dark:hover:[&_.pagination-button]:border-[#CBA2FA] dark:hover:[&_.pagination-button]:text-[#CBA2FA]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#CBA2FA] dark:[&_.pagination-button.active-pagination-button]:text-[#CBA2FA]",
-      "hover:[&_.pagination-button]:bg-[#F6F0FE] dark:hover:[&_.pagination-button]:bg-[#221431]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F6F0FE] dark:[&_.pagination-button.active-pagination-button]:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("inverted", "dawn") do
-    [
-      "[&_.pagination-button]:border-[#A86438] [&_.pagination-button]:text-[#A86438]",
-      "hover:[&_.pagination-button]:border-[#7E4B2A] hover:[&_.pagination-button]:text-[#7E4B2A]",
-      "[&_.pagination-button.active-pagination-button]:border-[#7E4B2A] [&_.pagination-button.active-pagination-button]:text-[#7E4B2A]",
-      "dark:[&_.pagination-button]:border-[#DB976B] dark:[&_.pagination-button]:text-[#DB976B]",
-      "dark:hover:[&_.pagination-button]:border-[#E4B190] dark:hover:[&_.pagination-button]:text-[#E4B190]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#E4B190] dark:[&_.pagination-button.active-pagination-button]:text-[#E4B190]",
-      "hover:[&_.pagination-button]:bg-[#FBF2ED] dark:hover:[&_.pagination-button]:bg-[#2A190E]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#FBF2ED] dark:[&_.pagination-button.active-pagination-button]:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("inverted", "silver") do
-    [
-      "[&_.pagination-button]:border-[#868686] [&_.pagination-button]:text-[#868686]",
-      "hover:[&_.pagination-button]:border-[#727272] hover:[&_.pagination-button]:text-[#727272]",
-      "[&_.pagination-button.active-pagination-button]:border-[#727272] [&_.pagination-button.active-pagination-button]:text-[#727272]",
-      "dark:[&_.pagination-button]:border-[#A6A6A6] dark:[&_.pagination-button]:text-[#A6A6A6]",
-      "dark:hover:[&_.pagination-button]:border-[#BBBBBB] dark:hover:[&_.pagination-button]:text-[#BBBBBB]",
-      "dark:[&_.pagination-button.active-pagination-button]:border-[#BBBBBB] dark:[&_.pagination-button.active-pagination-button]:text-[#BBBBBB]",
-      "hover:[&_.pagination-button]:bg-[#F3F3F3] dark:hover:[&_.pagination-button]:bg-[#4B4B4B]",
-      "[&_.pagination-button.active-pagination-button]:bg-[#F3F3F3] dark:[&_.pagination-button.active-pagination-button]:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#282828] to-[#727272] [&_.pagination-button]:text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#016974] to-[#01B8CA] [&_.pagination-button]:text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#175BCC] to-[#6DAAFB] [&_.pagination-button]:text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#166C3B] to-[#06C167] [&_.pagination-button]:text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#976A01] to-[#FDC034] [&_.pagination-button]:text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#BB032A] to-[#FC7F79] [&_.pagination-button]:text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#08638C] to-[#3EB7ED] [&_.pagination-button]:text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#653C94] to-[#BA83F9] [&_.pagination-button]:text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#7E4B2A] to-[#DB976B] [&_.pagination-button]:text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&_.pagination-button]:bg-gradient-to-br hover:[&_.pagination-button]:bg-gradient-to-bl",
-      "from-[#5E5E5E] to-[#A6A6A6] [&_.pagination-button]:text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:[&_.pagination-button]:text-black",
-      "[&_.pagination-button.active-pagination-button]:bg-gradient-to-bl"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp default_classes() do
-    [
-      "w-fit flex [&.grouped-pagination>*]::flex-1 [&:not(.grouped-pagination)]:justify-start [&:not(.grouped-pagination)]:items-center [&:not(.grouped-pagination)]:flex-wrap  [&_.pagination-button.active-pagination-button]:font-medium [&.grouped-pagination]:overflow-hidden"
-    ]
-  end
-
-  defp show_pagination?(nil, _total), do: true
-  defp show_pagination?(true, total) when total <= 1, do: false
-  defp show_pagination?(_, total) when total > 1, do: true
-  defp show_pagination?(_, _), do: false
-end
diff --git a/lib/geo_web/components/password_field.ex b/lib/geo_web/components/password_field.ex
deleted file mode 100644
index 1e595f4..0000000
--- a/lib/geo_web/components/password_field.ex
+++ /dev/null
@@ -1,1091 +0,0 @@
-defmodule GeoWeb.Components.PasswordField do
-  @moduledoc """
-  The `GeoWeb.Components.PasswordField` module is a Phoenix component designed to render a customizable
-  password input field within LiveView applications. It provides a flexible and highly configurable
-  way to integrate password inputs with various visual styles, handling for error messages, and
-  toggle functionality for showing or hiding password text.
-
-  This module includes built-in support for multiple configuration options, such as color themes,
-  border styles, size, and spacing. It also allows users to easily add custom slots to render
-  additional content before and after the input field, enhancing the field's usability and appearance.
-
-  Moreover, it handles the common requirements for form input components, including error display,
-  label positioning, and visual feedback on user interaction. The module is intended to be integrated
-  seamlessly with Phoenix forms and is ideal for applications that require an interactive and
-  user-friendly password field.
-  """
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `password_field` with options for size, color, label, and validation errors.
-
-  It includes support for showing and hiding the password with an icon toggle.
-  You can add start and end sections with custom icons or text, and handle validation
-  errors with custom messages.
-
-  ## Examples
-
-  ```elixir
-  <.password_field
-    name="password"
-    value=""
-    space="small"
-    color="danger"
-    description="Enter your password"
-    label="Password"
-    placeholder="Enter your password"
-    floating="outer"
-    show_password={true}
-  >
-    <:start_section>
-      <.icon name="hero-lock-closed" class="size-4" />
-    </:start_section>
-    <:end_section>
-      <.icon name="hero-eye-slash" class="size-4" />
-    </:end_section>
-  </.password_field>
-
-  <.password_field name="confirm_password" value="" color="success" show_password={true}/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-  attr :show_pass_class, :string, default: nil, doc: "Custom CSS class for the show password"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :show_password, :boolean, default: false, doc: ""
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form maxlength minlength pattern placeholder
-        readonly required size spellcheck inputmode title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec password_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def password_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id || random_id())
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> password_field()
-  end
-
-  def password_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    assigns = assign(assigns, field: nil, id: assigns.id || random_id() <> "-password-field")
-
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.password-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "password-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "password-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="password"
-            name={@name}
-            id={@id}
-            value={@value}
-            placeholder=" "
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-        <div
-          :if={@show_password}
-          class={["flex items-center justify-center shrink-0 pe-2", @show_pass_class]}
-        >
-          <button
-            class="leading-6 focus:outline-none"
-            phx-click={
-              JS.toggle_class("hero-eye-slash password-field-icon")
-              |> JS.toggle_attribute({"type", "password", "text"}, to: "##{@id}")
-            }
-          >
-            <.icon name="hero-eye" class="password-field-icon" />
-          </button>
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def password_field(assigns) do
-    assigns = assign(assigns, field: nil, id: assigns.id || random_id() <> "-password-field")
-
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.password-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["password-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "password-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "password-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="password"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-        <div
-          :if={@show_password}
-          class={["flex items-center justify-center shrink-0 pe-2", @show_pass_class]}
-        >
-          <button
-            class="leading-6 focus:outline-none"
-            phx-click={
-              JS.toggle_class("hero-eye-slash password-field-icon")
-              |> JS.toggle_attribute({"type", "password", "text"}, to: "##{@id}")
-            }
-          >
-            <.icon name="hero-eye" class="password-field-icon" />
-          </button>
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small") do
-    "[&_.password-field-wrapper_input]:h-8 [&_.password-field-wrapper_.password-field-icon]:size-3"
-  end
-
-  defp size_class("small") do
-    "[&_.password-field-wrapper_input]:h-9 [&_.password-field-wrapper_.password-field-icon]:size-3.5"
-  end
-
-  defp size_class("medium") do
-    "[&_.password-field-wrapper_input]:h-10 [&_.password-field-wrapper_.password-field-icon]:size-4"
-  end
-
-  defp size_class("large") do
-    "[&_.password-field-wrapper_input]:h-11 [&_.password-field-wrapper_.password-field-icon]:size-5"
-  end
-
-  defp size_class("extra_large") do
-    "[&_.password-field-wrapper_input]:h-12 [&_.password-field-wrapper_.password-field-icon]:size-6"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.password-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.password-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.password-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.password-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.password-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.password-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.password-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.password-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.password-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.password-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.password-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.password-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-white",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#27272a]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.password-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.password-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.password-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#DDDDDD]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.password-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.password-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#007F8C]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#01B8CA]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.password-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.password-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#266EF1]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#6DAAFB]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.password-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.password-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#0E8345]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#06C167]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.password-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.password-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#CA8D01]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#FDC034]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.password-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.password-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#CA8D01]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#FC7F79]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.password-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.password-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#0B84BA]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#3EB7ED]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.password-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.password-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#8750C5]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#BA83F9]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.password-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.password-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#A86438]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#DB976B]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.password-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.password-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#868686]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#A6A6A6]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.password-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#868686] dark:focus-within:[&_.password-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-white dark:[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.password-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.password-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.password-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#DDDDDD]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.password-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.password-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#007F8C]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#01B8CA]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.password-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.password-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#266EF1]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#6DAAFB]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.password-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.password-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#0E8345]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#06C167]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.password-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.password-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FDC034]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.password-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.password-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#DE1135]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FC7F79]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.password-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.password-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#3EB7ED]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.password-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.password-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#8750C5]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#BA83F9]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.password-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.password-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#A86438]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#DB976B]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.password-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.password-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#868686]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#A6A6A6]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#868686] dark:focus-within:[&_.password-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.password-field-wrapper]:bg-[#282828] text-[#282828] [&_.password-field-wrapper]:text-white",
-      "[&_.password-field-wrapper.password-field-error]:border-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white focus-within:[&_.password-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.password-field-wrapper]:bg-white [&_.password-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.password-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#282828]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#868686]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.password-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.password-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#016974]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#77D5E3]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.password-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.password-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#175BCC]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#002661]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#A9C9FF]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.password-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.password-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#166C3B]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#002F14]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#7FD99A]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.password-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.password-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#976A01]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#322300]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#FDD067]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.password-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.password-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#BB032A]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#520810]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#FFB2AB]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.password-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.password-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#0B84BA]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#03212F]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#6EC9F2]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.password-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.password-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#653C94]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#221431]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#CBA2FA]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.password-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.password-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#7E4B2A]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#2A190E]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#E4B190]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.password-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.password-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#727272]",
-      "[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:border-[#BBBBBB]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.password-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.password-field-wrapper]:ring-[#868686] dark:focus-within:[&_.password-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.password-field-wrapper]:bg-[#282828] text-[#282828] [&_.password-field-wrapper]:border-[#727272] text-white",
-      "[&_.password-field-wrapper>input]:placeholder:text-white focus-within:[&_.password-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.password-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#DDDDDD]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.password-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.password-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#007F8C]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#01B8CA]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.password-field-wrapper]:ring-[#01B8CA]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.password-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#266EF1]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#6DAAFB]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.password-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.password-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#0E8345]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#06C167]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.password-field-wrapper]:ring-[#06C167]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.password-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FDC034]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.password-field-wrapper]:ring-[#FDC034]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.password-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#DE1135]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#FC7F79]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.password-field-wrapper]:ring-[#FC7F79]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.password-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#3EB7ED]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.password-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.password-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#8750C5]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#BA83F9]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.password-field-wrapper]:ring-[#BA83F9]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.password-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#A86438]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#DB976B]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.password-field-wrapper]:ring-[#DB976B]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.password-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#868686]",
-      "dark:[&_.password-field-wrapper:not(:has(.password-field-error))]:bg-[#A6A6A6]",
-      "[&_.password-field-wrapper.password-field-error]:bg-rose-700",
-      "[&_.password-field-wrapper>input]:placeholder:text-white dark:[&_.password-field-wrapper>input]:placeholder:text-black",
-      "[&_.password-field-wrapper>input]:text-white dark:[&_.password-field-wrapper>input]:text-black",
-      "focus-within:[&_.password-field-wrapper]:ring-[#868686] dark:focus-within:[&_.password-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.password-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.password-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.password-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.password-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.password-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.password-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.password-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.password-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Components.PasswordField.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/popover.ex b/lib/geo_web/components/popover.ex
deleted file mode 100644
index 944696c..0000000
--- a/lib/geo_web/components/popover.ex
+++ /dev/null
@@ -1,891 +0,0 @@
-defmodule GeoWeb.Components.Popover do
-  @moduledoc """
-  The `GeoWeb.Components.Popover` module provides a versatile popover component for Phoenix LiveView
-  applications. It allows developers to create interactive and visually appealing popover elements
-  with various customization options.
-
-  This component supports different display configurations, such as inline and block styles, and
-  can be triggered by various user interactions like clicks or hover events. The popover can be
-  styled using predefined color schemes and variants, including options for shadowed elements.
-
-  The module also offers control over positioning, size, and spacing of the popover content, making
-  it adaptable to different use cases. It is built to be highly configurable while maintaining a
-  consistent design system across the application.
-
-  By utilizing `slots`, it allows developers to include custom content within the popover and
-  trigger elements, enhancing its flexibility and usability for complex UI scenarios.
-  """
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-
-  @doc """
-  Renders a customizable `popover` component that can display additional information when an element is
-  hovered or clicked.
-
-  You can choose between inline and block rendering, and include rich content within the popover.
-
-  ## Examples
-
-  ```elixir
-  <p>
-    Due to its central geographic location in Southern Europe,
-    <.popover inline clickable>
-      <:trigger trigger_id="popover-1" inline class="text-blue-400">Italy</:trigger>
-      <:content
-        id="popover-1"
-        rounded="large"
-        width="quadruple_large"
-        color="light"
-        padding="none"
-        class="grid grid-cols-5"
-        inline
-      >
-        <span class="block p-2 space-y-5 col-span-3">
-          <span class="font-semibold block">About Italy</span>
-          <span class="block">
-            Italy is located in the middle of the Mediterranean Sea, in Southern Europe,
-            and it is also considered part of Western Europe. It is a unitary parliamentary
-            republic with Rome as its capital and largest city.
-          </span>
-          <a href="/" class="block text-blue-400">Read more <.icon name="hero-link" /></a>
-        </span>
-        <img
-          src="https://example.com/italy.png"
-          class="h-full w-full col-span-2"
-          alt="Map of Italy"
-        />
-      </:content>
-    </.popover>
-    has historically been home to myriad peoples and cultures. In addition to the various ancient peoples dispersed throughout what is now modern-day Italy, the most predominant being the Indo-European Italic peoples who gave the peninsula its name, beginning from the classical era, Phoenicians and Carthaginians founded colonies mostly in insular Italy.
-  </p>
-
-  <.popover clickable>
-    <:trigger trigger_id="popover-2" class="text-blue-400">Hover or Click here</:trigger>
-    <:content id="popover-2" color="light" rounded="large" padding="medium">
-      <div class="p-4">
-        <h4 class="text-lg font-semibold">Popover Title</h4>
-        <p class="mt-2">This is a simple popover example with content that can be customized.</p>
-      </div>
-    </:content>
-  </.popover>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :inline, :boolean, default: false, doc: "Determines whether this element is inline"
-
-  attr :clickable, :boolean,
-    default: false,
-    doc: "Determines if the element can be activated on click"
-
-  attr :position, :string, default: "top", doc: "Determines the element position"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :show_arrow, :boolean, default: true, doc: "Show or hide arrow of popover"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :width, :string, default: "extra_large", doc: "Determines the element width"
-  attr :text_position, :string, default: "start", doc: "Determines the element' text position"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :content, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  slot :trigger, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  def popover(assigns) do
-    ~H"""
-    <span
-      :if={@inline}
-      id={@id}
-      class={[
-        "inline-block relative w-fit",
-        "[&_.popover-content]:invisible [&_.popover-content]:opacity-0",
-        "[&_.popover-content.show-popover]:visible [&_.popover-content.show-popover]:opacity-100",
-        !@clickable && tirgger_popover(),
-        @class
-      ]}
-      {@rest}
-    >
-      <span
-        :for={trigger <- @trigger}
-        phx-click={show_popover(@id)}
-        phx-click-away={hide_popover(@id)}
-        class={["inline-block cursor-pointer popover-trigger", trigger[:class]]}
-        role="button"
-        aria-haspopup="tooltip"
-        id={"#{@id}-popover-trigger"}
-        aria-expanded="false"
-        aria-controls={"#{@id}-popover-content"}
-        tabindex="0"
-        {@rest}
-      >
-        {render_slot(trigger)}
-      </span>
-
-      <span
-        :for={content <- @content}
-        id={"#{@id}-popover-content"}
-        role="tooltip"
-        aria-labelledby={"#{@id}-popover-trigger"}
-        tabindex="-1"
-        class={[
-          "popover-content absolute z-10 w-full",
-          "transition-all ease-in-out delay-100 duratio-500",
-          space_class(@space),
-          color_variant(@variant, @color),
-          rounded_size(@rounded),
-          size_class(@size),
-          position_class(@position),
-          text_position(@text_position),
-          @variant == "bordered" || (@variant == "base" && border_class(@border)),
-          width_class(@width),
-          wrapper_padding(@padding),
-          @font_weight,
-          content[:class]
-        ]}
-        {@rest}
-      >
-        {render_slot(content)}
-        <span
-          :if={@show_arrow && @variant != "bordered" && @variant != "base"}
-          class={["block absolute size-[8px] bg-inherit rotate-45 -z-[1] popover-arrow"]}
-        >
-        </span>
-      </span>
-      {render_slot(@inner_block)}
-    </span>
-
-    <div
-      :if={!@inline}
-      id={@id}
-      class={[
-        "relative w-fit",
-        "[&_.popover-content]:invisible [&_.popover-content]:opacity-0",
-        "[&_.popover-content.show-popover]:visible [&_.popover-content.show-popover]:opacity-100",
-        !@clickable && tirgger_popover(),
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :for={trigger <- @trigger}
-        phx-click={show_popover(@id)}
-        phx-click-away={hide_popover(@id)}
-        id={"#{@id}-popover-trigger"}
-        class={["cursor-pointer popover-trigger", trigger[:class]]}
-        role="button"
-        aria-haspopup="tooltip"
-        aria-expanded="false"
-        aria-controls={"#{@id}-popover-content"}
-        {@rest}
-      >
-        {render_slot(trigger)}
-      </div>
-
-      <div
-        :for={content <- @content}
-        role="tooltip"
-        aria-labelledby={"#{@id}-popover-trigger"}
-        tabindex="-1"
-        id={"#{@id}-popover-content"}
-        class={[
-          "popover-content absolute z-10 w-full",
-          "transition-all ease-in-out delay-100 duratio-500",
-          space_class(@space),
-          color_variant(@variant, @color),
-          rounded_size(@rounded),
-          size_class(@size),
-          position_class(@position),
-          text_position(@text_position),
-          @variant == "bordered" || (@variant == "base" && border_class(@border)),
-          width_class(@width),
-          wrapper_padding(@padding),
-          @font_weight,
-          content[:class]
-        ]}
-        {@rest}
-      >
-        {render_slot(content)}
-        <span
-          :if={@show_arrow && @variant != "bordered" && @variant != "base"}
-          class={["block absolute size-[8px] bg-inherit rotate-45 -z-[1] popover-arrow"]}
-        >
-        </span>
-      </div>
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a `popover_trigger` element, which is used to show or hide a popover content element.
-  The trigger can be rendered as either an inline or block element. When the trigger is clicked,
-  it toggles the visibility of the associated popover content.
-
-  ## Examples
-
-  ```elixir
-  <p>
-    Discover more about
-    <.popover_trigger trigger_id="popover-1" inline class="text-blue-400">Italy</.popover_trigger>
-    by clicking on the name.
-    <.popover_content
-      id="popover-1"
-      inline
-      rounded="large"
-      width="quadruple_large"
-      color="light"
-      padding="none"
-      class="grid grid-cols-5"
-    >
-      <span class="block p-2 space-y-5 col-span-3">
-        <span class="font-semibold block">About Italy</span>
-        <span class="block">
-          Italy is located in the middle of the Mediterranean Sea, in Southern Europe, and it is also considered part of Western Europe. It is a unitary parliamentary republic with Rome as its capital and largest city.
-        </span>
-        <a href="/" class="block text-blue-400">Read more <.icon name="hero-link" /></a>
-      </span>
-      <img
-        src="https://flowbite.com/docs/images/popovers/italy.png"
-        class="h-full w-full col-span-2"
-        alt="Map of Italy"
-      />
-    </.popover_content>
-  </p>
-
-  <.popover_trigger trigger_id="popover-2" class="text-blue-400">
-    Hover or Click here to show the popover
-  </.popover_trigger>
-  <.popover_content id="popover-2" color="light" rounded="large" padding="medium">
-    <div class="p-4">
-      <h4 class="text-lg font-semibold">Popover Title</h4>
-      <p class="mt-2">This is a simple popover example with content that can be customized.</p>
-    </div>
-  </.popover_content>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :trigger_id, :string, required: true, doc: "Identifies what is the triggered element id"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :inline, :boolean, default: false, doc: "Determines whether this element is inline"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def popover_trigger(%{inline: true} = assigns) do
-    ~H"""
-    <span
-      id={"#{@trigger_id}-popover-trigger"}
-      phx-click-away={@trigger_id && hide_popover(@trigger_id)}
-      phx-click={@trigger_id && show_popover(@trigger_id)}
-      class={["inline-block cursor-pointer popover-trigger", @class]}
-      role="button"
-      aria-haspopup="tooltip"
-      aria-expanded="false"
-      aria-controls={"#{@trigger_id}-popover-content"}
-      tabindex="0"
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </span>
-    """
-  end
-
-  def popover_trigger(assigns) do
-    ~H"""
-    <div
-      id={"#{@trigger_id}-popover-trigger"}
-      phx-click-away={@trigger_id && hide_popover(@trigger_id)}
-      phx-click={@trigger_id && show_popover(@trigger_id)}
-      class={["cursor-pointer popover-trigger", @class]}
-      role="button"
-      aria-haspopup="tooltip"
-      aria-expanded="false"
-      aria-controls={"#{@trigger_id}-popover-content"}
-      tabindex="0"
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a `popover_content` element, which displays additional information when the associated
-  popover trigger is activated.
-
-  The content can be positioned relative to the trigger and customized with various styles,
-  such as color, padding, and size.
-
-  ## Examples
-
-  ```elixir
-  <.popover_content id="popover-3" inline position="top" color="dark" rounded="small" padding="small">
-    <span class="block text-white p-2">This is a tooltip message!</span>
-  </.popover_content>
-  ```
-  """
-  @doc type: :component
-  attr :trigger_id, :string, required: true, doc: "Identifies what is the triggered element id"
-  attr :inline, :boolean, default: false, doc: "Determines whether this element is inline"
-  attr :position, :string, default: "top", doc: "Determines the element position"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :show_arrow, :boolean, default: true, doc: "Show or hide arrow of popover"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :width, :string, default: "extra_large", doc: "Determines the element width"
-  attr :text_position, :string, default: "start", doc: "Determines the element' text position"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def popover_content(%{inline: true} = assigns) do
-    ~H"""
-    <span
-      role="tooltip"
-      aria-labelledby={"#{@trigger_id}-popover-trigger"}
-      tabindex="-1"
-      id={"#{@trigger_id}-popover-content"}
-      class={[
-        "popover-content absolute z-10 w-full",
-        "transition-all ease-in-out delay-100 duratio-500",
-        space_class(@space),
-        color_variant(@variant, @color),
-        rounded_size(@rounded),
-        size_class(@size),
-        position_class(@position),
-        text_position(@text_position),
-        @variant == "bordered" && border_class(@border),
-        width_class(@width),
-        wrapper_padding(@padding),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <span
-        :if={@show_arrow && @variant != "bordered" && @variant != "base"}
-        class={["block absolute size-[8px] bg-inherit rotate-45 -z-[1] popover-arrow"]}
-      >
-      </span>
-      {render_slot(@inner_block)}
-    </span>
-    """
-  end
-
-  def popover_content(assigns) do
-    ~H"""
-    <div
-      role="tooltip"
-      aria-labelledby={"#{@trigger_id}-popover-trigger"}
-      tabindex="-1"
-      id={"#{@trigger_id}-popover-content"}
-      class={[
-        "popover-content absolute z-10 w-full",
-        "transition-all ease-in-out delay-100 duratio-500",
-        space_class(@space),
-        color_variant(@variant, @color),
-        rounded_size(@rounded),
-        size_class(@size),
-        position_class(@position),
-        text_position(@text_position),
-        @variant == "bordered" && border_class(@border),
-        width_class(@width),
-        wrapper_padding(@padding),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <span
-        :if={@show_arrow && @variant != "bordered" && @variant != "base"}
-        class={["block absolute size-[8px] bg-inherit rotate-45 -z-[1] popover-arrow"]}
-      >
-      </span>
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  defp show_popover(js \\ %JS{}, id) when is_binary(id) do
-    js
-    |> JS.add_class("show-popover", to: "##{id}-popover-content")
-    |> JS.set_attribute({"aria-expanded", "true"}, to: "##{id}-trigger")
-  end
-
-  defp hide_popover(js \\ %JS{}, id) when is_binary(id) do
-    js
-    |> JS.remove_class("show-popover", to: "##{id}-popover-content")
-    |> JS.set_attribute({"aria-expanded", "false"}, to: "##{id}-trigger")
-  end
-
-  defp tirgger_popover(),
-    do: "[&_.popover-content]:hover:visible [&_.popover-content]:hover:opacity-100"
-
-  defp border_class("extra_small"), do: "border"
-
-  defp border_class("small"), do: "border-2"
-
-  defp border_class("medium"), do: "border-[3px]"
-
-  defp border_class("large"), do: "border-4"
-
-  defp border_class("extra_large"), do: "border-[5px]"
-
-  defp border_class("none"), do: nil
-
-  defp border_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp position_class("top") do
-    [
-      "bottom-full left-1/2 -translate-x-1/2 -translate-y-[6px]",
-      "[&>.popover-arrow]:-bottom-[4px] [&>.popover-arrow]:-translate-x-1/2 [&>.popover-arrow]:left-1/2"
-    ]
-  end
-
-  defp position_class("bottom") do
-    [
-      "top-full left-1/2 -translate-x-1/2 translate-y-[6px]",
-      "[&>.popover-arrow]:-top-[4px] [&>.popover-arrow]:-translate-x-1/2 [&>.popover-arrow]:left-1/2"
-    ]
-  end
-
-  defp position_class("left") do
-    [
-      "right-full top-1/2 -translate-y-1/2 -translate-x-[6px]",
-      "[&>.popover-arrow]:-right-[4px] [&>.popover-arrow]:translate-y-1/2 [&>.popover-arrow]:top-1/3"
-    ]
-  end
-
-  defp position_class("right") do
-    [
-      "left-full top-1/2 -translate-y-1/2 translate-x-[6px]",
-      "[&>.popover-arrow]:-left-[4px] [&>.popover-arrow]:translate-y-1/2 [&>.popover-arrow]:top-1/3"
-    ]
-  end
-
-  defp size_class("extra_small"), do: "text-xs max-w-60 [&_.popover-title-icon]:size-3"
-
-  defp size_class("small"), do: "text-sm max-w-64 [&_.popover-title-icon]:size-3.5"
-
-  defp size_class("medium"), do: "text-base max-w-72 [&_.popover-title-icon]:size-4"
-
-  defp size_class("large"), do: "text-lg max-w-80 [&_.popover-title-icon]:size-5"
-
-  defp size_class("extra_large"), do: "text-xl max-w-96 [&_.popover-title-icon]:size-6"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp text_position("left"), do: "text-left"
-  defp text_position("right"), do: "text-right"
-  defp text_position("center"), do: "text-center"
-  defp text_position("justify"), do: "text-justify"
-  defp text_position("start"), do: "text-start"
-  defp text_position("end"), do: "text-end"
-  defp text_position(params) when is_binary(params), do: params
-
-  defp width_class("extra_small"), do: "min-w-48"
-  defp width_class("small"), do: "min-w-52"
-  defp width_class("medium"), do: "min-w-56"
-  defp width_class("large"), do: "min-w-60"
-  defp width_class("extra_large"), do: "min-w-64"
-  defp width_class("double_large"), do: "min-w-72"
-  defp width_class("triple_large"), do: "min-w-80"
-  defp width_class("quadruple_large"), do: "min-w-96"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp wrapper_padding("extra_small") do
-    "[&:has(.popover-section)>.popover-section]:p-1 [&:not(:has(.popover-section))]:p-1"
-  end
-
-  defp wrapper_padding("small") do
-    "[&:has(.popover-section)>.popover-section]:p-2 [&:not(:has(.popover-section))]:p-2"
-  end
-
-  defp wrapper_padding("medium") do
-    "[&:has(.popover-section)>.popover-section]:p-3 [&:not(:has(.popover-section))]:p-3"
-  end
-
-  defp wrapper_padding("large") do
-    "[&:has(.popover-section)>.popover-section]:p-4 [&:not(:has(.popover-section))]:p-4"
-  end
-
-  defp wrapper_padding("extra_large") do
-    "[&:has(.popover-section)>.popover-section]:p-5 [&:not(:has(.popover-section))]:p-5"
-  end
-
-  defp wrapper_padding(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/progress.ex b/lib/geo_web/components/progress.ex
deleted file mode 100644
index d4c0021..0000000
--- a/lib/geo_web/components/progress.ex
+++ /dev/null
@@ -1,838 +0,0 @@
-defmodule GeoWeb.Components.Progress do
-  @moduledoc """
-  The `GeoWeb.Components.Progress` module provides a customizable progress bar component for
-  Phoenix LiveView applications.
-
-  It offers a range of styling options, including different sizes, colors, and variants,
-  allowing developers to create both horizontal and vertical progress bars tailored to
-  their design requirements.
-
-  This component supports a variety of visual configurations, such as gradient backgrounds
-  and rounded corners, and can be used in diverse use cases, from displaying loading states
-  to indicating progress in forms and surveys.
-
-  The module's flexibility is further enhanced by its use of `slots`, enabling developers
-  to include custom label within the progress bar, making it a versatile choice for building
-  interactive and dynamic UIs.
-  """
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-
-  @doc """
-  Renders a `progress` bar component that visually represents the completion status of a task.
-
-  It supports both horizontal and vertical orientations and can be customized with various colors and styles.
-
-  ## Examples
-
-  ```elixir
-  <.progress value={10} />
-  <.progress color="primary" value={20} />
-  <.progress color="secondary" value={30} />
-  <.progress variation="vertical" color="primary" value={20} />
-
-  <.progress>
-    <.progress_section color="primary" value={10} />
-    <.progress_section color="secondary" value={15} />
-    <.progress_section color="misc" value={10} />
-    <.progress_section color="danger" value={5} />
-    <.progress_section color="warning" value={10} />
-    <.progress_section color="success" value={10} />
-    <.progress_section color="info" value={5} />
-  </.progress>
-
-  <.progress variation="horizontal" size="large" value={70}>
-    <div class="absolute inset-y-0 left-0 flex items-center pl-3 text-white">
-      70%
-    </div>
-  </.progress>
-
-  <.progress variation="vertical" size="extra_large" value={80}>
-    <div class="absolute bottom-0 left-0 flex items-center text-white">
-      80%
-    </div>
-  </.progress>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :value, :integer, default: nil, doc: "Value of inout"
-
-  attr :variation, :string,
-    values: ["horizontal", "vertical"],
-    default: "horizontal",
-    doc: "Defines the layout orientation of the component"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "full", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :csp_nonce, :string, default: nil, doc: "csp nonce"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, doc: "Inner block that renders HEEx label"
-
-  def progress(assigns) do
-    ~H"""
-    <div
-      role="progressbar"
-      aria-valuenow={@value}
-      class={[
-        "bg-[#F4F4F4] dark:bg-[#B6B6B6] overflow-hidden",
-        @variation == "vertical" && "flex items-end vertical-progress overflow-y-hidden",
-        size_class(@size, @variation),
-        rounded_size(@rounded)
-      ]}
-      {@rest}
-    >
-      <.progress_section :if={@value} {assigns} />
-      <div
-        :if={msg = render_slot(@inner_block)}
-        class={[
-          "flex",
-          (@variation == "horizontal" && "flex-row") || "flex-col flex-col-reverse w-full h-full"
-        ]}
-      >
-        {msg}
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  Displays a semicircular progress indicator.
-
-  ## Attributes
-    - value: The progress value (0 to 100)
-    - size: The SVG size (width), default is 100
-    - thickness: The stroke width of the circle, default is 10
-    - color: Determines the color theme; default is "natural"
-  """
-  attr :id, :string, default: nil, doc: "HTML ID for the container"
-  attr :value, :integer, required: true, doc: "Progress value (0 to 100)"
-  attr :size, :integer, default: 200, doc: "Diameter of the circle in px"
-  attr :thickness, :integer, default: 12, doc: "Stroke width"
-  attr :orientation, :string, default: "up", doc: "'up' or 'down'"
-  attr :fill_direction, :string, default: "left-to-right", doc: "Direction of fill"
-  attr :transition_duration, :integer, default: 300, doc: "Transition duration in ms"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :linecap, :string, default: nil, doc: "add radius to progress"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-
-  attr :label, :string, default: nil, doc: "Optional label"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def semi_circle_progress(assigns) do
-    coordinate = assigns.size / 2
-    radius = (assigns.size - 2 * assigns.thickness) / 2
-    circumference = :math.pi() * radius
-    progress = clamp(assigns.value, 0, 100) * (circumference / 100)
-
-    assigns =
-      assigns
-      |> assign(:coordinate, coordinate)
-      |> assign(:radius, radius)
-      |> assign(:circumference, circumference)
-      |> assign(:progress, progress)
-
-    ~H"""
-    <div
-      id={@id}
-      role="progressbar"
-      aria-valuenow={@value}
-      class={[
-        "relative overflow-hidden w-fit",
-        color_variant(nil, @color),
-        @class
-      ]}
-      {@rest}
-    >
-      <svg
-        width={@size}
-        height={@size / 2}
-        viewBox={"0 0 #{@size} #{@size / 2}"}
-        class={["block", progress_rotation_class(@orientation, @fill_direction)]}
-      >
-        <circle
-          cx={@coordinate}
-          cy={@coordinate}
-          r={@radius}
-          fill="none"
-          class="semi-circle-progress-base stroke-[#f4f4f4] dark:stroke-[#b6b6b6]"
-          stroke-width={@thickness}
-          stroke-dasharray={@circumference}
-          stroke-dashoffset={@circumference}
-        />
-
-        <circle
-          cx={@coordinate}
-          cy={@coordinate}
-          r={@radius}
-          fill="none"
-          stroke-linecap={@linecap}
-          stroke-width={@thickness}
-          stroke-dasharray={@circumference}
-          stroke-dashoffset={@progress}
-          class={[
-            "semi-circle-progress-bar transition-all ease-in-out",
-            "duration-[#{@transition_duration}ms]",
-            @color
-          ]}
-        />
-      </svg>
-
-      <div
-        :if={@label || @value}
-        class={[
-          "z-10 absolute left-1/2 transform -translate-x-1/2 font-medium",
-          @orientation == "up" && "top-1/2",
-          @orientation == "down" && "top-0  translate-y-1/2"
-        ]}
-      >
-        {@label || "#{@value}%"}
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  A function component that displays a ring progress bar.
-
-  Usage:
-      <.ring_progress id="example" value={50} />
-
-  Attributes:
-    - id: unique identifier (required)
-    - value: current progress value (required)
-    - max: maximum progress value (default is 100)
-    - size: size of the SVG (width and height, default is 120)
-    - thickness: width of the circle stroke (default is 10)
-    - progress_color: stroke color for the progress circle (default is "#00aaff")
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier used to manage state and interaction."
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-
-  attr :value, :integer,
-    required: true,
-    doc: "The current value representing the progress completion (e.g., between 0 and max)."
-
-  attr :max, :integer,
-    default: 100,
-    doc: "The maximum value the progress can reach. Default is 100."
-
-  attr :size, :integer,
-    default: 120,
-    doc: "The overall size of the progress element, typically in pixels. Default is 120."
-
-  attr :thickness, :integer,
-    default: 10,
-    doc: "The thickness of the progress stroke in pixels. Default is 10."
-
-  attr :label, :string,
-    default: nil,
-    doc: "Optional label to be displayed along with the progress element."
-
-  attr :class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling."
-
-  attr :linecap, :string,
-    default: nil,
-    doc: "Controls the shape of the stroke ends. Use 'round' for rounded corners."
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def ring_progress(assigns) do
-    radius = (assigns.size - assigns.thickness) / 2
-    circumference = 2 * :math.pi() * radius
-    progress_fraction = (assigns.max > 0 && assigns.value / assigns.max) || 0
-    dash_offset = circumference * (1 - progress_fraction)
-
-    assigns =
-      assigns
-      |> assign(:radius, radius)
-      |> assign(:circumference, circumference)
-      |> assign(:dash_offset, dash_offset)
-
-    ~H"""
-    <div
-      id={@id}
-      role="progressbar"
-      aria-valuenow={@value}
-      class={["circular-progress", color_variant(nil, @color), @class]}
-      {@rest}
-    >
-      <svg width={@size} height={@size} viewBox={"0 0 #{@size} #{@size}"}>
-        <circle
-          cx={@size / 2}
-          cy={@size / 2}
-          r={@radius}
-          class="semi-circle-progress-base stroke-[#F4F4F4] dark:stroke-[#B6B6B6]"
-          stroke-width={@thickness}
-          fill="none"
-        />
-        <circle
-          cx={@size / 2}
-          cy={@size / 2}
-          r={@radius}
-          stroke-width={@thickness}
-          class="semi-circle-progress-bar"
-          fill="none"
-          stroke-linecap={@linecap}
-          stroke-dasharray={@circumference}
-          stroke-dashoffset={@dash_offset}
-          transform={"rotate(-90, #{@size / 2}, #{@size / 2})"}
-        />
-        <text
-          x="50%"
-          y="50%"
-          dominant-baseline="central"
-          text-anchor="middle"
-          class="ring-progress-text font-semibold fill-current"
-        >
-          {@label || "#{@value}%"}
-        </text>
-      </svg>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a section of a progress bar component (`progress_section`).
-
-  Each section represents a part of the progress with its own value and color, allowing for
-  segmented progress bars.
-
-  ## Examples
-
-  ```elixir
-  <.progress>
-    <.progress_section color="primary" value={10} />
-    <.progress_section color="secondary" value={15} />
-    <.progress_section color="misc" value={10} />
-    <.progress_section color="danger" value={5} />
-    <.progress_section color="warning" value={10} />
-    <.progress_section color="success" value={10} />
-    <.progress_section color="info" value={5} />
-  </.progress>
-  ```
-  """
-  @doc type: :component
-  attr :value, :integer, default: 0, doc: ""
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :variation, :string,
-    values: ["horizontal", "vertical"],
-    default: "horizontal",
-    doc: "Defines the layout orientation of the component"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :csp_nonce, :string, default: nil, doc: "csp nonce"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :label, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  slot :tooltip, required: false do
-    attr :label, :string, doc: "Determines element's text"
-    attr :position, :string, doc: "Determines element's position"
-    attr :clickable, :boolean, doc: "Determines element's click"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  def progress_section(assigns) do
-    assigns =
-      assigns
-      |> assign_new(:tooltip, fn -> [] end)
-      |> assign(:value, (is_integer(assigns.value) && assigns.value) || 0)
-      |> assign_new(:id, fn -> random_id() end)
-
-    ~H"""
-    <.progress_section_with_tooltip :if={is_list(@tooltip) and @tooltip != []} {assigns} />
-    <.progress_section_simple :if={@tooltip == [] or @tooltip == nil} {assigns} />
-    """
-  end
-
-  defp progress_section_with_tooltip(assigns) do
-    ~H"""
-    <style :if={@csp_nonce} nonce={@csp_nonce}>
-      #<%= @id %> {
-        <%= if @variation == "horizontal" do %>
-          width: <%= @value %>%;
-        <% else %>
-          height: <%= @value %>%;
-        <% end %>
-      }
-    </style>
-
-    <div
-      phx-mounted={
-        is_nil(@csp_nonce) &&
-          JS.set_attribute({"style", dimension_style(@variation, @value)})
-      }
-      id={@id}
-      role="presentation"
-      aria-hidden="true"
-      class={[
-        "progress-section cursor-pointer",
-        @variation == "vertical" && "progress-vertical",
-        @variation == "horizontal" && "flex justify-center items-center",
-        color_variant(@variant, @color),
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :for={tooltip <- @tooltip}
-        id={"tooltip-wrapper-#{@id}"}
-        phx-hook="Floating"
-        data-floating-type="tooltip"
-        data-position={Map.get(tooltip, :position, "top")}
-        data-smart-position="false"
-        data-clickable={to_string(tooltip[:clickable])}
-        aria-describedby={"#{@id}-tooltip"}
-        class={[
-          "w-full h-full",
-          tooltip[:class]
-        ]}
-      >
-        <div
-          data-floating-trigger="true"
-          aria-describedby={"#{@id}-tooltip"}
-          class={[
-            "w-full h-full flex items-center justify-center",
-            @variation == "vertical" && "w-full"
-          ]}
-        >
-          {tooltip[:label]}
-        </div>
-
-        <div
-          id={"#{@id}-tooltip"}
-          role="tooltip"
-          data-floating-content="true"
-          aria-hidden="false"
-          role="tooltip"
-          tabindex="0"
-          aria-live="polite"
-          hidden
-          id={"#{@id}-tooltip"}
-          class={[
-            "absolute z-50 transition-all ease-in-out delay-100 duration-200 w-fit max-w-52",
-            "progress-tooltip p-1 text-center bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black rounded",
-            tooltip[:class]
-          ]}
-        >
-          <span class={[
-            "block absolute size-[8px] bg-inherit rotate-45 -z-[1] tooltip-arrow",
-            position_class(tooltip[:position])
-          ]}>
-          </span>
-          {render_slot(tooltip)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp progress_section_simple(assigns) do
-    ~H"""
-    <style :if={@csp_nonce} nonce={@csp_nonce}>
-      #<%= @id %> {
-        <%= if @variation == "horizontal" do %>
-          width: <%= @value %>%;
-        <% else %>
-          height: <%= @value %>%;
-        <% end %>
-      }
-    </style>
-
-    <div
-      phx-mounted={
-        is_nil(@csp_nonce) &&
-          JS.set_attribute({"style", dimension_style(@variation, @value)})
-      }
-      id={@id}
-      role="presentation"
-      aria-hidden="true"
-      class={[
-        "w-full progress-section",
-        if(@variation == "vertical", do: "progress-vertical"),
-        if(@variation == "horizontal" && !is_nil(@label),
-          do: "flex justify-center items-center [&_span]:text-[11px]"
-        ),
-        color_variant(@variant, @color),
-        @class
-      ]}
-      {@rest}
-    >
-      <span :for={label <- @label} class={label[:class]} aria-hidden="false">
-        {render_slot(label)}
-      </span>
-    </div>
-    """
-  end
-
-  defp dimension_style("horizontal", value), do: "width: #{value}%;"
-  defp dimension_style("vertical", value), do: "height: #{value}%;"
-
-  defp position_class("top") do
-    [
-      "-bottom-[3px] -translate-x-1/2 left-1/2"
-    ]
-  end
-
-  defp position_class("bottom") do
-    [
-      "-top-[3px] -translate-x-1/2 left-1/2"
-    ]
-  end
-
-  defp position_class("left") do
-    [
-      "-right-[3px] -translate-y-1/2 top-1/2"
-    ]
-  end
-
-  defp position_class("right") do
-    [
-      "-left-[3px] -translate-y-1/2 top-1/2"
-    ]
-  end
-
-  defp position_class(_), do: position_class("top")
-
-  defp rounded_size("extra_small") do
-    "rounded-sm [&:not(.vertical-progress)_.progress-section:last-of-type]:rounded-e-sm"
-  end
-
-  defp rounded_size("small") do
-    "rounded [&:not(.vertical-progress)_.progress-section:last-of-type]:rounded-e"
-  end
-
-  defp rounded_size("medium") do
-    "rounded-md [&:not(.vertical-progress)_.progress-section:last-of-type]:rounded-e-md"
-  end
-
-  defp rounded_size("large") do
-    "rounded-lg [&:not(.vertical-progress)_.progress-section:last-of-type]:rounded-e-lg"
-  end
-
-  defp rounded_size("extra_large") do
-    "rounded-xl [&:not(.vertical-progress)_.progress-section:last-of-type]:rounded-e-xl"
-  end
-
-  defp rounded_size("full") do
-    "rounded-full [&:not(.vertical-progress)_.progress-section:last-of-type]:rounded-e-full"
-  end
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small", "horizontal"), do: "text-xs h-1.5 [&>*]:h-1.5"
-
-  defp size_class("small", "horizontal"), do: "text-sm h-2 [&>*]:h-2"
-
-  defp size_class("medium", "horizontal"), do: "text-base h-3 [&>*]:h-3"
-
-  defp size_class("large", "horizontal"), do: "text-lg h-4 [&>*]:h-4"
-
-  defp size_class("extra_large", "horizontal"), do: "text-xl h-5 [&>*]:h-5"
-
-  defp size_class("double_large", "horizontal"), do: "text-xl h-6 [&>*]:h-6"
-
-  defp size_class("triple_large", "horizontal"), do: "text-xl h-7 [&>*]:h-7"
-
-  defp size_class("quadruple_large", "horizontal"), do: "text-xl h-8 [&>*]:h-8"
-
-  defp size_class("extra_small", "vertical"), do: "text-xs w-1 h-[5rem]"
-
-  defp size_class("small", "vertical"), do: "text-sm w-2 h-[6rem]"
-
-  defp size_class("medium", "vertical"), do: "text-base w-3 h-[7rem]"
-
-  defp size_class("large", "vertical"), do: "text-lg w-4 h-[8rem]"
-
-  defp size_class("extra_large", "vertical"), do: "text-xl w-5 h-[9rem]"
-
-  defp size_class("double_large", "vertical"), do: "text-xl w-6 h-[10rem]"
-
-  defp size_class("triple_large", "vertical"), do: "text-xl w-7 h-[11rem]"
-
-  defp size_class("quadruple_large", "vertical"), do: "text-xl w-8  h-[12rem]"
-
-  defp size_class(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "text-[#09090b] bg-[#e4e4e7] dark:text-[#FAFAFA] dark:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#282828] [&:not(.progress-vertical)]:via-[#727272] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#727272] [&.progress-vertical]:via-[#727272]",
-      "dark:[&:not(.progress-vertical)]:from-[#A6A6A6] dark:[&:not(.progress-vertical)]:via-[#FFFFFF] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#A6A6A6] dark:[&.progress-vertical]:via-[#A6A6A6] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#016974] [&:not(.progress-vertical)]:via-[#01B8CA] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#01B8CA] [&.progress-vertical]:via-[#01B8CA]",
-      "dark:[&:not(.progress-vertical)]:from-[#01B8CA] dark:[&:not(.progress-vertical)]:via-[#B0E7EF] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#B0E7EF] dark:[&.progress-vertical]:via-[#B0E7EF] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#175BCC] [&:not(.progress-vertical)]:via-[#6DAAFB] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#6DAAFB] [&.progress-vertical]:via-[#6DAAFB]",
-      "dark:[&:not(.progress-vertical)]:from-[#6DAAFB] dark:[&:not(.progress-vertical)]:via-[#CDDEFF] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#CDDEFF] dark:[&.progress-vertical]:via-[#CDDEFF] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#166C3B] [&:not(.progress-vertical)]:via-[#06C167] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#06C167] [&.progress-vertical]:via-[#06C167]",
-      "dark:[&:not(.progress-vertical)]:from-[#06C167] dark:[&:not(.progress-vertical)]:via-[#B1EAC2] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#B1EAC2] dark:[&.progress-vertical]:via-[#B1EAC2] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#976A01] [&:not(.progress-vertical)]:via-[#FDC034] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#976A01] [&.progress-vertical]:via-[#976A01]",
-      "dark:[&:not(.progress-vertical)]:from-[#FDC034] dark:[&:not(.progress-vertical)]:via-[#FEDF99] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#FEDF99] dark:[&.progress-vertical]:via-[#FEDF99] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#BB032A] [&:not(.progress-vertical)]:via-[#FC7F79] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#FC7F79] [&.progress-vertical]:via-[#FC7F79]",
-      "dark:[&:not(.progress-vertical)]:from-[#FC7F79] dark:[&:not(.progress-vertical)]:via-[#FFD2CD] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#FFD2CD] dark:[&.progress-vertical]:via-[#FFD2CD] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#08638C] [&:not(.progress-vertical)]:via-[#3EB7ED] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#3EB7ED] [&.progress-vertical]:via-[#3EB7ED]",
-      "dark:[&:not(.progress-vertical)]:from-[#3EB7ED] dark:[&:not(.progress-vertical)]:via-[#9FDBF6] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#9FDBF6] dark:[&.progress-vertical]:via-[#9FDBF6] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#653C94] [&:not(.progress-vertical)]:via-[#BA83F9] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#BA83F9] [&.progress-vertical]:via-[#BA83F9]",
-      "dark:[&:not(.progress-vertical)]:from-[#BA83F9] dark:[&:not(.progress-vertical)]:via-[#DDC1FC] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#DDC1FC] dark:[&.progress-vertical]:via-[#DDC1FC] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#7E4B2A] [&:not(.progress-vertical)]:via-[#DB976B] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#DB976B] [&.progress-vertical]:via-[#DB976B]",
-      "dark:[&:not(.progress-vertical)]:from-[#DB976B] dark:[&:not(.progress-vertical)]:via-[#EDCBB5] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#EDCBB5] dark:[&.progress-vertical]:via-[#EDCBB5] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&:not(.progress-vertical)]:bg-gradient-to-r rtl:[&:not(.progress-vertical)]:bg-gradient-to-l",
-      "[&:not(.progress-vertical)]:from-[#5E5E5E] [&:not(.progress-vertical)]:via-[#A6A6A6] [&:not(.progress-vertical)]:to-[#e9ecef] text-white",
-      "[&.progress-vertical]:bg-gradient-to-b [&.progress-vertical]:from-[#e9ecef] [&.progress-vertical]:to-[#5E5E5E] [&.progress-vertical]:via-[#5E5E5E]",
-      "dark:[&:not(.progress-vertical)]:from-[#868686] dark:[&:not(.progress-vertical)]:via-[#BBBBBB] dark:[&:not(.progress-vertical)]:to-[#e9ecef] text-black",
-      "dark:[&.progress-vertical]:to-[#BBBBBB] dark:[&.progress-vertical]:via-[#BBBBBB] dark:[&.progress-vertical]:from-[#e9ecef]"
-    ]
-  end
-
-  defp color_variant(nil, "natural") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#4B4B4B] dark:[&_.semi-circle-progress-bar]:stroke-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant(nil, "primary") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#007F8C] dark:[&_.semi-circle-progress-bar]:stroke-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant(nil, "secondary") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#266EF1] dark:[&_.semi-circle-progress-bar]:stroke-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant(nil, "success") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#0E8345] dark:[&_.semi-circle-progress-bar]:stroke-[#06C167]"
-    ]
-  end
-
-  defp color_variant(nil, "warning") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#CA8D01] dark:[&_.semi-circle-progress-bar]:stroke-[#FDC034]"
-    ]
-  end
-
-  defp color_variant(nil, "danger") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#DE1135] dark:[&_.semi-circle-progress-bar]:stroke-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant(nil, "info") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#0B84BA] dark:[&_.semi-circle-progress-bar]:stroke-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant(nil, "misc") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#8750C5] dark:[&_.semi-circle-progress-bar]:stroke-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant(nil, "dawn") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#A86438] dark:[&_.semi-circle-progress-bar]:stroke-[#DB976B]"
-    ]
-  end
-
-  defp color_variant(nil, "silver") do
-    [
-      "[&_.semi-circle-progress-bar]:stroke-[#868686] dark:[&_.semi-circle-progress-bar]:stroke-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp progress_rotation_class("down", "right-to-left"), do: "rotate-180 scale-x-[-1]"
-  defp progress_rotation_class("down", _), do: "rotate-180"
-  defp progress_rotation_class("up", "left-to-right"), do: "scale-x-[-1]"
-  defp progress_rotation_class(_, _), do: ""
-
-  defp clamp(val, min, max), do: max(min, min(val, max))
-end
diff --git a/lib/geo_web/components/radio_card.ex b/lib/geo_web/components/radio_card.ex
deleted file mode 100644
index 550771a..0000000
--- a/lib/geo_web/components/radio_card.ex
+++ /dev/null
@@ -1,880 +0,0 @@
-defmodule GeoWeb.Components.RadioCard do
-  @moduledoc """
-  The `GeoWeb.Components.RadioCard` module provides a customizable radio card component for Phoenix LiveView
-  applications. This component extends beyond basic radio buttons by offering a card-based interface
-  with rich styling options.
-
-  ## Key Features
-  - Multiple visual variants: base, default, outline, shadow, and bordered
-  - Comprehensive color themes including natural, primary, secondary, etc.
-  - Customizable borders, padding, and spacing
-  - Support for icons and descriptions within cards
-  - Grid layout options for organizing multiple cards
-  - Built-in dark mode support
-  - Accessible form integration
-
-  ## Example Usage
-  ```heex
-  <.radio_card name="plan" class="w-full" icon="hero-home">
-    <:radio value="basic" title="Basic Plan" description="For small teams">
-    </:radio>
-    <:radio value="pro" title="Pro Plan" description="For growing businesses">
-    </:radio>
-    <:radio value="pro">
-      <p>$25/month</p>
-    </:radio>
-  </.radio_card>
-  ```
-
-  The component handles form integration automatically when used with Phoenix.HTML.Form fields
-  and includes built-in error handling and validation display.
-  """
-  use Phoenix.Component
-  alias Phoenix.HTML.Form
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines variant theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "medium", doc: "Radius size"
-  attr :padding, :string, default: "small", doc: "Padding size"
-  attr :space, :string, default: "small", doc: "Determines space between elements"
-  attr :cols, :string, default: "one", doc: "Determines cols of elements"
-  attr :cols_gap, :string, default: "small", doc: "Determines gap between elements"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :show_radio, :boolean, default: false, doc: "Boolean to show and hide radio"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-
-  attr :field_label_wrapper, :string,
-    default: nil,
-    doc: "Custom CSS class for the field label wrapper"
-
-  attr :description_class, :string,
-    default: "text-[12px]",
-    doc: "Custom CSS class for the description"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :rest, :global,
-    include:
-      ~w(autocomplete disabled form indeterminate multiple readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  slot :radio, required: true do
-    attr :value, :string, required: true
-    attr :checked, :boolean, required: false
-    attr :icon, :string, doc: "Icon displayed alongside of a radio"
-    attr :title, :string, required: false
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :radio_wrapper_class, :string, doc: "Custom CSS class for the wrapper of radio"
-    attr :description_class, :string, doc: "Determines custom class for the description"
-    attr :title_class, :string, doc: "Determines custom class for the title"
-    attr :description, :string, required: false
-    attr :card_label_class, :string, doc: "Custom CSS class for the wrapper of card label"
-    attr :content_class, :string, doc: "Determines custom class for the content"
-    attr :content_wrapper_class, :string, doc: "Determines custom class for the content wrapper"
-    attr :radio_input_class, :string, doc: "Custom CSS class for styling the radio input"
-  end
-
-  slot :inner_block
-
-  @spec radio_card(map()) :: Phoenix.LiveView.Rendered.t()
-  def radio_card(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> radio_card()
-  end
-
-  def radio_card(assigns) do
-    ~H"""
-    <div class={["leading-5", space_class(@space), @class]} {@rest}>
-      <input type="hidden" name={@name} value="" disabled={@rest[:disabled]} />
-
-      <div :if={@label || @description} class={["radio-card-label-wrapper", @field_label_wrapper]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div
-        class={["grid", grid_cols(@cols), grid_gap(@cols_gap), @wrapper_class]}
-        role="radiogroup"
-        aria-labelledby={@id && "#{@id}-label"}
-        aria-describedby={@id && "#{@id}-desc"}
-      >
-        <label
-          :for={{radio, index} <- Enum.with_index(@radio, 1)}
-          for={"#{@id}-#{index}"}
-          class={[
-            "radio-card-wrapper flex items-start cursor-pointer",
-            "has-[:disabled]:pointer-events-none has-[:disabled]:opacity-50",
-            "has-[:focus-visible]:outline has-[:focus-visible]:outline-2 has-[:focus-visible]:outline-blue-400",
-            "has-[:focus-visible]:outline-offset-[-2px] transition-all",
-            @reverse && "flex-row-reverse",
-            border_class(@border, @variant),
-            color_variant(@variant, @color),
-            rounded_size(@rounded),
-            padding_size(@padding),
-            size_class(@size),
-            radio[:radio_wrapper_class]
-          ]}
-          {@rest}
-        >
-          <input
-            type="radio"
-            aria-checked={radio[:checked]}
-            aria-labelledby={"#{@id}-#{index}-title"}
-            aria-describedby={"#{@id}-#{index}-desc"}
-            name={@name}
-            id={"#{@id}-#{index}"}
-            value={radio[:value]}
-            checked={radio[:checked]}
-            class={[
-              "radio-card-input shrink-0 focus:ring-0 focus:ring-offset-0 appearance-none",
-              "disabled:opacity-50",
-              !@show_radio && "opacity-0 absolute",
-              radio[:radio_input_class]
-            ]}
-          />
-          <div
-            data-part="label"
-            class={["radio-card-content-wrapper flex-1", radio[:card_label_class]]}
-          >
-            <div
-              :if={!is_nil(radio[:icon]) || radio[:title] || radio[:description]}
-              class={["radio-slot-content", radio[:content_wrapper_class]]}
-            >
-              <.icon
-                :if={!is_nil(radio[:icon])}
-                name={radio[:icon]}
-                class={["block mx-auto", radio[:icon_class]]}
-              />
-              <div
-                :if={radio[:title]}
-                class={["block radio-card-title leading-[16px] font-semibold", radio[:title_class]]}
-              >
-                {radio[:title]}
-              </div>
-
-              <p
-                :if={radio[:description]}
-                class={["radio-card-description", radio[:description_class]]}
-              >
-                {radio[:description]}
-              </p>
-            </div>
-            <div class={["radio-card-content leading-[17px]", radio[:content_class]]}>
-              {render_slot(radio)}
-            </div>
-          </div>
-        </label>
-      </div>
-    </div>
-
-    <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    """
-  end
-
-  def radio_card_check(:list, {field, value}, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      new_value = if is_atom(value), do: Atom.to_string(value), else: value
-      new_value == params[Atom.to_string(field)]
-    else
-      Map.get(data, field) == value
-    end
-  end
-
-  def radio_card_check(:boolean, field, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      Form.normalize_value("radio", params[Atom.to_string(field)])
-    else
-      Map.get(data, field, false)
-    end
-  end
-
-  attr :id, :string, default: nil, doc: "Unique identifire"
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-4 font-semibold", @class]} id={@id}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-[14px] text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" /> {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp border_class(_, variant) when variant in ["default", "shadow"],
-    do: nil
-
-  defp border_class("none", _), do: nil
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "py-1 px-2"
-
-  defp padding_size("small"), do: "py-2 px-3"
-
-  defp padding_size("medium"), do: "py-3 px-4"
-
-  defp padding_size("large"), do: "py-4 px-5"
-
-  defp padding_size("extra_large"), do: "py-5 px-6"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp grid_cols("one"), do: "grid-cols-1"
-  defp grid_cols("two"), do: "grid-cols-2"
-  defp grid_cols("three"), do: "grid-cols-2 md:grid-cols-3"
-  defp grid_cols("four"), do: "grid-cols-2 md:grid-cols-4"
-  defp grid_cols("five"), do: "grid-cols-2 md:grid-cols-5"
-  defp grid_cols("six"), do: "grid-cols-2 md:grid-cols-6"
-  defp grid_cols("seven"), do: "grid-cols-2 md:grid-cols-7"
-  defp grid_cols("eight"), do: "grid-cols-2 md:grid-cols-8"
-  defp grid_cols("nine"), do: "grid-cols-2 md:grid-cols-9"
-  defp grid_cols("ten"), do: "grid-cols-2 md:grid-cols-10"
-  defp grid_cols("eleven"), do: "grid-cols-2 md:grid-cols-11"
-  defp grid_cols("twelve"), do: "grid-cols-2 md:grid-cols-12"
-  defp grid_cols(params) when is_binary(params), do: params
-
-  defp grid_gap("extra_small"), do: "gap-1"
-  defp grid_gap("small"), do: "gap-2"
-  defp grid_gap("medium"), do: "gap-3"
-  defp grid_gap("large"), do: "gap-4"
-  defp grid_gap("extra_large"), do: "gap-5"
-  defp grid_gap(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "text-[13px]",
-      "[&_.radio-card-icon]:size-5",
-      "[&_.radio-card-description]:text-[11px]"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "text-[14px]",
-      "[&_.radio-card-icon]:size-6",
-      "[&_.radio-card-description]:text-[12px]"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "text-[15px]",
-      "[&_.radio-card-icon]:size-7",
-      "[&_.radio-card-description]:text-[13px]"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "text-[16px]",
-      "[&_.radio-card-icon]:size-8",
-      "[&_.radio-card-description]:text-[14px]"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "text-[17px]",
-      "[&_.radio-card-icon]:size-9",
-      "[&_.radio-card-description]:text-[15px]"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small") do
-    [
-      "[&_.radio-card-label-wrapper]:space-y-1",
-      "[&_.radio-card-label-wrapper]:mb-1",
-      "[&_.radio-card-wrapper]:gap-1 [&_.radio-slot-content]:gap-1"
-    ]
-  end
-
-  defp space_class("small") do
-    [
-      "[&_.radio-card-label-wrapper]:space-y-1.5",
-      "[&_.radio-card-label-wrapper]:mb-2",
-      "[&_.radio-card-wrapper]:gap-2 [&_.radio-slot-content]:gap-2"
-    ]
-  end
-
-  defp space_class("medium") do
-    [
-      "[&_.radio-card-label-wrapper]:space-y-2",
-      "[&_.radio-card-label-wrapper]:mb-3",
-      "[&_.radio-card-wrapper]:gap-3 [&_.radio-slot-content]:gap-3"
-    ]
-  end
-
-  defp space_class("large") do
-    [
-      "[&_.radio-card-label-wrapper]:space-y-2.5",
-      "[&_.radio-card-label-wrapper]:mb-4",
-      "[&_.radio-card-wrapper]:gap-4 [&_.radio-slot-content]:gap-4"
-    ]
-  end
-
-  defp space_class("extra_large") do
-    [
-      "[&_.radio-card-label-wrapper]:space-y-3",
-      "[&_.radio-card-label-wrapper]:mb-5",
-      "[&_.radio-card-wrapper]:gap-5 [&_.radio-slot-content]:gap-5"
-    ]
-  end
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]",
-      "checked:[&_.radio-card-input]:text-[#09090b]",
-      "dark:checked:[&_.radio-card-input]:text-[#757373]",
-      "[&_.radio-card-input]:border-[#e4e4e7] dark:[&_.radio-card-input]:border-[#27272a]",
-      "[&_.radio-card-input:checked]:border-[#09090b] dark:[&_.radio-card-input:checked]:border-[#27272a]",
-      "has-[:checked]:bg-[#F8F9FA] dark:has-[:checked]:bg-[#242424]",
-      "has-[:checked]:border-[#09090b] dark:has-[:checked]:border-[#757373]",
-      "[&_.radio-card-input:not(:checked)]:bg-white dark:[&_.radio-card-input:not(:checked)]:bg-[#333]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black",
-      "checked:[&_.radio-card-input]:text-black",
-      "[&_.radio-card-input]:border-black",
-      "has-[:checked]:bg-[#ede8e8]"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white",
-      "checked:[&_.radio-card-input]:text-white",
-      "[&_.radio-card-input]:border-white",
-      "has-[:checked]:bg-[#616060]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#5E5E5E]",
-      "dark:checked:[&_.radio-card-input]:text-[#BBBBBB]",
-      "[&_.radio-card-input]:border-[#e4e4e7] dark:[&_.radio-card-input]:border-[#27272a]",
-      "has-[:checked]:bg-[#282828] dark:has-[:checked]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#0095A4]",
-      "[&_.radio-card-input]:border-[#0095A4]",
-      "has-[:checked]:bg-[#77D5E3] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#068BEE]",
-      "[&_.radio-card-input]:border-[#068BEE]",
-      "has-[:checked]:bg-[#175BCC] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#009A51]",
-      "[&_.radio-card-input]:border-[#009A51]",
-      "has-[:checked]:bg-[#166C3B] dark:has-[:checked]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#FCB001]",
-      "[&_.radio-card-input]:border-[#FCB001]",
-      "has-[:checked]:bg-[#976A01] dark:has-[:checked]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#F83446]",
-      "[&_.radio-card-input]:border-[#F83446]",
-      "has-[:checked]:bg-[#BB032A] dark:has-[:checked]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#0EA5E9]",
-      "[&_.radio-card-input]:border-[#0EA5E9]",
-      "has-[:checked]:bg-[#08638C] dark:has-[:checked]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#A964F7]",
-      "[&_.radio-card-input]:border-[#A964F7]",
-      "has-[:checked]:bg-[#653C94] dark:has-[:checked]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#D27D46]",
-      "[&_.radio-card-input]:border-[#D27D46]",
-      "has-[:checked]:bg-[#7E4B2A] dark:has-[:checked]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "checked:[&_.radio-card-input]:text-[#A6A6A6]",
-      "[&_.radio-card-input]:border-[#A6A6A6]",
-      "has-[:checked]:bg-[#727272] dark:has-[:checked]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B] dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "checked:[&_.radio-card-input]:text-[#DDDDDD]",
-      "[&_.radio-card-input]:border-[#DDDDDD]",
-      "dark:checked:[&_.radio-card-input]:text-[#4B4B4B]",
-      "dark:[&_.radio-card-input]:border-[#4B4B4B]",
-      "has-[:checked]:border-black dark:has-[:checked]:border-white"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]  dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "checked:[&_.radio-card-input]:text-[#007F8C]",
-      "[&_.radio-card-input]:border-[#007F8C]",
-      "dark:checked:[&_.radio-card-input]:text-[#01B8CA]",
-      "dark:[&_.radio-card-input]:border-[#01B8CA]",
-      "has-[:checked]:border-[#1A535A] dark:has-[:checked]:border-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1] dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "checked:[&_.radio-card-input]:text-[#266EF1]",
-      "[&_.radio-card-input]:border-[#266EF1]",
-      "dark:checked:[&_.radio-card-input]:text-[#6DAAFB]",
-      "dark:[&_.radio-card-input]:border-[#6DAAFB]",
-      "has-[:checked]:border-[#1948A3] dark:has-[:checked]:border-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345] dark:text-[#06C167] dark:border-[#06C167]",
-      "checked:[&_.radio-card-input]:text-[#0E8345]",
-      "[&_.radio-card-input]:border-[#0E8345]",
-      "dark:checked:[&_.radio-card-input]:text-[#06C167]",
-      "dark:[&_.radio-card-input]:border-[#06C167]",
-      "has-[:checked]:border-[#0D572D] dark:has-[:checked]:border-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01] dark:text-[#FDC034] dark:border-[#FDC034]",
-      "checked:[&_.radio-card-input]:text-[#CA8D01]",
-      "[&_.radio-card-input]:border-[#CA8D01]",
-      "dark:checked:[&_.radio-card-input]:text-[#FDC034]",
-      "dark:[&_.radio-card-input]:border-[#FDC034]",
-      "has-[:checked]:border-[#654600] dark:has-[:checked]:border-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135] dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "checked:[&_.radio-card-input]:text-[#DE1135]",
-      "[&_.radio-card-input]:border-[#DE1135]",
-      "dark:checked:[&_.radio-card-input]:text-[#FC7F79]",
-      "dark:[&_.radio-card-input]:border-[#FC7F79]",
-      "has-[:checked]:border-[#950F22] dark:has-[:checked]:border-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "checked:[&_.radio-card-input]:text-[#0B84BA]",
-      "[&_.radio-card-input]:border-[#0B84BA]",
-      "dark:checked:[&_.radio-card-input]:text-[#3EB7ED]",
-      "dark:[&_.radio-card-input]:border-[#3EB7ED]",
-      "has-[:checked]:border-[#06425D] dark:has-[:checked]:border-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5] dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "checked:[&_.radio-card-input]:text-[#8750C5]",
-      "[&_.radio-card-input]:border-[#8750C5]",
-      "dark:checked:[&_.radio-card-input]:text-[#BA83F9]",
-      "dark:[&_.radio-card-input]:border-[#BA83F9]",
-      "has-[:checked]:border-[#442863] dark:has-[:checked]:border-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438] dark:text-[#DB976B] dark:border-[#DB976B]",
-      "checked:[&_.radio-card-input]:text-[#A86438]",
-      "[&_.radio-card-input]:border-[#A86438]",
-      "dark:checked:[&_.radio-card-input]:text-[#BA83F9]",
-      "dark:[&_.radio-card-input]:border-[#BA83F9]",
-      "has-[:checked]:border-[#54321C] dark:has-[:checked]:border-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686] dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "checked:[&_.radio-card-input]:text-[#868686]",
-      "[&_.radio-card-input]:border-[#868686]",
-      "dark:checked:[&_.radio-card-input]:text-[#A6A6A6]",
-      "dark:[&_.radio-card-input]:border-[#A6A6A6]",
-      "has-[:checked]:border-[#5E5E5E] dark:has-[:checked]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#5E5E5E]",
-      "dark:checked:[&_.radio-card-input]:text-[#BBBBBB]",
-      "[&_.radio-card-input]:border-[#e4e4e7] dark:[&_.radio-card-input]:border-[#27272a]",
-      "has-[:checked]:bg-[#282828] dark:has-[:checked]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#0095A4]",
-      "[&_.radio-card-input]:border-[#0095A4]",
-      "has-[:checked]:bg-[#77D5E3] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#068BEE]",
-      "[&_.radio-card-input]:border-[#068BEE]",
-      "has-[:checked]:bg-[#175BCC] dark:has-[:checked]:bg-[#016974]"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#009A51]",
-      "[&_.radio-card-input]:border-[#009A51]",
-      "has-[:checked]:bg-[#166C3B] dark:has-[:checked]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#FCB001]",
-      "[&_.radio-card-input]:border-[#FCB001]",
-      "has-[:checked]:bg-[#976A01] dark:has-[:checked]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#F83446]",
-      "[&_.radio-card-input]:border-[#F83446]",
-      "has-[:checked]:bg-[#BB032A] dark:has-[:checked]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#0EA5E9]",
-      "[&_.radio-card-input]:border-[#0EA5E9]",
-      "has-[:checked]:bg-[#08638C] dark:has-[:checked]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#BA83F9] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#A964F7]",
-      "[&_.radio-card-input]:border-[#A964F7]",
-      "has-[:checked]:bg-[#653C94] dark:has-[:checked]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#D27D46]",
-      "[&_.radio-card-input]:border-[#D27D46]",
-      "has-[:checked]:bg-[#7E4B2A] dark:has-[:checked]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "checked:[&_.radio-card-input]:text-[#A6A6A6]",
-      "[&_.radio-card-input]:border-[#A6A6A6]",
-      "has-[:checked]:bg-[#727272] dark:has-[:checked]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]",
-      "checked:[&_.radio-card-input]:text-black",
-      "[&_.radio-card-input]:border-black",
-      "has-[:checked]:bg-[#ede8e8]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]",
-      "checked:[&_.radio-card-input]:text-white",
-      "[&_.radio-card-input]:border-white",
-      "has-[:checked]:bg-[#616060]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]",
-      "checked:[&_.radio-card-input]:text-black",
-      "dark:checked:[&_.radio-card-input]:text-white",
-      "[&_.radio-card-input]:border-[#282828] dark:[&_.radio-card-input]:border-[#E8E8E8]",
-      "has-[:checked]:border-black dark:has-[:checked]:border-white",
-      "has-[:checked]:bg-[#E8E8E8] dark:has-[:checked]:bg-[#5E5E5E]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]",
-      "checked:[&_.radio-card-input]:text-[#016974]",
-      "dark:checked:[&_.radio-card-input]:text-[#77D5E3]",
-      "[&_.radio-card-input]:border-[#016974] dark:[&_.radio-card-input]:border-[#77D5E3]",
-      "has-[:checked]:border-[#1A535A] dark:has-[:checked]:border-[#B0E7EF]",
-      "has-[:checked]:bg-[#CDEEF3] dark:has-[:checked]:bg-[#1A535A]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]",
-      "checked:[&_.radio-card-input]:text-[#175BCC]",
-      "dark:checked:[&_.radio-card-input]:text-[#A9C9FF]",
-      "[&_.radio-card-input]:border-[#175BCC] dark:[&_.radio-card-input]:border-[#A9C9FF]",
-      "has-[:checked]:border-[#1948A3] dark:has-[:checked]:border-[#CDDEFF]",
-      "has-[:checked]:bg-[#DEE9FE] dark:has-[:checked]:bg-[#1948A3]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]",
-      "checked:[&_.radio-card-input]:text-[#166C3B]",
-      "dark:checked:[&_.radio-card-input]:text-[#7FD99A]",
-      "[&_.radio-card-input]:border-[#166C3B] dark:[&_.radio-card-input]:border-[#7FD99A]",
-      "has-[:checked]:border-[#0D572D] dark:has-[:checked]:border-[#B1EAC2]",
-      "has-[:checked]:bg-[#D3EFDA] dark:has-[:checked]:bg-[#0D572D]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]",
-      "checked:[&_.radio-card-input]:text-[#976A01]",
-      "dark:checked:[&_.radio-card-input]:text-[#FDD067]",
-      "[&_.radio-card-input]:border-[#976A01] dark:[&_.radio-card-input]:border-[#FDD067]",
-      "has-[:checked]:border-[#654600] dark:has-[:checked]:border-[#FEDF99]",
-      "has-[:checked]:bg-[#FEEFCC] dark:has-[:checked]:bg-[#654600]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]",
-      "checked:[&_.radio-card-input]:text-[#BB032A]",
-      "dark:checked:[&_.radio-card-input]:text-[#FFB2AB]",
-      "[&_.radio-card-input]:border-[#BB032A] dark:[&_.radio-card-input]:border-[#FFB2AB]",
-      "has-[:checked]:border-[#950F22] dark:has-[:checked]:border-[#FFD2CD]",
-      "has-[:checked]:bg-[#FFE1DE] dark:has-[:checked]:bg-[#950F22]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]",
-      "checked:[&_.radio-card-input]:text-[#0B84BA]",
-      "dark:checked:[&_.radio-card-input]:text-[#6EC9F2]",
-      "[&_.radio-card-input]:border-[#0B84BA] dark:[&_.radio-card-input]:border-[#6EC9F2]",
-      "has-[:checked]:border-[#06425D] dark:has-[:checked]:border-[#9FDBF6]",
-      "has-[:checked]:bg-[#CFEDFB] dark:has-[:checked]:bg-[#06425D]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]",
-      "checked:[&_.radio-card-input]:text-[#653C94]",
-      "dark:checked:[&_.radio-card-input]:text-[#CBA2FA]",
-      "[&_.radio-card-input]:border-[#653C94] dark:[&_.radio-card-input]:border-[#CBA2FA]",
-      "has-[:checked]:border-[#442863] dark:has-[:checked]:border-[#DDC1FC]",
-      "has-[:checked]:bg-[#EEE0FD] dark:has-[:checked]:bg-[#442863]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]",
-      "checked:[&_.radio-card-input]:text-[#7E4B2A]",
-      "dark:checked:[&_.radio-card-input]:text-[#E4B190]",
-      "[&_.radio-card-input]:border-[#7E4B2A] dark:[&_.radio-card-input]:border-[#E4B190]",
-      "has-[:checked]:border-[#54321C] dark:has-[:checked]:border-[#EDCBB5]",
-      "has-[:checked]:bg-[#F6E5DA] dark:has-[:checked]:bg-[#54321C]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]",
-      "checked:[&_.radio-card-input]:text-[#727272]",
-      "dark:checked:[&_.radio-card-input]:text-[#BBBBBB]",
-      "[&_.radio-card-input]:border-[#727272] dark:[&_.radio-card-input]:border-[#BBBBBB]",
-      "has-[:checked]:border-[#5E5E5E] dark:has-[:checked]:border-[#DDDDDD]",
-      "has-[:checked]:bg-[#E8E8E8] dark:has-[:checked]:bg-[#5E5E5E]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/radio_field.ex b/lib/geo_web/components/radio_field.ex
deleted file mode 100644
index c778335..0000000
--- a/lib/geo_web/components/radio_field.ex
+++ /dev/null
@@ -1,498 +0,0 @@
-defmodule GeoWeb.Components.RadioField do
-  @moduledoc """
-  The `GeoWeb.Components.RadioField` module provides a highly customizable radio button
-  component for Phoenix LiveView applications. This module supports various styling options,
-  including different colors, sizes, and border styles, allowing developers to
-  integrate radio buttons seamlessly into their design system.
-
-  The component offers attributes and slots to control layout, appearance, and behavior,
-  making it versatile for use cases ranging from simple forms to complex UI elements.
-  With features such as error handling and custom labels, it enhances the usability and
-  accessibility of forms, ensuring a cohesive user experience across the application.
-
-  In addition, the module includes support for grouped radio buttons with the `group_radio`
-  component, enabling the creation of sets of related radio inputs. This facilitates the
-  development of dynamic and interactive form elements in a clean and organized manner.
-  """
-  use Phoenix.Component
-  alias Phoenix.HTML.Form
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a `radio_field` component. This component allows users to select a single option from
-  a list of options, and provides various customization options for appearance and behavior.
-
-  ## Examples
-
-  ```elixir
-  <.radio_field name="option" value="Option 1" space="small" label="Option 1 Label"/>
-
-  <.radio_field
-    name="option"
-    value="Option 2"
-    space="medium"
-    color="secondary"
-    label="Option 2 Label"
-    checked
-  />
-
-  <.radio_field name="option" value="Option 3" color="dawn" label="Option 3 Label" reverse/>
-
-  <.radio_field
-    name="option"
-    value="Option 4"
-    space="medium"
-    color="danger"
-    label="Option 4 Label"
-    errors={["Error message for Option 4"]}
-  />
-
-  <.radio_field name="option" value="Option 5" space="small" color="info" label="Option 5 Label"/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-  attr :radio_class, :string, default: nil, doc: "Custom CSS class for the radio input"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :checked, :boolean, default: false, doc: "Specifies if the element is checked by default"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form checked readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec radio_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def radio_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> radio_field()
-  end
-
-  def radio_field(assigns) do
-    ~H"""
-    <div class={[
-      color_class(@color),
-      border_class(@border),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.radio-field-wrapper_input]:focus-within:ring-1",
-      @reverse && "[&_.radio-field-wrapper]:flex-row-reverse",
-      @class
-    ]}>
-      <.label class={["radio-field-wrapper flex items-center w-fit", @wrapper_class]} for={@id}>
-        <input
-          type="radio"
-          name={@name}
-          id={@id}
-          value={@value}
-          checked={@checked}
-          class={[
-            "bg-white dark:bg-[#18181B] radio-input rounded-full",
-            @radio_class
-          ]}
-          {@rest}
-        />
-        <span :if={@label} class={@label_class}>{@label}</span>
-      </.label>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a `group_radio` component, allowing users to select a single option from a list of
-  grouped options. This component provides flexibility in layout, appearance, and behavior.
-
-  ## Examples
-
-  ```elixir
-  <.group_radio name="items_group_1" space="small">
-    <:radio value="option1">Option 1</:radio>
-    <:radio value="option2">Option 2</:radio>
-    <:radio value="option3">Option 3</:radio>
-    <:radio value="option4" checked>Option 4</:radio>
-  </.group_radio>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :space, :string, default: "medium", doc: "Space between items"
-
-  attr :variation, :string,
-    default: "vertical",
-    doc: "Defines the layout orientation of the component"
-
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-  attr :radio_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-  attr :radio_wrapper_class, :string, default: nil, doc: "Custom CSS class for the wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :rest, :global,
-    include:
-      ~w(autocomplete disabled form indeterminate multiple readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  slot :radio, required: true do
-    attr :value, :string, required: true
-    attr :checked, :boolean, required: false
-    attr :space, :any, required: false, doc: "Space between items"
-  end
-
-  slot :inner_block
-
-  @spec group_radio(map()) :: Phoenix.LiveView.Rendered.t()
-  def group_radio(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> group_radio()
-  end
-
-  def group_radio(assigns) do
-    ~H"""
-    <div class={[
-      @variation == "horizontal" && "flex flex-wrap items-center",
-      @variation == "vertical" && "flex flex-col",
-      variation_gap(@space),
-      @class
-    ]}>
-      {render_slot(@inner_block)}
-      <input type="hidden" name={@name} value="" disabled={@rest[:disabled]} />
-      <div
-        :for={{radio, index} <- Enum.with_index(@radio, 1)}
-        class={[
-          color_class(@color),
-          border_class(@border),
-          size_class(@size),
-          space_class(radio[:space] || "small"),
-          @ring && "[&_.radio-field-wrapper_input]:focus-within:ring-1",
-          @reverse && "[&_.radio-field-wrapper]:flex-row-reverse",
-          @wrapper_class
-        ]}
-      >
-        <.label
-          class={["radio-field-wrapper flex items-center w-fit", @radio_wrapper_class]}
-          for={"#{@id}-#{index}"}
-        >
-          <input
-            type="radio"
-            name={@name}
-            id={"#{@id}-#{index}"}
-            value={radio[:value]}
-            checked={radio[:checked]}
-            class={["bg-white dark:bg-[#18181B] radio-input rounded-full", @radio_class]}
-            {@rest}
-          />
-          <span class={@label_class}>{render_slot(radio)}</span>
-        </.label>
-      </div>
-    </div>
-    <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    """
-  end
-
-  def radio_check(:list, {field, value}, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      new_value = if is_atom(value), do: Atom.to_string(value), else: value
-      new_value == params[Atom.to_string(field)]
-    else
-      Map.get(data, field) == value
-    end
-  end
-
-  def radio_check(:boolean, field, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      Form.normalize_value("radio", params[Atom.to_string(field)])
-    else
-      Map.get(data, field, false)
-    end
-  end
-
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["block text-sm font-semibold leading-6", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc type: :component
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp size_class("extra_small"), do: "[&_.radio-field-wrapper_input]:size-2.5"
-
-  defp size_class("small"), do: "[&_.radio-field-wrapper_input]:size-3"
-
-  defp size_class("medium"), do: "[&_.radio-field-wrapper_input]:size-3.5"
-
-  defp size_class("large"), do: "[&_.radio-field-wrapper_input]:size-4"
-
-  defp size_class("extra_large"), do: "[&_.radio-field-wrapper_input]:size-5"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp border_class("none"), do: "[&_.radio-field-wrapper_.radio-input]:border-0"
-  defp border_class("extra_small"), do: "[&_.radio-field-wrapper_.radio-input]:border"
-  defp border_class("small"), do: "[&_.radio-field-wrapper_.radio-input]:border-2"
-  defp border_class("medium"), do: "[&_.radio-field-wrapper_.radio-input]:border-[3px]"
-  defp border_class("large"), do: "[&_.radio-field-wrapper_.radio-input]:border-4"
-  defp border_class("extra_large"), do: "[&_.radio-field-wrapper_.radio-input]:border-[5px]"
-  defp border_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "[&_.radio-field-wrapper]:gap-1"
-
-  defp space_class("small"), do: "[&_.radio-field-wrapper]:gap-1.5"
-
-  defp space_class("medium"), do: "[&_.radio-field-wrapper]:gap-2"
-
-  defp space_class("large"), do: "[&_.radio-field-wrapper]:gap-2.5"
-
-  defp space_class("extra_large"), do: "[&_.radio-field-wrapper]:gap-3"
-
-  defp space_class("none"), do: nil
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp variation_gap("extra_small"), do: "gap-1"
-  defp variation_gap("small"), do: "gap-2"
-  defp variation_gap("medium"), do: "gap-3"
-  defp variation_gap("large"), do: "gap-4"
-  defp variation_gap("extra_large"), do: "gap-5"
-
-  defp variation_gap(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "text-[#09090b] dark:text-[#FAFAFA]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#8B8B8D]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#818182]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#8B8B8D]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#818182]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#F8F9FA] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#242424]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "[&_.radio-field-wrapper_.radio-input]:text-white text-[#DDDDDD]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#DDDDDD]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input_.radio-input]:ring-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "text-[#282828] dark:text-[#E8E8E8]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#282828]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#E8E8E8]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#282828]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#868686]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#4B4B4B] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "text-[#016974] dark:text-[#77D5E3]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#016974]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#77D5E3]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#016974]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#77D5E3]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#007F8C] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#175BCC]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#A9C9FF]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#175BCC]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#A9C9FF]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#266EF1] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#166C3B]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#7FD99A]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#166C3B]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#7FD99A]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#0E8345] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "text-[#976A01] dark:text-[#FDD067]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#976A01]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#FDD067]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#976A01]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#FDD067]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#CA8D01] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#BB032A]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#FFB2AB]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#BB032A]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#FFB2AB]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#DE1135] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#0B84BA]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#6EC9F2]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#0B84BA]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#6EC9F2]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#0B84BA] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#653C94]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#CBA2FA]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#653C94]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#CBA2FA]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#8750C5] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#7E4B2A]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#E4B190]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#7E4B2A]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#E4B190]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#A86438] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "text-[#727272] dark:text-[#BBBBBB]",
-      "checked:[&_.radio-field-wrapper_.radio-input]:text-[#727272]",
-      "dark:checked:[&_.radio-field-wrapper_.radio-input]:text-[#BBBBBB]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#727272]",
-      "dark:[&_.radio-field-wrapper_.radio-input]:border-[#BBBBBB]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#868686] dark:focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "[&_.radio-field-wrapper_.radio-input]:text-[#282828] text-[#282828]",
-      "[&_.radio-field-wrapper_.radio-input]:border-[#727272]",
-      "focus-within:[&_.radio-field-wrapper_.radio-input]:ring-[#282828]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/range_field.ex b/lib/geo_web/components/range_field.ex
deleted file mode 100644
index 1c1bb1c..0000000
--- a/lib/geo_web/components/range_field.ex
+++ /dev/null
@@ -1,443 +0,0 @@
-defmodule GeoWeb.Components.RangeField do
-  @moduledoc """
-  The `GeoWeb.Components.RangeField` module provides a comprehensive range input field
-  component for Phoenix LiveView applications. This component is designed with flexibility and
-  customization in mind, allowing developers to configure various aspects such as size, color, and
-  styling options.
-
-  With attributes for managing state, interaction, and layout, the `RangeField` component can be
-  easily adapted to different use cases, from simple form inputs to more complex data-driven interfaces.
-  The module supports custom labels, error handling, and a range value slot for displaying dynamic
-  content based on the input value.
-
-  This component is particularly useful for scenarios that require user input in a defined range,
-  such as sliders for adjusting numerical values or settings. It ensures a visually consistent
-  and user-friendly experience across different parts of the application, while maintaining a
-  high level of customization and control.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `range_field`, which allows users to select a numeric value from a defined range.
-  The component can be styled in different ways and supports additional labels or values at specified positions.
-
-  ## Examples
-
-  ```elixir
-  <.range_field
-    appearance="custom"
-    value="40"
-    color="warning"
-    size="small"
-    min="10"
-    id="custom-range-1"
-    max="100"
-    name="custom-range"
-    step="5"
-  >
-    <:range_value position="start">Min ($100)</:range_value>
-    <:range_value position="middle">$700</:range_value>
-    <:range_value position="end">Max ($1500)</:range_value>
-  </.range_field>
-
-  <.range_field
-    value="60"
-    size="medium"
-    color="primary"
-    id="default-range-2"
-    name="default-range-2"
-    label="Primary Range"
-  >
-    <:range_value position="end">60%</:range_value>
-  </.range_field>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "extra_small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :appearance, :string, default: "default", doc: "custom, default"
-  attr :width, :string, default: "full", doc: "Determines the element width"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :checked, :boolean, default: false, doc: "Specifies if the element is checked by default"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form readonly min max step required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :range_value, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :position, :any, required: false, doc: "Determines the element position"
-  end
-
-  @spec range_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def range_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> range_field()
-  end
-
-  def range_field(%{appearance: "default"} = assigns) do
-    ~H"""
-    <div class={[
-      width_class(@width),
-      @class
-    ]}>
-      <.label for={@id}>{@label}</.label>
-      <div class="relative mb-8">
-        <input
-          type="range"
-          value={@value}
-          name={@name}
-          id={@id}
-          class={["w-full", color_class(@appearance, @color)]}
-          {@rest}
-        />
-        <span
-          :for={{range_value, index} <- Enum.with_index(@range_value, 1)}
-          id={"#{@id}-value-#{index}"}
-          class={[
-            "absolute block -bottom-6 text-sm",
-            value_position(range_value[:position]),
-            range_value[:class]
-          ]}
-        >
-          {render_slot(range_value)}
-        </span>
-      </div>
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def range_field(assigns) do
-    ~H"""
-    <div class={[
-      color_class(@appearance, @color),
-      size_class(@size),
-      width_class(@width),
-      @class
-    ]}>
-      <.label for={@id}>{@label}</.label>
-      <div class="relative mb-8">
-        <input
-          type="range"
-          value={@value}
-          name={@name}
-          id={@id}
-          class={[
-            "range-field bg-transparent cursor-pointer appearance-none disabled:opacity-50",
-            "disabled:pointer-events-none focus:outline-none",
-            "[&::-webkit-slider-runnable-track]:w-full [&::-webkit-slider-thumb]:rounded-full",
-            "[&::-webkit-slider-runnable-track]:bg-[#DDDDDD] dark:[&::-webkit-slider-runnable-track]:bg-[#4B4B4B]",
-            "[&::-webkit-slider-thumb]:bg-[#DDDDDD] dark:[&::-webkit-slider-thumb]:bg-[#4B4B4B]",
-            "[&::-webkit-slider-thumb]:-mt-0.5 [&::-webkit-slider-thumb]:appearance-none",
-            "[&::-webkit-slider-thumb]:transition-all [&::-webkit-slider-thumb]:duration-200 [&::-webkit-slider-thumb]:ease-in-out",
-            "[&::-moz-range-thumb]:appearance-none [&::-moz-range-thumb]:bg-white",
-            "[&::-moz-range-thumb]:border-4 [&::-moz-range-thumb]:rounded-full",
-            "[&::-moz-range-thumb]:transition-all [&::-moz-range-thumb]:duration-200 [&::-moz-range-thumb]:ease-in-out",
-            "[&::-webkit-slider-runnable-track]:rounded-full [&::-moz-range-track]:w-full",
-            "[&::-moz-range-track]:bg-[#e6e6e6] [&::-moz-range-track]:rounded-full"
-          ]}
-          {@rest}
-        />
-        <span
-          :for={{range_value, index} <- Enum.with_index(@range_value, 1)}
-          id={"#{@id}-value-#{index}"}
-          class={[
-            "absolute block -bottom-6 text-sm",
-            value_position(range_value[:position]),
-            range_value[:class]
-          ]}
-        >
-          {render_slot(range_value)}
-        </span>
-      </div>
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["block text-sm font-semibold leading-6", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc type: :component
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp value_position("start"), do: "start-0"
-  defp value_position("end"), do: "end-0"
-  defp value_position("middle"), do: "start-1/2"
-  defp value_position("quarter"), do: "start-1/4"
-  defp value_position("three-quarters"), do: "start-3/4"
-  defp value_position("two-thirds"), do: "start-2/3 -translate-x-1/2 rtl:translate-x-1/2"
-  defp value_position("one-thirds"), do: "start-1/3 -translate-x-1/2 rtl:translate-x-1/2"
-  defp value_position(params) when is_binary(params), do: params
-
-  defp width_class("half"), do: "[&_.range-field]:w-1/2"
-  defp width_class("full"), do: "[&_.range-field]:w-full"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "[&_.range-field::-webkit-slider-runnable-track]:h-2 [&_.range-field::-webkit-slider-thumb]:size-2.5",
-      "[&_.range-field::-moz-range-track]:h-2 [&_.range-field::-moz-range-thumb]:size-2.5"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&_.range-field::-webkit-slider-runnable-track]:h-2.5 [&_.range-field::-webkit-slider-thumb]:size-3",
-      "[&_.range-field::-moz-range-track]:h-2.5 [&_.range-field::-moz-range-thumb]:size-3"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&_.range-field::-webkit-slider-runnable-track]:h-3 [&_.range-field::-webkit-slider-thumb]:size-3.5",
-      "[&_.range-field::-moz-range-track]:h-3 [&_.range-field::-moz-range-thumb]:size-3.5"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&_.range-field::-webkit-slider-runnable-track]:h-3.5 [&_.range-field::-webkit-slider-thumb]:size-4",
-      "[&_.range-field::-moz-range-track]:h-3.5 [&_.range-field::-moz-range-thumb]:size-4"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&_.range-field::-webkit-slider-runnable-track]:h-4 [&_.range-field::-webkit-slider-thumb]:size-5",
-      "[&_.range-field::-moz-range-track]:h-4 [&_.range-field::-moz-range-thumb]:size-5"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_class("default", "base") do
-    ["accent-[#27272a] dark:accent-[#e4e4e7]"]
-  end
-
-  defp color_class("default", "white") do
-    ["accent-white"]
-  end
-
-  defp color_class("default", "natural") do
-    ["accent-[#4B4B4B] dark:accent-[#DDDDDD]"]
-  end
-
-  defp color_class("default", "primary") do
-    ["accent-[#007F8C] dark:accent-[#01B8CA]"]
-  end
-
-  defp color_class("default", "secondary") do
-    ["accent-[#266EF1] dark:accent-[#6DAAFB]"]
-  end
-
-  defp color_class("default", "success") do
-    ["accent-[#0E8345] dark:accent-[#06C167]"]
-  end
-
-  defp color_class("default", "warning") do
-    ["accent-[#976A01] dark:accent-[#FDC034]"]
-  end
-
-  defp color_class("default", "danger") do
-    ["accent-[#DE1135] dark:accent-[#FC7F79]"]
-  end
-
-  defp color_class("default", "info") do
-    ["accent-[#0B84BA] dark:accent-[#3EB7ED]"]
-  end
-
-  defp color_class("default", "misc") do
-    ["accent-[#8750C5] dark:accent-[#BA83F9]"]
-  end
-
-  defp color_class("default", "dawn") do
-    ["accent-[#A86438] dark:accent-[#DB976B]"]
-  end
-
-  defp color_class("default", "silver") do
-    ["accent-[#868686] dark:accent-[#A6A6A6]"]
-  end
-
-  defp color_class("default", "dark") do
-    ["accent-[#282828]"]
-  end
-
-  defp color_class("custom", "white") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-white",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(255,255,255,1)]"
-    ]
-  end
-
-  defp color_class("custom", "natural") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#4B4B4B]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(75,75,75,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#DDDDDD]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(221,221,221,1)]"
-    ]
-  end
-
-  defp color_class("custom", "primary") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#007f8c]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(0,65,127,140)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#01B8CA]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(1,184,202,140)]"
-    ]
-  end
-
-  defp color_class("custom", "secondary") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#266EF1]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(38,110,241,1)]",
-      "dark[&_.range-field::-moz-range-thumb]:border-[#6DAAFB]",
-      "dark[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(109,170,251,1)]"
-    ]
-  end
-
-  defp color_class("custom", "success") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#0E8345]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(14,131,69,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#06C167]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(6,193,103,1)]"
-    ]
-  end
-
-  defp color_class("custom", "warning") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#CA8D01]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(202,141,1,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#FDC034]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(253,192,52,1)]"
-    ]
-  end
-
-  defp color_class("custom", "danger") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#DE1135]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(222,17,53,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#FC7F79]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(252,127,121,1)]"
-    ]
-  end
-
-  defp color_class("custom", "info") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#0B84BA]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(11,132,186,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#3EB7ED]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(62,183,237,1)]"
-    ]
-  end
-
-  defp color_class("custom", "misc") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#8750C5]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(135,80,197,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#DB976B]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(186,131,249,1)]"
-    ]
-  end
-
-  defp color_class("custom", "dawn") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#A86438]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(168,100,56,1)]",
-      "dark:[&_.range-field::-moz-range-thumb]:border-[#DB976B]",
-      "dark:[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(219,151,107,1)]"
-    ]
-  end
-
-  defp color_class("custom", "silver") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#868686]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(134,134,134,1)]",
-      "[&_.range-field::-moz-range-thumb]:border-[#A6A6A6]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(166,166,166,1)]"
-    ]
-  end
-
-  defp color_class("custom", "dark") do
-    [
-      "[&_.range-field::-moz-range-thumb]:border-[#282828]",
-      "[&_.range-field::-webkit-slider-thumb]:shadow-[0_0_0_4px_rgba(40,40,40,1)]"
-    ]
-  end
-
-  defp color_class(params, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/rating.ex b/lib/geo_web/components/rating.ex
deleted file mode 100644
index d741963..0000000
--- a/lib/geo_web/components/rating.ex
+++ /dev/null
@@ -1,321 +0,0 @@
-defmodule GeoWeb.Components.Rating do
-  @moduledoc """
-  The `GeoWeb.Components.Rating` module provides a versatile rating component for Phoenix LiveView
-  applications. This component is designed to display a configurable number of rating stars with
-  customizable colors, sizes, and interactive capabilities.
-
-  The `Rating` component supports both static and interactive modes. In static mode,
-  the stars represent a pre-defined rating value, while in interactive mode, users can select a
-  rating by clicking on the stars. It offers a range of customization options such as gap size,
-  star color, and size, making it suitable for various user interfaces where feedback or ratings are required.
-
-  This component is ideal for implementing user reviews, feedback forms, and any other scenario where
-  a visual rating system is needed. Its flexibility and ease of integration make it a powerful
-  tool for enhancing the user experience in Phoenix LiveView applications.
-  """
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  Renders a `rating` component using stars to represent a score or rating value.
-  The component supports interactive and non-interactive modes, making it suitable
-  for both display and user input scenarios.
-
-  ## Examples
-
-  ```elixir
-  <.rating interactive />
-  <.rating color="primary" gap="large" interactive />
-  <.rating color="danger" gap="extra_large" select={5} interactive />
-  <.rating color="success" gap="extra_large" select={3} interactive />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :gap, :string, default: "small", doc: "Custom gap style"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :color, :string, default: "warning", doc: "Determines color theme"
-  attr :count, :integer, default: 5, doc: "Number of stars to display"
-  attr :select, :any, default: 0, doc: "Integer or float value for selected stars"
-
-  attr :params, :map,
-    default: %{},
-    doc: "A map of additional parameters used for element configuration"
-
-  attr :on_action, JS, default: %JS{}, doc: "Custom JS module for on_action action"
-
-  attr :interactive, :boolean,
-    default: false,
-    doc: "If true, stars are wrapped in a button for selecting a rating"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def rating(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="radiogroup"
-      class={[
-        "flex flex-nowrap text-[#F4F4F4] dark:text-[#4B4B4B]",
-        gap_class(@gap),
-        size_class(@size),
-        color_class(@color),
-        @class
-      ]}
-      {@rest}
-    >
-      <%= for item <- 1..@count do %>
-        <% fill_percentage = calculate_fill_percentage(item, @select) %>
-        <%= if @interactive do %>
-          <button
-            role="radio"
-            aria-checked={if item <= @select, do: "true", else: "false"}
-            tabindex={if item == @select, do: "0", else: "-1"}
-            aria-label={"#{item} star#{if item > 1, do: "s", else: ""}"}
-            class={[
-              "rating-button",
-              "leading-5",
-              "group",
-              "[&:has(~.rating-button:hover)_.fraction-path]:opacity-0 [&:has(~.rating-button:hover)_.full-path]:opacity-100"
-            ]}
-            phx-click={
-              @on_action
-              |> JS.push("rating", value: Map.merge(%{action: "select", number: item}, @params))
-            }
-          >
-            <svg
-              xmlns="http://www.w3.org/2000/svg"
-              viewBox="0 0 24 24"
-              class={["rating-icon transition-all delay-100", fill_percentage > 0 && "rated"]}
-            >
-              <%= if fill_percentage > 0 and fill_percentage < 100 do %>
-                <defs>
-                  <linearGradient id={"star-fill-#{@id}-#{item}"} x1="0%" y1="0%" x2="100%" y2="0%">
-                    <stop offset="0%" stop-color="currentColor"></stop>
-                    <stop offset={"#{fill_percentage}%"} stop-color="currentColor"></stop>
-                    <stop offset={"#{fill_percentage}%"} stop-color="currentColor" stop-opacity="0.2">
-                    </stop>
-                    <stop offset="100%" stop-color="currentColor" stop-opacity="0.2"></stop>
-                  </linearGradient>
-                </defs>
-                <path
-                  class="opacity-100 transition-all delay-100 group-hover:opacity-0 fraction-path"
-                  fill={"url(#star-fill-#{@id}-#{item})"}
-                  d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
-                />
-                <path
-                  class="opacity-0 transition-all delay-100 group-hover:opacity-100 full-path"
-                  fill="currentColor"
-                  d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
-                />
-              <% else %>
-                <path
-                  fill="currentColor"
-                  class={[
-                    fill_percentage >= 100 && "fill-opacity-100",
-                    fill_percentage < 100 && "fill-opacity-20"
-                  ]}
-                  d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
-                />
-              <% end %>
-            </svg>
-            <span class="sr-only">{gettext("Rate %{count} star", count: item)}</span>
-          </button>
-        <% else %>
-          <svg
-            xmlns="http://www.w3.org/2000/svg"
-            viewBox="0 0 24 24"
-            class={["rating-icon transition-all delay-100", fill_percentage > 0 && "rated"]}
-          >
-            <%= if fill_percentage > 0 and fill_percentage < 100 do %>
-              <defs>
-                <linearGradient id={"star-fill-#{@id}-#{item}"} x1="0%" y1="0%" x2="100%" y2="0%">
-                  <stop offset="0%" stop-color="currentColor"></stop>
-                  <stop offset={"#{fill_percentage}%"} stop-color="currentColor"></stop>
-                  <stop offset={"#{fill_percentage}%"} stop-color="currentColor" stop-opacity="0.2">
-                  </stop>
-                  <stop offset="100%" stop-color="currentColor" stop-opacity="0.2"></stop>
-                </linearGradient>
-              </defs>
-              <path
-                fill={"url(#star-fill-#{@id}-#{item})"}
-                d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
-              />
-            <% else %>
-              <path
-                fill="currentColor"
-                class={[
-                  fill_percentage >= 100 && "fill-opacity-100",
-                  fill_percentage < 100 && "fill-opacity-20"
-                ]}
-                d="M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z"
-              />
-            <% end %>
-          </svg>
-        <% end %>
-      <% end %>
-    </div>
-    """
-  end
-
-  # Helper function to calculate the fill percentage for a star
-  defp calculate_fill_percentage(star_position, select) do
-    cond do
-      # For integer values or when select is not a number, use the original behavior
-      not is_float(select) or abs(select - trunc(select)) < 0.001 ->
-        if star_position <= select, do: 100, else: 0
-
-      # For decimal values (3.1 to 3.9 would render as 3.5)
-      star_position <= floor(select) ->
-        100
-
-      star_position == ceil(select) and select - floor(select) >= 0.1 ->
-        50
-
-      true ->
-        0
-    end
-  end
-
-  defp gap_class("extra_small"), do: "gap-1"
-  defp gap_class("small"), do: "gap-1.5"
-  defp gap_class("medium"), do: "gap-2"
-  defp gap_class("large"), do: "gap-2.5"
-  defp gap_class("extra_large"), do: "gap-3"
-  defp gap_class("none"), do: nil
-  defp gap_class(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "[&_.rating-icon]:size-4"
-
-  defp size_class("small"), do: "[&_.rating-icon]:size-5"
-
-  defp size_class("medium"), do: "[&_.rating-icon]:size-6"
-
-  defp size_class("large"), do: "[&_.rating-icon]:size-7"
-
-  defp size_class("extra_large"), do: "[&_.rating-icon]:size-8"
-
-  defp size_class("double_large"), do: "[&_.rating-icon]:size-9"
-
-  defp size_class("triple_large"), do: "[&_.rating-icon]:size-10"
-
-  defp size_class("quadruple_large"), do: "[&_.rating-icon]:size-11"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "[&_.rated]:text-[#e4e4e7] dark:[&_.rated]:text-[#27272a]",
-      "hover:[&_.rating-button]:text-[#e4e4e7] [&_.rating-button:has(~.rating-button:hover)]:text-[#e4e4e7]",
-      "dark:hover:[&_.rating-button]:text-[#27272a] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#27272a]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "[&_.rated]:text-white hover:[&_.rating-button]:text-white",
-      "[&_.rating-button:has(~.rating-button:hover)]:text-white"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&_.rated]:text-[#4B4B4B] dark:[&_.rated]:text-[#DDDDDD]",
-      "hover:[&_.rating-button]:text-[#4B4B4B] [&_.rating-button:has(~.rating-button:hover)]:text-[#4B4B4B]",
-      "dark:hover:[&_.rating-button]:text-[#DDDDDD] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "[&_.rated]:text-[#007F8C] dark:[&_.rated]:text-[#01B8CA]",
-      "hover:[&_.rating-button]:text-[#007F8C] [&_.rating-button:has(~.rating-button:hover)]:text-[#007F8C]",
-      "dark:hover:[&_.rating-button]:text-[#01B8CA] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&_.rated]:text-[#266EF1] dark:[&_.rated]:text-[#6DAAFB]",
-      "hover:[&_.rating-button]:text-[#266EF1] [&_.rating-button:has(~.rating-button:hover)]:text-[#266EF1]",
-      "dark:hover:[&_.rating-button]:text-[#6DAAFB] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&_.rated]:text-[#0E8345] dark:[&_.rated]:text-[#06C167]",
-      "hover:[&_.rating-button]:text-[#0E8345] [&_.rating-button:has(~.rating-button:hover)]:text-[#0E8345]",
-      "dark:hover:[&_.rating-button]:text-[#06C167] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&_.rated]:text-[#CA8D01] dark:[&_.rated]:text-[#FDC034]",
-      "hover:[&_.rating-button]:text-[#CA8D01] [&_.rating-button:has(~.rating-button:hover)]:text-[#CA8D01]",
-      "dark:hover:[&_.rating-button]:text-[#FDC034] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&_.rated]:text-[#DE1135] dark:[&_.rated]:text-[#FC7F79]",
-      "hover:[&_.rating-button]:text-[#DE1135] [&_.rating-button:has(~.rating-button:hover)]:text-[#DE1135]",
-      "dark:hover:[&_.rating-button]:text-[#FC7F79] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&_.rated]:text-[#0B84BA] dark:[&_.rated]:text-[#3EB7ED]",
-      "hover:[&_.rating-button]:text-[#0B84BA] [&_.rating-button:has(~.rating-button:hover)]:text-[#0B84BA]",
-      "dark:hover:[&_.rating-button]:text-[#3EB7ED] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&_.rated]:text-[#8750C5] dark:[&_.rated]:text-[#BA83F9]",
-      "hover:[&_.rating-button]:text-[#8750C5] [&_.rating-button:has(~.rating-button:hover)]:text-[#8750C5]",
-      "dark:hover:[&_.rating-button]:text-[#BA83F9] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&_.rated]:text-[#A86438] dark:[&_.rated]:text-[#DB976B]",
-      "hover:[&_.rating-button]:text-[#A86438] [&_.rating-button:has(~.rating-button:hover)]:text-[#A86438]",
-      "dark:hover:[&_.rating-button]:text-[#DB976B] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&_.rated]:text-[#868686] dark:[&_.rated]:text-[#A6A6A6]",
-      "hover:[&_.rating-button]:text-[#868686] [&_.rating-button:has(~.rating-button:hover)]:text-[#868686]",
-      "dark:hover:[&_.rating-button]:text-[#A6A6A6] dark:[&_.rating-button:has(~.rating-button:hover)]:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "[&_.rated]:text-[#282828]",
-      "hover:[&_.rating-button]:text-[#282828] [&_.rating-button:has(~.rating-button:hover)]:text-[#282828]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/search_combobox.ex b/lib/geo_web/components/search_combobox.ex
index f90a573..ab930a1 100644
--- a/lib/geo_web/components/search_combobox.ex
+++ b/lib/geo_web/components/search_combobox.ex
@@ -4,14 +4,16 @@ defmodule GeoWeb.Components.SearchCombobox do
 
   This module provides components to display search combobox/select inputs with various styles, colors,
   sizes, and configurations. The main component, `search_combobox/1`, acts as a container for select options,
-  and allows users to search, filter and select items from a dropdown list.
+  and allows users to search, filter and select items from a dropdown list with
+  group-based collapse and sort functionality
 
   The search combobox component supports features like:
-  - Search filtering of options
+  - Search filtering of options (always enabled)
   - Single and multiple selection modes
   - Custom option rendering
   - Keyboard navigation
   - Accessibility support
+  - Dynamic group collapsing and sorting
   """
 
   use Phoenix.Component
@@ -25,7 +27,7 @@ defmodule GeoWeb.Components.SearchCombobox do
   such as searchable options, multiple selection, and grouped items.
 
   It supports various customization options including:
-  - Searchable options with filter functionality
+  - Searchable options with filter functionality (always enabled)
   - Single or multiple selection modes
   - Option grouping with labels
   - Custom styling with color themes and variants
@@ -34,6 +36,7 @@ defmodule GeoWeb.Components.SearchCombobox do
   - Form field integration
   - Custom placeholders and descriptions
   - Start section slots for icons or additional content
+  - Dynamic group collapsing and sorting
 
 
    ## Example usage:
@@ -65,7 +68,7 @@ defmodule GeoWeb.Components.SearchCombobox do
     </.search_combobox>
 
     # Multiple selection with custom rendering
-    <.search_combobox multiple searchable placeholder="Select fruits">
+    <.search_combobox multiple placeholder="Select fruits">
       <:option value="apple">
         <div class="flex items-center gap-2">
           <span>🍎</span>
@@ -79,6 +82,40 @@ defmodule GeoWeb.Components.SearchCombobox do
         </div>
       </:option>
     </.search_combobox>
+
+    # Group-based collapse and sort
+    group_states = %{
+      "Fruits" => %{collapsed: false, sort_icon: "hero-chevron-up"},
+      "Vegetables" => %{collapsed: true, sort_icon: "hero-chevron-down"},
+      "Grains" => %{collapsed: false, sort_icon: "hero-chevron-up"}
+    }
+
+    <.search_combobox
+      enable_group_sorting={true}
+      group_states={group_states}
+      toggle_group_sort_event="toggle_group_sort"
+      toggle_group_collapse_event="toggle_group_collapse">
+      <:option group="Fruits" value="apple">Apple</:option>
+      <:option group="Fruits" value="banana">Banana</:option>
+      <:option group="Vegetables" value="carrot">Carrot</:option>
+      <:option group="Grains" value="rice">Rice</:option>
+    </.search_combobox>
+
+    # Event Handlers
+    def handle_event("toggle_group_sort", %{"group" => group_name}, socket) do
+      current_icon = get_in(socket.assigns.group_states, [group_name, :sort_icon])
+      new_icon = if current_icon == "hero-chevron-up", do: "hero-chevron-down", else: "hero-chevron-up"
+
+      new_group_states = put_in(socket.assigns.group_states, [group_name, :sort_icon], new_icon)
+      {:noreply, assign(socket, :group_states, new_group_states)}
+    end
+
+    def handle_event("toggle_group_collapse", %{"group" => group_name}, socket) do
+      current_collapsed = get_in(socket.assigns.group_states, [group_name, :collapsed])
+      new_group_states = put_in(socket.assigns.group_states, [group_name, :collapsed], !current_collapsed)
+
+      {:noreply, assign(socket, :group_states, new_group_states)}
+    end
   ```
   """
 
@@ -106,7 +143,7 @@ defmodule GeoWeb.Components.SearchCombobox do
 
   attr :search_placeholder, :string,
     default: "Search..",
-    doc: "Custom CSS class for additional styling"
+    doc: "Placeholder text for the search input"
 
   attr :color, :string, default: "natural", doc: "Determines color theme"
   attr :variant, :string, default: "base", doc: "Determines variant theme"
@@ -116,22 +153,14 @@ defmodule GeoWeb.Components.SearchCombobox do
   attr :padding, :string, default: "small", doc: "Padding size"
   attr :height, :string, default: "h-fit max-h-40", doc: "Dropdown height"
   attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :searchable, :boolean, default: false, doc: "Determines a short description"
   attr :multiple, :boolean, default: false, doc: "Multiple selections in the combobox"
   attr :search_event, :string, default: nil, doc: "Phoenix event to trigger when searching"
 
-  # New attributes for group sorting
-  attr :enable_group_sorting, :boolean, default: false, doc: "Enable sorting controls for search groups"
-  attr :code_sort_order, :string, default: "asc", doc: "Sort order for search code group (asc/desc)"
-  attr :name_sort_order, :string, default: "asc", doc: "Sort order for search name group (asc/desc)"
-  attr :toggle_iso_code_sort_event, :string, default: "toggle_iso_code_sort", doc: "Event name for toggling code sort order"
-  attr :toggle_name_sort_event, :string, default: "toggle_name_sort", doc: "Event name for toggling name sort order"
-
-  # New attributes for group collapsing
-  attr :iso_code_group_collapsed, :boolean, default: false, doc: "Whether the ISO code group is collapsed"
-  attr :name_group_collapsed, :boolean, default: false, doc: "Whether the name group is collapsed"
-  attr :toggle_iso_code_group_event, :string, default: "toggle_iso_code_group", doc: "Event name for toggling ISO code group collapse state"
-  attr :toggle_name_group_event, :string, default: "toggle_name_group", doc: "Event name for toggling name group collapse state"
+  # New attributes for dynamic group management
+  attr :enable_group_sorting, :boolean, default: false, doc: "Enable sorting controls for groups"
+  attr :group_states, :map, default: %{}, doc: "Map of group names to their state (collapsed: boolean, sort_icon: string)"
+  attr :toggle_group_sort_event, :string, default: "toggle_group_sort", doc: "Event name for toggling group sort order"
+  attr :toggle_group_collapse_event, :string, default: "toggle_group_collapse", doc: "Event name for toggling group collapse state"
 
   slot :start_section, required: false, doc: "Renders heex content in start of an element" do
     attr :class, :string, doc: "Custom CSS class for additional styling"
@@ -297,7 +326,7 @@ defmodule GeoWeb.Components.SearchCombobox do
             class="search-combobox-dropdown z-50 absolute w-full px-[3px] py-2 transition-all ease-out duration-[250ms] top-full mt-2"
             hidden
           >
-            <div :if={@searchable} class="mt-1 mb-2 mx-1.5">
+            <div class="mt-1 mb-2 mx-1.5">
               <input
                 type="text"
                 role="searchbox"
@@ -318,198 +347,91 @@ defmodule GeoWeb.Components.SearchCombobox do
               scrollbar_width="w-[4px]"
             >
               <div class="px-1.5">
-                <%= if @enable_group_sorting && (!Enum.empty?(@grouped_countries.iso_code_group) || !Enum.empty?(@grouped_countries.name_group)) do %>
-                  <!-- By search Code Group -->
-                  <div :if={!Enum.empty?(@grouped_countries.iso_code_group)} class={["option-group", @option_group_class]}>
-                    <div class="group-label font-semibold my-2 flex items-center justify-between">
-                      <div class="flex items-center gap-2">
-                        <button
-                          type="button"
-                          phx-click={@toggle_iso_code_group_event}
-                          class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                          title="Toggle group visibility"
-                        >
-                          <%= if Map.get(assigns, :iso_code_group_collapsed, false) do %>
-                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                              <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
-                            </svg>
-                          <% else %>
-                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                              <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
-                            </svg>
-                          <% end %>
-                        </button>
-                        <span>By search Code</span>
-                      </div>
-                      <button
-                        type="button"
-                        phx-click={@toggle_iso_code_sort_event}
-                        class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                        title="Toggle iso code sort order"
-                      >
-                        <span class="mr-1">Sort</span>
-                        <%= if Map.get(assigns, :code_sort_order, "asc") == "asc" do %>
-                          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                            <path stroke-linecap="round" stroke-linejoin="round" d="M8 15l4-4 4 4" />
-                          </svg>
-                        <% else %>
-                          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                            <path stroke-linecap="round" stroke-linejoin="round" d="M16 9l-4 4-4-4" />
-                          </svg>
-                        <% end %>
-                      </button>
-                    </div>
-
-                    <div :if={!@iso_code_group_collapsed} class="transition-all duration-200 ease-in-out">
-                      <.option
-                        :for={search <- @grouped_countries.iso_code_group}
-                        value={search.value}
-                      >
-                        {search.label}
-                      </.option>
-                    </div>
-                  </div>
-
-                  <!-- By search Name Group -->
-                  <div :if={!Enum.empty?(@grouped_countries.name_group)} class={["option-group mt-4", @option_group_class]}>
-                    <div class="group-label font-semibold my-2 flex items-center justify-between">
-                      <div class="flex items-center gap-2">
-                        <button
-                          type="button"
-                          phx-click={@toggle_name_group_event}
-                          class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                          title="Toggle group visibility"
-                        >
-                          <%= if @name_group_collapsed do %>
-                            <.icon name="hero-chevron-right" class="h-4 w-4" />
-                          <% else %>
-                            <.icon name="hero-chevron-down" class="h-4 w-4" />
-                          <% end %>
-                        </button>
-                        <span>By Name</span>
-                      </div>
-                      <button
-                        type="button"
-                        phx-click={@toggle_name_sort_event}
-                        class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                        title="Toggle name sort order"
-                      >
-                        <span class="mr-1">Sort</span>
-                        <%= if @name_sort_order == "asc" do %>
-                          <.icon name="hero-chevron-up" class="h-4 w-4" />
-                        <% else %>
-                          <.icon name="hero-chevron-down" class="h-4 w-4" />
-                        <% end %>
-                      </button>
-                    </div>
-
-                    <div :if={!@name_group_collapsed} class="transition-all duration-200 ease-in-out">
-                      <.option
-                        :for={search <- @grouped_countries.name_group}
-                        value={search.value}
-                      >
-                        {search.label}
-                      </.option>
-                    </div>
-                  </div>
-                <% else %>
-                  <!-- Handle slots with group sorting functionality -->
-                  <%= if @enable_group_sorting && Enum.any?(@option, &Map.has_key?(&1, :group)) do %>
-                    <%= for {group_label, grouped_options} <- Enum.group_by(@option, & &1[:group]) do %>
-                      <%= if !is_nil(group_label) do %>
-                        <div class={["option-group", if(group_label == "By search Name", do: "mt-4"), @option_group_class]}>
-                          <div class="group-label font-semibold my-2 flex items-center justify-between">
-                            <div class="flex items-center gap-2">
-                              <button
-                                type="button"
-                                phx-click={if group_label == "By search Code", do: @toggle_iso_code_group_event, else: @toggle_name_group_event}
-                                class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                                title="Toggle group visibility"
-                              >
-                                <%= if (group_label == "By search Code" && @iso_code_group_collapsed) || (group_label == "By search Name" && @name_group_collapsed) do %>
-                                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
-                                  </svg>
-                                <% else %>
-                                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
-                                  </svg>
-                                <% end %>
-                              </button>
-                              <span>{group_label}</span>
-                            </div>
+                <%= if @enable_group_sorting && Enum.any?(@option, &Map.has_key?(&1, :group)) do %>
+                  <!-- Dynamic Groups with Sorting and Collapsing -->
+                  <%= for {group_label, grouped_options} <- Enum.group_by(@option, & &1[:group]) do %>
+                    <%= if !is_nil(group_label) do %>
+                      <div class={["option-group", if(group_label != Enum.group_by(@option, & &1[:group]) |> Enum.to_list() |> List.first() |> elem(0), do: "mt-4"), @option_group_class]}>
+                        <div class="group-label font-semibold my-2 flex items-center justify-between">
+                          <div class="flex items-center gap-2">
                             <button
                               type="button"
-                              phx-click={if group_label == "By search Code", do: @toggle_iso_code_sort_event, else: @toggle_name_sort_event}
+                              phx-click={@toggle_group_collapse_event}
+                              phx-value-group={group_label}
                               class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                              title={"Toggle #{String.downcase(group_label)} sort order"}
+                              title="Toggle group visibility"
                             >
-                              <span class="mr-1">Sort</span>
-                              <%= if (group_label == "By search Code" && @code_sort_order == "asc") || (group_label == "By search Name" && @name_sort_order == "asc") do %>
-                                <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                  <path stroke-linecap="round" stroke-linejoin="round" d="M8 15l4-4 4 4" />
-                                </svg>
+                              <%= if get_in(@group_states, [group_label, :collapsed]) do %>
+                                <.icon name="hero-chevron-right" class="h-4 w-4" />
                               <% else %>
-                                <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                  <path stroke-linecap="round" stroke-linejoin="round" d="M16 9l-4 4-4-4" />
-                                </svg>
+                                <.icon name="hero-chevron-down" class="h-4 w-4" />
                               <% end %>
                             </button>
+                            <span>{group_label}</span>
                           </div>
+                          <%= if length(grouped_options) > 1 do %>
+                            <button
+                              type="button"
+                              phx-click={@toggle_group_sort_event}
+                              phx-value-group={group_label}
+                              class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
+                              title={"Toggle #{group_label} sort order"}
+                            >
+                              <span class="mr-1">Sort</span>
+                              <.icon name={get_in(@group_states, [group_label, :sort_icon]) || "hero-chevron-up"} class="h-4 w-4" />
+                            </button>
+                          <% end %>
+                        </div>
 
-                          <div
-                            :if={!((group_label == "By search Code" && @iso_code_group_collapsed) || (group_label == "By search Name" && @name_group_collapsed))}
-                            class="transition-all duration-200 ease-in-out"
+                        <div :if={!get_in(@group_states, [group_label, :collapsed])} class="transition-all duration-200 ease-in-out">
+                          <.option
+                            :for={option <- grouped_options}
+                            value={option[:value]}
+                            disabled={option[:disabled]}
+                            class={option[:class]}
                           >
-                            <.option
-                              :for={option <- grouped_options}
-                              value={option[:value]}
-                              disabled={option[:disabled]}
-                              class={option[:class]}
-                            >
-                              {render_slot(option)}
-                            </.option>
-                          </div>
+                            {render_slot(option)}
+                          </.option>
                         </div>
-                      <% end %>
-                    <% end %>
-                  <% else %>
-                    <!-- Regular ungrouped display -->
-                    <.option :for={{label, value} <- @options} :if={@options} value={value}>
-                      {label}
-                    </.option>
-
-                    <div
-                      :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
-                      :if={!is_nil(group_label)}
-                      class={["option-group", @option_group_class]}
-                    >
-                      <div class="group-label font-semibold my-2">{group_label}</div>
-
-                      <div>
-                        <.option
-                          :for={option <- grouped_options}
-                          value={option[:value]}
-                          disabled={option[:disabled]}
-                          class={option[:class]}
-                        >
-                          {render_slot(option)}
-                        </.option>
                       </div>
+                    <% end %>
+                  <% end %>
+                <% else %>
+                  <!-- Regular ungrouped or non-sortable display -->
+                  <.option :for={{label, value} <- @options} :if={@options} value={value}>
+                    {label}
+                  </.option>
+
+                  <div
+                    :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
+                    :if={!is_nil(group_label)}
+                    class={["option-group", @option_group_class]}
+                  >
+                    <div class="group-label font-semibold my-2">{group_label}</div>
+
+                    <div>
+                      <.option
+                        :for={option <- grouped_options}
+                        value={option[:value]}
+                        disabled={option[:disabled]}
+                        class={option[:class]}
+                      >
+                        {render_slot(option)}
+                      </.option>
                     </div>
+                  </div>
 
-                    <.option
-                      :for={option <- Enum.filter(@option, &is_nil(&1[:group]))}
-                      value={option[:value]}
-                      disabled={option[:disabled]}
-                      class={option[:class]}
-                    >
-                      {render_slot(option)}
-                    </.option>
-                  <% end %>
+                  <.option
+                    :for={option <- Enum.filter(@option, &is_nil(&1[:group]))}
+                    value={option[:value]}
+                    disabled={option[:disabled]}
+                    class={option[:class]}
+                  >
+                    {render_slot(option)}
+                  </.option>
                 <% end %>
 
-                <div :if={@searchable} class="no-results text-center hidden">
+                <div class="no-results text-center hidden">
                   {gettext("Nothing found!")}
                 </div>
               </div>
@@ -531,15 +453,6 @@ defmodule GeoWeb.Components.SearchCombobox do
       |> assign_new(:option, fn -> [] end)
       |> assign_new(:value, fn -> Map.get(assigns, :value) end)
 
-    # Prepare grouped search data if group sorting is enabled
-    grouped_countries = if assigns[:enable_group_sorting] do
-      prepare_search_groups(assigns[:options] || [], assigns[:enable_group_sorting], assigns[:code_sort_order], assigns[:name_sort_order])
-    else
-      %{iso_code_group: [], name_group: []}
-    end
-
-    assigns = assign(assigns, :grouped_countries, grouped_countries)
-
     ~H"""
     <div key={@key} class={[
       "leading-5",
@@ -655,7 +568,7 @@ defmodule GeoWeb.Components.SearchCombobox do
             class="search-combobox-dropdown z-50 absolute w-full px-[3px] py-2 transition-all ease-out duration-[250ms] top-full mt-2"
             hidden
           >
-            <div :if={@searchable} class="mt-1 mb-2 mx-1.5">
+            <div class="mt-1 mb-2 mx-1.5">
               <input
                 type="text"
                 role="searchbox"
@@ -676,198 +589,91 @@ defmodule GeoWeb.Components.SearchCombobox do
               scrollbar_width="w-[4px]"
             >
               <div class="px-1.5">
-                <%= if @enable_group_sorting && (!Enum.empty?(@grouped_countries.iso_code_group) || !Enum.empty?(@grouped_countries.name_group)) do %>
-                  <!-- By search Code Group -->
-                  <div :if={!Enum.empty?(@grouped_countries.iso_code_group)} class={["option-group", @option_group_class]}>
-                    <div class="group-label font-semibold my-2 flex items-center justify-between">
-                      <div class="flex items-center gap-2">
-                        <button
-                          type="button"
-                          phx-click={@toggle_iso_code_group_event}
-                          class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                          title="Toggle group visibility"
-                        >
-                          <%= if Map.get(assigns, :iso_code_group_collapsed, false) do %>
-                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                              <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
-                            </svg>
-                          <% else %>
-                            <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                              <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
-                            </svg>
-                          <% end %>
-                        </button>
-                        <span>By search Code</span>
-                      </div>
-                      <button
-                        type="button"
-                        phx-click={@toggle_iso_code_sort_event}
-                        class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                        title="Toggle iso code sort order"
-                      >
-                        <span class="mr-1">Sort</span>
-                        <%= if Map.get(assigns, :code_sort_order, "asc") == "asc" do %>
-                          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                            <path stroke-linecap="round" stroke-linejoin="round" d="M8 15l4-4 4 4" />
-                          </svg>
-                        <% else %>
-                          <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                            <path stroke-linecap="round" stroke-linejoin="round" d="M16 9l-4 4-4-4" />
-                          </svg>
-                        <% end %>
-                      </button>
-                    </div>
-
-                    <div :if={!@iso_code_group_collapsed} class="transition-all duration-200 ease-in-out">
-                      <.option
-                        :for={search <- @grouped_countries.iso_code_group}
-                        value={search.value}
-                      >
-                        {search.label}
-                      </.option>
-                    </div>
-                  </div>
-
-                  <!-- By search Name Group -->
-                  <div :if={!Enum.empty?(@grouped_countries.name_group)} class={["option-group mt-4", @option_group_class]}>
-                    <div class="group-label font-semibold my-2 flex items-center justify-between">
-                      <div class="flex items-center gap-2">
-                        <button
-                          type="button"
-                          phx-click={@toggle_name_group_event}
-                          class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                          title="Toggle group visibility"
-                        >
-                          <%= if @name_group_collapsed do %>
-                            <.icon name="hero-chevron-right" class="h-4 w-4" />
-                          <% else %>
-                            <.icon name="hero-chevron-down" class="h-4 w-4" />
-                          <% end %>
-                        </button>
-                        <span>By Name</span>
-                      </div>
-                      <button
-                        type="button"
-                        phx-click={@toggle_name_sort_event}
-                        class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                        title="Toggle name sort order"
-                      >
-                        <span class="mr-1">Sort</span>
-                        <%= if @name_sort_order == "asc" do %>
-                          <.icon name="hero-chevron-up" class="h-4 w-4" />
-                        <% else %>
-                          <.icon name="hero-chevron-down" class="h-4 w-4" />
-                        <% end %>
-                      </button>
-                    </div>
-
-                    <div :if={!@name_group_collapsed} class="transition-all duration-200 ease-in-out">
-                      <.option
-                        :for={search <- @grouped_countries.name_group}
-                        value={search.value}
-                      >
-                        {search.label}
-                      </.option>
-                    </div>
-                  </div>
-                <% else %>
-                  <!-- Handle slots with group sorting functionality -->
-                  <%= if @enable_group_sorting && Enum.any?(@option, &Map.has_key?(&1, :group)) do %>
-                    <%= for {group_label, grouped_options} <- Enum.group_by(@option, & &1[:group]) do %>
-                      <%= if !is_nil(group_label) do %>
-                        <div class={["option-group", if(group_label == "By search Name", do: "mt-4"), @option_group_class]}>
-                          <div class="group-label font-semibold my-2 flex items-center justify-between">
-                            <div class="flex items-center gap-2">
-                              <button
-                                type="button"
-                                phx-click={if group_label == "By search Code", do: @toggle_iso_code_group_event, else: @toggle_name_group_event}
-                                class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                                title="Toggle group visibility"
-                              >
-                                <%= if (group_label == "By search Code" && @iso_code_group_collapsed) || (group_label == "By search Name" && @name_group_collapsed) do %>
-                                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                    <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
-                                  </svg>
-                                <% else %>
-                                  <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
-                                  </svg>
-                                <% end %>
-                              </button>
-                              <span>{group_label}</span>
-                            </div>
+                <%= if @enable_group_sorting && Enum.any?(@option, &Map.has_key?(&1, :group)) do %>
+                  <!-- Dynamic Groups with Sorting and Collapsing -->
+                  <%= for {group_label, grouped_options} <- Enum.group_by(@option, & &1[:group]) do %>
+                    <%= if !is_nil(group_label) do %>
+                      <div class={["option-group", if(group_label != Enum.group_by(@option, & &1[:group]) |> Enum.to_list() |> List.first() |> elem(0), do: "mt-4"), @option_group_class]}>
+                        <div class="group-label font-semibold my-2 flex items-center justify-between">
+                          <div class="flex items-center gap-2">
                             <button
                               type="button"
-                              phx-click={if group_label == "By search Code", do: @toggle_iso_code_sort_event, else: @toggle_name_sort_event}
+                              phx-click={@toggle_group_collapse_event}
+                              phx-value-group={group_label}
                               class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
-                              title={"Toggle #{String.downcase(group_label)} sort order"}
+                              title="Toggle group visibility"
                             >
-                              <span class="mr-1">Sort</span>
-                              <%= if (group_label == "By search Code" && @code_sort_order == "asc") || (group_label == "By search Name" && @name_sort_order == "asc") do %>
-                                <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                  <path stroke-linecap="round" stroke-linejoin="round" d="M8 15l4-4 4 4" />
-                                </svg>
+                              <%= if get_in(@group_states, [group_label, :collapsed]) do %>
+                                <.icon name="hero-chevron-right" class="h-4 w-4" />
                               <% else %>
-                                <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
-                                  <path stroke-linecap="round" stroke-linejoin="round" d="M16 9l-4 4-4-4" />
-                                </svg>
+                                <.icon name="hero-chevron-down" class="h-4 w-4" />
                               <% end %>
                             </button>
+                            <span>{group_label}</span>
                           </div>
+                          <%= if length(grouped_options) > 1 do %>
+                            <button
+                              type="button"
+                              phx-click={@toggle_group_sort_event}
+                              phx-value-group={group_label}
+                              class="flex items-center text-sm opacity-80 hover:opacity-100 transition-opacity p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
+                              title={"Toggle #{group_label} sort order"}
+                            >
+                              <span class="mr-1">Sort</span>
+                              <.icon name={get_in(@group_states, [group_label, :sort_icon]) || "hero-chevron-up"} class="h-4 w-4" />
+                            </button>
+                          <% end %>
+                        </div>
 
-                          <div
-                            :if={!((group_label == "By search Code" && @iso_code_group_collapsed) || (group_label == "By search Name" && @name_group_collapsed))}
-                            class="transition-all duration-200 ease-in-out"
+                        <div :if={!get_in(@group_states, [group_label, :collapsed])} class="transition-all duration-200 ease-in-out">
+                          <.option
+                            :for={option <- grouped_options}
+                            value={option[:value]}
+                            disabled={option[:disabled]}
+                            class={option[:class]}
                           >
-                            <.option
-                              :for={option <- grouped_options}
-                              value={option[:value]}
-                              disabled={option[:disabled]}
-                              class={option[:class]}
-                            >
-                              {render_slot(option)}
-                            </.option>
-                          </div>
+                            {render_slot(option)}
+                          </.option>
                         </div>
-                      <% end %>
-                    <% end %>
-                  <% else %>
-                    <!-- Regular ungrouped display -->
-                    <.option :for={{label, value} <- @options} :if={@options} value={value}>
-                      {label}
-                    </.option>
-
-                    <div
-                      :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
-                      :if={!is_nil(group_label)}
-                      class={["option-group", @option_group_class]}
-                    >
-                      <div class="group-label font-semibold my-2">{group_label}</div>
-
-                      <div>
-                        <.option
-                          :for={option <- grouped_options}
-                          value={option[:value]}
-                          disabled={option[:disabled]}
-                          class={option[:class]}
-                        >
-                          {render_slot(option)}
-                        </.option>
                       </div>
+                    <% end %>
+                  <% end %>
+                <% else %>
+                  <!-- Regular ungrouped or non-sortable display -->
+                  <.option :for={{label, value} <- @options} :if={@options} value={value}>
+                    {label}
+                  </.option>
+
+                  <div
+                    :for={{group_label, grouped_options} <- Enum.group_by(@option, & &1[:group])}
+                    :if={!is_nil(group_label)}
+                    class={["option-group", @option_group_class]}
+                  >
+                    <div class="group-label font-semibold my-2">{group_label}</div>
+
+                    <div>
+                      <.option
+                        :for={option <- grouped_options}
+                        value={option[:value]}
+                        disabled={option[:disabled]}
+                        class={option[:class]}
+                      >
+                        {render_slot(option)}
+                      </.option>
                     </div>
+                  </div>
 
-                    <.option
-                      :for={option <- Enum.filter(@option, &is_nil(&1[:group]))}
-                      value={option[:value]}
-                      disabled={option[:disabled]}
-                      class={option[:class]}
-                    >
-                      {render_slot(option)}
-                    </.option>
-                  <% end %>
+                  <.option
+                    :for={option <- Enum.filter(@option, &is_nil(&1[:group]))}
+                    value={option[:value]}
+                    disabled={option[:disabled]}
+                    class={option[:class]}
+                  >
+                    {render_slot(option)}
+                  </.option>
                 <% end %>
 
-                <div :if={@searchable} class="no-results text-center hidden">
+                <div class="no-results text-center hidden">
                   {gettext("Nothing found!")}
                 </div>
               </div>
@@ -1375,58 +1181,4 @@ defmodule GeoWeb.Components.SearchCombobox do
       Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
     end
   end
-
-  defp prepare_search_groups(options, enable_group_sorting, code_sort_order, name_sort_order) do
-    if enable_group_sorting && !Enum.empty?(options) do
-      # Convert options to a consistent format
-      countries = Enum.map(options, fn
-        {label, value} -> %{label: label, value: value}
-        value when is_binary(value) -> %{label: value, value: value}
-      end)
-
-      # Sort by search code
-      code_sorted = case code_sort_order do
-        "desc" -> Enum.sort_by(countries, fn search ->
-          # Extract search code from label if it exists (format: "🇺🇸 United States (US)")
-          case Regex.run(~r/\(([A-Z]{2,3})\)$/, search.label) do
-            [_, code] -> code
-            _ -> search.value
-          end
-        end, :desc)
-        _ -> Enum.sort_by(countries, fn search ->
-          case Regex.run(~r/\(([A-Z]{2,3})\)$/, search.label) do
-            [_, code] -> code
-            _ -> search.value
-          end
-        end, :asc)
-      end
-
-      # Sort by search name
-      name_sorted = case name_sort_order do
-        "desc" -> Enum.sort_by(countries, fn search ->
-          # Extract search name from label (format: "🇺🇸 United States (US)")
-          case Regex.run(~r/^(?:\S+\s+)?(.+?)\s+\([A-Z]{2,3}\)$/, search.label) do
-            [_, name] -> name
-            _ -> search.label
-          end
-        end, :desc)
-        _ -> Enum.sort_by(countries, fn search ->
-          case Regex.run(~r/^(?:\S+\s+)?(.+?)\s+\([A-Z]{2,3}\)$/, search.label) do
-            [_, name] -> name
-            _ -> search.label
-          end
-        end, :asc)
-      end
-
-      %{
-        iso_code_group: code_sorted,
-        name_group: name_sorted
-      }
-    else
-      %{
-        iso_code_group: [],
-        name_group: []
-      }
-    end
-  end
 end
diff --git a/lib/geo_web/components/search_field.ex b/lib/geo_web/components/search_field.ex
deleted file mode 100644
index 3b8d194..0000000
--- a/lib/geo_web/components/search_field.ex
+++ /dev/null
@@ -1,1076 +0,0 @@
-defmodule GeoWeb.Components.SearchField do
-  @moduledoc """
-  The `GeoWeb.Components.SearchField` module provides a highly customizable search input
-  component for Phoenix LiveView applications. This component is designed to offer advanced
-  search functionality with support for custom styles, layouts, and interactions.
-
-  It includes features such as configurable size, border style, rounded corners, and color
-  variants, making it adaptable to various design requirements. The component also supports
-  optional start and end sections for icons or additional content, as well as a search button for executing queries.
-
-  The `SearchField` component is ideal for implementing search forms, filters, or any other
-  user interface elements where search functionality is needed. Its flexibility and ease of
-  integration make it a powerful tool for enhancing user experiences in Phoenix LiveView applications.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a `search_field` component that allows users to input search queries.
-  The component supports an optional search button and sections for custom content at the
-  start and end of the input.
-
-  ## Examples
-
-  ```elixir
-  <.search_field
-    name="search_query"
-    space="small"
-    color="primary"
-    size="small"
-    description="Search for items"
-    label="Search"
-    placeholder="Type your search query here"
-    floating="outer"
-    search_button
-  />
-
-  <.search_field
-    name="search_query"
-    space="small"
-    color="success"
-    description="Custom search field"
-    label="Search"
-    placeholder="Search something"
-    floating="outer"
-  >
-    <:start_section>
-      <.icon name="hero-search" class="size-4" />
-    </:start_section>
-    <:end_section>
-      <.icon name="hero-search" class="size-4" />
-    </:end_section>
-  </.search_field>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-  attr :search_button_class, :string, default: nil, doc: "Custom CSS class for the show password"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :search_button, :boolean, default: false, doc: "Specifies search button"
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form list maxlength minlength pattern placeholder
-        readonly required size spellcheck inputmode title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec search_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def search_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> search_field()
-  end
-
-  def search_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.search-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "search-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "search-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="search"
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-        <div
-          :if={@search_button}
-          class={["flex items-center justify-center shrink-0 pe-2", @search_button_class]}
-        >
-          <button class="flex items-center justify-center leading-5 focus:outline-none">
-            <.icon name="hero-magnifying-glass" class="search-field-icon" />
-          </button>
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def search_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.search-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["search-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "search-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "text-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="search"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-        <div
-          :if={@search_button}
-          class={["flex items-center justify-center shrink-0 pe-2", @search_button_class]}
-        >
-          <button class="flex items-center justify-center leading-5 focus:outline-none">
-            <.icon name="hero-magnifying-glass" class="search-field-icon" />
-          </button>
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small") do
-    "[&_.search-field-wrapper_inpendut]:h-8 [&_.search-field-wrapper_.search-field-icon]:size-3.5"
-  end
-
-  defp size_class("small") do
-    "[&_.search-field-wrapper_input]:h-9 [&_.search-field-wrapper_.search-field-icon]:size-4"
-  end
-
-  defp size_class("medium") do
-    "[&_.search-field-wrapper_input]:h-10 [&_.search-field-wrapper_.search-field-icon]:size-5"
-  end
-
-  defp size_class("large") do
-    "[&_.search-field-wrapper_input]:h-11 [&_.search-field-wrapper_.search-field-icon]:size-6"
-  end
-
-  defp size_class("extra_large") do
-    "[&_.search-field-wrapper_input]:h-12 [&_.search-field-wrapper_.search-field-icon]:size-7"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.search-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.search-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.search-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.search-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.search-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.search-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.search-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.search-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.search-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.search-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.search-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.search-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-white",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#27272a]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.search-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.search-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.search-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#DDDDDD]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.search-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.search-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#007F8C]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#01B8CA]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.search-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.search-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#266EF1]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#6DAAFB]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.search-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.search-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#0E8345]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#06C167]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.search-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.search-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#CA8D01]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#FDC034]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.search-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.search-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#CA8D01]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#FC7F79]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.search-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.search-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#0B84BA]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#3EB7ED]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.search-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.search-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#8750C5]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#BA83F9]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.search-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.search-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#A86438]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#DB976B]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.search-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.search-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#868686]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#A6A6A6]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.search-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#868686] dark:focus-within:[&_.search-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-white dark:[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.search-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.search-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.search-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#DDDDDD]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.search-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.search-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#007F8C]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#01B8CA]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.search-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.search-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#266EF1]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#6DAAFB]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.search-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.search-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#0E8345]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#06C167]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.search-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.search-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FDC034]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.search-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.search-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#DE1135]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FC7F79]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.search-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.search-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#3EB7ED]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.search-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.search-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#8750C5]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#BA83F9]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.search-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.search-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#A86438]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#DB976B]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.search-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.search-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#868686]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#A6A6A6]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#868686] dark:focus-within:[&_.search-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.search-field-wrapper]:bg-[#282828] text-[#282828] [&_.search-field-wrapper]:text-white",
-      "[&_.search-field-wrapper.search-field-error]:border-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white focus-within:[&_.search-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.search-field-wrapper]:bg-white [&_.search-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.search-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#282828]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#868686]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.search-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.search-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#016974]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#77D5E3]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.search-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.search-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#175BCC]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#002661]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#A9C9FF]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.search-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.search-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#166C3B]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#002F14]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#7FD99A]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.search-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.search-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#976A01]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#322300]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#FDD067]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.search-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.search-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#BB032A]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#520810]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#FFB2AB]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.search-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.search-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#0B84BA]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#03212F]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#6EC9F2]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.search-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.search-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#653C94]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#221431]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#CBA2FA]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.search-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.search-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#7E4B2A]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#2A190E]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#E4B190]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.search-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.search-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#727272]",
-      "[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:border-[#BBBBBB]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.search-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.search-field-wrapper]:ring-[#868686] dark:focus-within:[&_.search-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.search-field-wrapper]:bg-[#282828] text-[#282828] [&_.search-field-wrapper]:border-[#727272] text-white",
-      "[&_.search-field-wrapper>input]:placeholder:text-white focus-within:[&_.search-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.search-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#DDDDDD]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.search-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.search-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#007F8C]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#01B8CA]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.search-field-wrapper]:ring-[#01B8CA]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.search-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#266EF1]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#6DAAFB]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.search-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.search-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#0E8345]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#06C167]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.search-field-wrapper]:ring-[#06C167]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.search-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FDC034]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.search-field-wrapper]:ring-[#FDC034]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.search-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#DE1135]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#FC7F79]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.search-field-wrapper]:ring-[#FC7F79]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.search-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#3EB7ED]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.search-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.search-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#8750C5]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#BA83F9]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.search-field-wrapper]:ring-[#BA83F9]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.search-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#A86438]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#DB976B]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.search-field-wrapper]:ring-[#DB976B]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.search-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#868686]",
-      "dark:[&_.search-field-wrapper:not(:has(.search-field-error))]:bg-[#A6A6A6]",
-      "[&_.search-field-wrapper.search-field-error]:bg-rose-700",
-      "[&_.search-field-wrapper>input]:placeholder:text-white dark:[&_.search-field-wrapper>input]:placeholder:text-black",
-      "[&_.search-field-wrapper>input]:text-white dark:[&_.search-field-wrapper>input]:text-black",
-      "focus-within:[&_.search-field-wrapper]:ring-[#868686] dark:focus-within:[&_.search-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.search-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.search-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.search-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.search-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.search-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.search-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.search-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.search-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/sidebar.ex b/lib/geo_web/components/sidebar.ex
deleted file mode 100644
index 3231bde..0000000
--- a/lib/geo_web/components/sidebar.ex
+++ /dev/null
@@ -1,655 +0,0 @@
-defmodule GeoWeb.Components.Sidebar do
-  @moduledoc """
-  The `GeoWeb.Components.Sidebar` module provides a versatile and customizable sidebar
-  component for Phoenix LiveView applications. This component is designed to create a
-  navigation or information panel that can be toggled in and out of view, enhancing the user
-  experience by offering easy access to additional content or navigation links.
-
-  The component supports various configuration options, such as color themes, border styles,
-  size, and positioning. It also allows developers to control the visibility and behavior of
-  the sidebar through custom JavaScript actions. The sidebar can be positioned on either side of
-  the screen, and it includes options for different visual variants, such as shadowed or transparent styles.
-
-  The `Sidebar` component is ideal for building dynamic user interfaces that require collapsible
-  navigation or content panels, and it integrates seamlessly with other Phoenix LiveView components
-  for a cohesive and interactive application experience.
-  """
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  import Phoenix.LiveView.Utils, only: [random_id: 0]
-
-  @doc """
-  Renders a `sidebar` component that can be shown or hidden based on user interactions.
-
-  The sidebar supports various customizations such as size, color theme, and border style.
-
-  ## Examples
-
-  ```elixir
-  <.sidebar id="left" size="extra_small" color="dark" hide_position="left">
-    <div class="px-4 py-2">
-      <h2 class="text-white">Menu</h2>
-      ...
-    </div>
-  </.sidebar>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :minimize, :boolean,
-    default: false,
-    doc: "Determines Minimize button show or hide"
-
-  attr :position, :string, default: "start", doc: "Determines the element position"
-
-  attr :hide_position, :string,
-    values: ["left", "right"],
-    doc: "Determines what position should be hidden"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :hide_button_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :minimize_wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling"
-
-  attr :close_wrapper_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :content_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :minimize_icon_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :close_icon_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :close_button_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling for button"
-
-  attr :list_wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional to list wrapper"
-
-  attr :on_hide, JS, default: %JS{}, doc: "Custom JS module for on_hide action"
-  attr :on_show, JS, default: %JS{}, doc: "Custom JS module for on_show action"
-  attr :on_hide_away, JS, default: %JS{}, doc: "Custom JS module for on_hide_away action"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :item, doc: "Menu item slot for sidebar navigation items" do
-    attr :icon, :string, doc: "Icon name to display"
-    attr :icon_class, :string, doc: "CSS class for the icon"
-    attr :label, :string, doc: "Text label for the menu item"
-    attr :label_class, :string, doc: "CSS class for the label text"
-    attr :link, :string, doc: "URL for the item link"
-    attr :class, :string, doc: "CSS class for the entire item"
-    attr :link_class, :string, doc: "CSS class for the link"
-  end
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  @spec sidebar(map()) :: Phoenix.LiveView.Rendered.t()
-  def sidebar(assigns) do
-    assigns =
-      assigns
-      |> assign_new(:id, fn -> "sidebar-#{random_id()}" end)
-
-    ~H"""
-    <aside
-      id={@id}
-      phx-click-away={hide_sidebar(@on_hide_away, @id, @hide_position)}
-      phx-remove={hide_sidebar(@id, @hide_position)}
-      role="complementary"
-      class={[
-        "fixed h-screen transition-transform z-10 overflow-x-hidden",
-        border_class(@border, @position, @variant),
-        hide_position(@hide_position),
-        color_variant(@variant, @color),
-        position_class(@position),
-        size_class(@size),
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={["h-full overflow-y-auto overflow-x-hidden", @content_class]}>
-        <div :if={@minimize} class={["flex mb-0.5 justify-end", @minimize_wrapper_class]}>
-          <button
-            type="button"
-            phx-hook="Sidebar"
-            data-original-width={size_class(@size)}
-            id={"toggle-button-#{@id}"}
-            data-sidebar-selector={"##{@id}"}
-            aria-label={gettext("Minimize sidebar")}
-            class={[
-              "size-8 flex items-center justify-center leading-5",
-              "rounded focus:outline-none bg-gray-500/10 border",
-              "dark:border-gray-700 m-2 text-gray-500",
-              @hide_button_class
-            ]}
-          >
-            <.icon name="hero-chevron-right" class={["minimize-icon size-5", @minimize_icon_class]} />
-            <span class="sr-only">{gettext("Minimize sidebar")}</span>
-          </button>
-        </div>
-        <div class={[
-          "flex justify-end pt-2 px-2 mb-1 md:hidden dismiss-sidebar-wrapper",
-          @close_wrapper_class
-        ]}>
-          <button
-            type="button"
-            class={["dismiss-sidebar-button focus:outline-none", @close_button_class]}
-            aria-label={gettext("Close sidebar")}
-            phx-click={JS.exec(@on_hide, "phx-remove", to: "##{@id}")}
-          >
-            <.icon name="hero-x-mark" class={@close_icon_class} />
-            <span class="sr-only">{gettext("Close menu")}</span>
-          </button>
-        </div>
-
-        <ul :if={@item != []} class={@list_wrapper_class} role="list">
-          <li :for={item <- @item} class={item[:class]}>
-            <.link
-              href={item[:link]}
-              class={["sidebar-item-link flex items-center leading-5", item[:link_class]]}
-            >
-              <.icon :if={item[:icon]} name={item[:icon]} class={["shrink-0", item[:icon_class]]} />
-              <span class={["sidebar-text block ms-1", item[:label_class]]} data-item-label>
-                {item[:label] || render_slot(item)}
-              </span>
-            </.link>
-          </li>
-        </ul>
-        {render_slot(@inner_block)}
-      </div>
-    </aside>
-    """
-  end
-
-  @doc """
-  Shows the sidebar by applying specific CSS classes to animate it onto the screen.
-
-  ## Parameters
-
-    - `js`: A `Phoenix.LiveView.JS` struct used for managing client-side JavaScript interactions. Defaults to an empty `%JS{}`.
-    - `id`: A unique identifier (string) for the sidebar element to be shown. This should correspond to the `id` attribute of the sidebar HTML element.
-    - `position`: A string representing the initial position of the sidebar when hidden. Valid values include `"left"` or `"right"`, indicating whether the sidebar is off-screen to the left or right.
-
-  ## Returns
-
-    - Returns an updated `Phoenix.LiveView.JS` struct with the appropriate class changes applied to show the sidebar.
-
-  ## Example
-
-    ```elixir
-    show_sidebar(%JS{}, "sidebar-id", "right")
-    ```
-  This will show the sidebar with the ID "sidebar-id" by sliding it onto the screen from the right.
-  """
-
-  def show_sidebar(js \\ %JS{}, id, position) when is_binary(id) do
-    JS.remove_class(js, hide_position(position), to: "##{id}")
-    |> JS.add_class("transform-none", to: "##{id}")
-  end
-
-  @doc """
-  Hides the sidebar by applying specific CSS classes to animate it off-screen.
-
-  ## Parameters
-
-    - `js`: A `Phoenix.LiveView.JS` struct used for managing client-side JavaScript interactions. Defaults to an empty `%JS{}`.
-    - `id`: A unique identifier (string) for the sidebar element to be hidden. The ID should correspond to the `id` attribute of the sidebar HTML element.
-    - `position`: A string representing the direction in which the sidebar should be hidden. Valid values include `"left"` or `"right"`, indicating whether the sidebar will slide off the screen to the left or right, respectively.
-
-  ## Returns
-
-    - Returns an updated `Phoenix.LiveView.JS` struct with the appropriate class changes applied to hide the sidebar.
-
-  ## Example
-
-    ```elixir
-    hide_sidebar(%JS{}, "sidebar-id", "left")
-    ```
-
-  This will hide the sidebar with the ID "sidebar-id" by sliding it off-screen to the left.
-  """
-
-  def hide_sidebar(js \\ %JS{}, id, position) do
-    JS.remove_class(js, "transform-none", to: "##{id}")
-    |> JS.add_class(hide_position(position), to: "##{id}")
-  end
-
-  defp hide_position("left"), do: "-translate-x-full md:translate-x-0"
-  defp hide_position("right"), do: "translate-x-full md:translate-x-0"
-  defp hide_position(_), do: nil
-
-  defp position_class("start"), do: "top-0 start-0"
-  defp position_class("end"), do: "top-0 end-0"
-  defp position_class(params) when is_binary(params), do: params
-
-  defp border_class(_, _, variant)
-       when variant in ["default", "shadow", "transparent", "gradient"],
-       do: nil
-
-  defp border_class("none", _, _), do: "border-0"
-  defp border_class("extra_small", "start", _), do: "border-e"
-  defp border_class("small", "start", _), do: "border-e-2"
-  defp border_class("medium", "start", _), do: "border-e-[3px]"
-  defp border_class("large", "start", _), do: "border-e-4"
-  defp border_class("extra_large", "start", _), do: "border-e-[5px]"
-
-  defp border_class("extra_small", "end", _), do: "border-s"
-  defp border_class("small", "end", _), do: "border-s-2"
-  defp border_class("medium", "end", _), do: "border-s-[3px]"
-  defp border_class("large", "end", _), do: "border-s-4"
-  defp border_class("extra_large", "end", _), do: "border-s-[5px]"
-
-  defp border_class(params, _, _) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "w-60"
-
-  defp size_class("small"), do: "w-64"
-
-  defp size_class("medium"), do: "w-72"
-
-  defp size_class("large"), do: "w-80"
-
-  defp size_class("extra_large"), do: "w-96"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white",
-      "dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white",
-      "dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white",
-      "dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white",
-      "dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#DE1135] text-white",
-      "dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white",
-      "dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white",
-      "dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white",
-      "dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white",
-      "dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white",
-      "dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "bg-transparent text-[#007F8C] border-[#007F8C]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "bg-transparent text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "bg-transparent text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "bg-transparent text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "bg-transparent text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "bg-transparent text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "bg-transparent text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "bg-transparent text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "bg-transparent text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B]",
-      "dark:text-[#DDDDDD] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "bg-transparent text-[#007F8C]",
-      "dark:text-[#01B8CA] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "bg-transparent text-[#266EF1]",
-      "dark:text-[#6DAAFB] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "bg-transparent text-[#0E8345]",
-      "dark:text-[#06C167] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "bg-transparent text-[#CA8D01]",
-      "dark:text-[#FDC034] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "bg-transparent text-[#DE1135]",
-      "dark:text-[#FC7F79] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "bg-transparent text-[#0B84BA]",
-      "dark:text-[#3EB7ED] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "bg-transparent text-[#8750C5]",
-      "dark:text-[#BA83F9] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "bg-transparent text-[#A86438]",
-      "dark:text-[#DB976B] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "bg-transparent text-[#868686]",
-      "dark:text-[#A6A6A6] border-transparent"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/skeleton.ex b/lib/geo_web/components/skeleton.ex
deleted file mode 100644
index cb8778b..0000000
--- a/lib/geo_web/components/skeleton.ex
+++ /dev/null
@@ -1,146 +0,0 @@
-defmodule GeoWeb.Components.Skeleton do
-  @moduledoc """
-  The `GeoWeb.Components.Skeleton` module provides a reusable component for displaying skeleton
-  loaders in a Phoenix LiveView application. Skeleton loaders serve as placeholders to indicate
-  that content is currently loading or being processed, improving the user experience by offering
-  a visual cue in place of the final content.
-
-  ## Features
-
-  - **Size Options:** Multiple size options for both height and width, including
-  `extra_small`, `small`, `medium`, `large`, and `extra_large`. The width can also be set to
-  `full` to occupy the entire container.
-  - **Rounded Corners:** Configurable border radius with options for different sizes, as
-  well as `full` and `none` for complete circular shapes or no rounding at all.
-  - **Color Themes:** Various color options to match the design of the application, such as `white`,
-  `silver`, `primary`, `secondary`, `success`, `warning`, `danger`, `info`, `misc`, `dawn`, `light`, and `dark`.
-  - **Visibility Control:** The component's visibility can be toggled with the `visible` attribute,
-  allowing for dynamic control over when the skeleton is displayed.
-  - **Custom Animation:** The `animated` global attribute can be used to enable or disable a
-  pulsating animation effect, giving the skeleton loader a dynamic appearance.
-
-  This component is ideal for providing visual feedback during data fetching or other asynchronous
-  operations, making the UI more responsive and engaging for users.
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  Renders a `skeleton` loader component to indicate loading state in your application.
-  The skeleton component provides customizable options such as size, color, and rounded corners.
-
-  You can also add animations to create a more engaging user experience.
-
-  ## Examples
-
-  ```elixir
-  <div class="p-5 space-y-5">
-    <.skeleton animated />
-    <.skeleton height="h-[20px]" width="w-[150px]" />
-    <.skeleton animated height="h-[40px]" width="large" color="bg-rose-400" />
-    <.skeleton width="large" height="small" color="bg-rose-400" />
-    <.skeleton width="w-10" height="h-10" color="bg-green-400" rounded="full"/>
-  </div>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :height, :string, default: "extra_small", doc: "Determines the element width"
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-
-  attr :visible, :boolean, default: true, doc: ""
-
-  attr :rest, :global,
-    include: ~w(animated),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def skeleton(assigns) do
-    ~H"""
-    <div
-      :if={@visible}
-      role="status"
-      aria-live="polite"
-      aria-busy="true"
-      id={@id}
-      class={[
-        rounded_size(@rounded),
-        width_class(@width),
-        height_class(@height),
-        color_class(@color),
-        @rest[:animated] && "animate-pulse",
-        @class
-      ]}
-      {@rest}
-    >
-      <span class="sr-only">{gettext("Loading...")}</span>
-    </div>
-    """
-  end
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("full"), do: "rounded-full"
-
-  defp rounded_size("none"), do: "rounded-none"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp height_class("extra_small"), do: "h-1"
-  defp height_class("small"), do: "h-2"
-  defp height_class("medium"), do: "h-3"
-  defp height_class("large"), do: "h-4"
-  defp height_class("extra_large"), do: "h-5"
-  defp height_class(params) when is_binary(params), do: params
-
-  defp width_class("extra_small"), do: "w-60"
-  defp width_class("small"), do: "w-64"
-  defp width_class("medium"), do: "w-72"
-  defp width_class("large"), do: "w-80"
-  defp width_class("extra_large"), do: "w-96"
-  defp width_class("full"), do: "w-full"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp color_class("base"), do: "bg-[#e4e4e7] dark:bg-[#27272a]"
-
-  defp color_class("white"), do: "bg-white"
-
-  defp color_class("natural"), do: "bg-[#4B4B4B] dark:bg-[#DDDDDD]"
-
-  defp color_class("primary"), do: "bg-[#007F8C] dark:bg-[#01B8CA]"
-
-  defp color_class("secondary"), do: "bg-[#266EF1] dark:bg-[#6DAAFB]"
-
-  defp color_class("success"), do: "bg-[#0E8345] dark:bg-[#06C167]"
-
-  defp color_class("warning"), do: "bg-[#CA8D01] dark:bg-[#FDC034]"
-
-  defp color_class("danger"), do: "bg-[#DE1135] dark:bg-[#FC7F79]"
-
-  defp color_class("info"), do: "bg-[#0B84BA] dark:bg-[#3EB7ED]"
-
-  defp color_class("misc"), do: "bg-[#8750C5] dark:bg-[#BA83F9]"
-
-  defp color_class("dawn"), do: "bg-[#A86438] dark:bg-[#DB976B]"
-
-  defp color_class("silver"), do: "bg-[#868686] dark:bg-[#A6A6A6]"
-
-  defp color_class("dark"), do: "bg-[#282828]"
-
-  defp color_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/speed_dial.ex b/lib/geo_web/components/speed_dial.ex
deleted file mode 100644
index ff661df..0000000
--- a/lib/geo_web/components/speed_dial.ex
+++ /dev/null
@@ -1,762 +0,0 @@
-defmodule GeoWeb.Components.SpeedDial do
-  @moduledoc """
-  The `GeoWeb.Components.SpeedDial` module provides a versatile speed dial component for Phoenix
-  LiveView applications. This component enhances user interactions by offering a dynamic
-  menu of actions that can be triggered from a single button. The speed dial is
-  especially useful for applications that need to offer quick access to multiple
-  actions without cluttering the UI.
-
-  ## Features
-
-  - **Customizable Appearance:** Supports various size, color, and style options, including
-  `default`, `outline`,`shadow`, and `unbordered` variants. Users can control the
-  overall size, border radius, padding, and spacing between elements to fit different design requirements.
-  - **Action Configuration:** The `SpeedDial` component can hold multiple action items,
-  each with individual icons, colors, and navigation paths. Items can link to different parts
-  of the application, trigger patches, or direct to external URLs.
-  - **Interactive Control:** The speed dial can be toggled to show or hide the list of actions.
-  This makes it easy to manage the visibility of the component based on user interactions.
-  - **Flexible Positioning:** Allows placement at various positions on the screen, such as
-  `top-start`, `top-end`, `bottom-start`, and `bottom-end`. The position can be adjusted
-  based on the container's size and requirements.
-  - **Animation and Icon Support:** Includes built-in animation options for icons and button
-  states, creating an engaging user experience. Icons can be added or animated when hovering
-  over the speed dial button.
-
-  This component is perfect for implementing quick action menus in applications where users need
-  to perform frequent operations from a single access point.
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `speed_dial` component that provides quick access to multiple actions.
-  The speed dial can be configured with various styles, sizes, and colors.
-
-  It supports navigation, icons, and custom content in each item.
-
-  ## Examples
-
-  ```elixir
-  <.speed_dial icon="hero-plus" space="large" icon_animated id="test-1" size="extra_small" clickable>
-    <:item icon="hero-home" href="/examples/navbar" color="danger"></:item>
-    <:item icon="hero-bars-3" href="/examples/navbar" variant="shadow" color="misc">11</:item>
-    <:item icon="hero-chart-bar" href="/examples/navbar" variant="unbordered" color="warning">
-    </:item>
-  </.speed_dial>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :wrapper_content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to content"
-
-  attr :trigger_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to button"
-
-  attr :action_position, :string, default: "bottom-end", doc: ""
-  attr :position_size, :string, default: "large", doc: ""
-  attr :wrapper_position, :string, default: "top", doc: ""
-  attr :rounded, :string, default: "full", doc: "Determines the border radius"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :space, :string, default: "extra_small", doc: "Space between items"
-  attr :width, :string, default: "fit", doc: "Determines the element width"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :padding, :string, default: "extra_small", doc: "Determines padding for items"
-
-  attr :clickable, :boolean,
-    default: false,
-    doc: "Determines if the element can be activated on click"
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-
-  attr :icon_animated, :boolean,
-    default: false,
-    doc: "Determines whether element's icon has animation"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :item, required: false, doc: "Specifies item slot of a speed dial" do
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-
-    attr :navigate, :string,
-      doc: "Defines the path for navigation within the application using a `navigate` attribute."
-
-    attr :patch, :string, doc: "Specifies the path for navigation using a LiveView patch."
-    attr :href, :string, doc: "Sets the URL for an external link."
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :content_class, :string, doc: "Determines custom class for the content"
-    attr :color, :string, doc: "Determines color theme"
-    attr :variant, :string, doc: "Determines the style"
-    attr :icon_position, :string, doc: "Determines icon position"
-  end
-
-  slot :trigger_content, required: false, doc: "Determines triggered content" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def speed_dial(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "fixed group",
-        "[&_.speed-dial-content]:invisible [&_.speed-dial-content]:opacity-0",
-        "[&_.speed-dial-content.show-speed-dial]:visible [&_.speed-dial-content.show-speed-dial]:opacity-100",
-        "[&_.speed-dial-base]:flex [&_.speed-dial-base]:items-center [&_.speed-dial-base]:justify-center",
-        !@clickable && trigger_dial(),
-        action_position(@position_size, @action_position),
-        space_class(@space, @wrapper_position),
-        position_class(@wrapper_position),
-        rounded_size(@rounded),
-        border_class(@border, @variant),
-        padding_class(@padding),
-        width_class(@width),
-        size_class(@size),
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        class={[
-          "speed-dial-content flex items-center",
-          "absolute z-10 w-full transition-all ease-in-out delay-100 duratio-500",
-          (@wrapper_position == "top" || @wrapper_position == "bottom") && "flex-col",
-          @wrapper_content_class
-        ]}
-        id={@id && "#{@id}-speed-dial-content"}
-        role="menu"
-        phx-click-away={
-          @id &&
-            JS.remove_class("show-speed-dial",
-              to: "##{@id}-speed-dial-content",
-              transition: "duration-300"
-            )
-        }
-      >
-        <div
-          :for={{item, index} <- Enum.with_index(@item, 1)}
-          id={"#{@id}-item-#{index}"}
-          class={[
-            "speed-dial-item w-fit h-fit",
-            item[:icon_position] == "end" && "flex-row-reverse",
-            item[:class]
-          ]}
-        >
-          <.speed_dial_content id={@id} index={index} {item}>
-            {render_slot(item)}
-          </.speed_dial_content>
-        </div>
-        {render_slot(@inner_block)}
-      </div>
-
-      <button
-        type="button"
-        aria-haspopup="menu"
-        aria-controls={"#{@id}-speed-dial-content"}
-        class={["speed-dial-base", color_variant(@variant, @color), @trigger_class]}
-        phx-click={
-          @id &&
-            JS.toggle_class("show-speed-dial",
-              to: "##{@id}-speed-dial-content",
-              transition: "duration-100"
-            )
-        }
-      >
-        <.icon
-          :if={!is_nil(@icon)}
-          name={@icon}
-          class={[
-            "speed-dial-icon-base",
-            @icon_animated && "transition-transform group-hover:rotate-45"
-          ]}
-        />
-        <span :if={is_nil(@icon)} class={@trigger_content[:class]}>{@trigger_content}</span>
-        <span class="sr-only">{gettext("Open actions menu")}</span>
-      </button>
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :navigate, :string,
-    default: nil,
-    doc: "Defines the path for navigation within the application using a `navigate` attribute."
-
-  attr :patch, :string,
-    default: nil,
-    doc: "Specifies the path for navigation using a LiveView patch."
-
-  attr :href, :string, default: nil, doc: "Sets the URL for an external link."
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :variant, :string, default: "default", doc: "Determines the style"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Determines custom class for the icon"
-  attr :content_class, :string, default: nil, doc: "Determines custom class for the content"
-  attr :index, :integer, required: true, doc: "Determines item index"
-  attr :icon_position, :string, doc: "Determines icon position"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  defp speed_dial_content(%{navigate: nav, patch: pat, href: hrf} = assigns)
-       when is_binary(nav) or is_binary(pat) or is_binary(hrf) do
-    ~H"""
-    <.link
-      id={"#{@id}-speed-dial-item-#{@index}"}
-      class={["block speed-dial-base flex flex-col", color_variant(@variant, @color)]}
-      role="menuitem"
-      tabindex="0"
-      navigate={@navigate}
-      patch={@patch}
-      href={@href}
-    >
-      <.icon :if={@icon} name={@icon} class={["speed-dial-icon-base", @icon_class]} />
-      <span :if={is_nil(@icon)} class={["block text-xs text-center", @content_class]}>
-        {render_slot(@inner_block)}
-      </span>
-    </.link>
-    """
-  end
-
-  defp speed_dial_content(assigns) do
-    ~H"""
-    <div
-      id={"#{@id}-speed-dial-item-#{@index}"}
-      class={["speed-dial-base flex flex-col", color_variant(@variant, @color)]}
-    >
-      <.icon :if={@icon} name={@icon} class={["speed-dial-icon-base", @icon_class]} />
-      <span :if={is_nil(@icon)} class={["block text-xs text-center", @content_class]}>
-        {render_slot(@inner_block)}
-      </span>
-    </div>
-    """
-  end
-
-  defp trigger_dial(),
-    do: "[&_.speed-dial-content]:hover:visible [&_.speed-dial-content]:hover:opacity-100"
-
-  defp position_class("top") do
-    [
-      "[&_.speed-dial-content]:bottom-full [&_.speed-dial-content]:left-1/2",
-      "[&_.speed-dial-content]:-translate-x-1/2 [&_.speed-dial-content]:-translate-y-[6px]"
-    ]
-  end
-
-  defp position_class("bottom") do
-    [
-      "[&_.speed-dial-content]:top-full [&_.speed-dial-content]:left-1/2",
-      "[&_.speed-dial-content]:-translate-x-1/2 [&_.speed-dial-content]:translate-y-[6px]"
-    ]
-  end
-
-  defp position_class("left") do
-    [
-      "[&_.speed-dial-content]:right-full [&_.speed-dial-content]:top-1/2",
-      "[&_.speed-dial-content]:-translate-y-1/2 [&_.speed-dial-content]:-translate-x-[6px]"
-    ]
-  end
-
-  defp position_class("right") do
-    [
-      "[&_.speed-dial-content]:left-full [&_.speed-dial-content]:top-1/2",
-      "[&_.speed-dial-content]:-translate-y-1/2 [&_.speed-dial-content]:translate-x-[6px]"
-    ]
-  end
-
-  defp width_class("extra_small"), do: "[&_.speed-dial-content]:w-48"
-  defp width_class("small"), do: "[&_.speed-dial-content]:w-52"
-  defp width_class("medium"), do: "[&_.speed-dial-content]:w-56"
-  defp width_class("large"), do: "[&_.speed-dial-content]:w-60"
-  defp width_class("extra_large"), do: "[&_.speed-dial-content]:w-64"
-  defp width_class("double_large"), do: "[&_.speed-dial-content]:w-72"
-  defp width_class("triple_large"), do: "[&_.speed-dial-content]:w-80"
-  defp width_class("quadruple_large"), do: "[&_.speed-dial-content]:w-96"
-  defp width_class("fit"), do: "[&_.speed-dial-content]:w-fit"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small", "top"), do: "[&_.speed-dial-content]:space-y-2"
-
-  defp space_class("small", "top"), do: "[&_.speed-dial-content]:space-y-3"
-
-  defp space_class("medium", "top"), do: "[&_.speed-dial-content]:space-y-4"
-
-  defp space_class("large", "top"), do: "[&_.speed-dial-content]:space-y-5"
-
-  defp space_class("extra_large", "top"), do: "[&_.speed-dial-content]:space-y-6"
-
-  defp space_class("extra_small", "bottom"), do: "[&_.speed-dial-content]:space-y-2"
-
-  defp space_class("small", "bottom"), do: "[&_.speed-dial-content]:space-y-3"
-
-  defp space_class("medium", "bottom"), do: "[&_.speed-dial-content]:space-y-4"
-
-  defp space_class("large", "bottom"), do: "[&_.speed-dial-content]:space-y-5"
-
-  defp space_class("extra_large", "bottom"), do: "[&_.speed-dial-content]:space-y-6"
-
-  defp space_class("extra_small", "left"), do: "[&_.speed-dial-content]:space-x-2"
-
-  defp space_class("small", "left"), do: "[&_.speed-dial-content]:space-x-3"
-
-  defp space_class("medium", "left"), do: "[&_.speed-dial-content]:space-x-4"
-
-  defp space_class("large", "left"), do: "[&_.speed-dial-content]:space-x-5"
-
-  defp space_class("extra_large", "left"), do: "[&_.speed-dial-content]:space-x-6"
-
-  defp space_class("extra_small", "right"), do: "[&_.speed-dial-content]:space-x-2"
-
-  defp space_class("small", "right"), do: "[&_.speed-dial-content]:space-x-3"
-
-  defp space_class("medium", "right"), do: "[&_.speed-dial-content]:space-x-4"
-
-  defp space_class("large", "right"), do: "[&_.speed-dial-content]:space-x-5"
-
-  defp space_class("extra_large", "right"), do: "[&_.speed-dial-content]:space-x-6"
-
-  defp space_class(params, _) when is_binary(params), do: params
-
-  defp padding_class("none"), do: "[&_.speed-dial-content]:p-0"
-
-  defp padding_class("extra_small"), do: "[&_.speed-dial-content]:p-1"
-
-  defp padding_class("small"), do: "[&_.speed-dial-content]:p-1.5"
-
-  defp padding_class("medium"), do: "[&_.speed-dial-content]:p-2"
-
-  defp padding_class("large"), do: "[&_.speed-dial-content]:p-2.5"
-
-  defp padding_class("extra_large"), do: "[&_.speed-dial-content]:p-3"
-
-  defp padding_class(params) when is_binary(params), do: params
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size("extra_small"), do: "[&_.speed-dial-base]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.speed-dial-base]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.speed-dial-base]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.speed-dial-base]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.speed-dial-base]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.speed-dial-base]:rounded-full"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "[&_.speed-dial-content]:max-w-60 [&_.speed-dial-icon-base]:size-2.5 [&_.speed-dial-base]:size-7"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&_.speed-dial-content]:max-w-64 [&_.speed-dial-icon-base]:size-3 [&_.speed-dial-base]:size-8"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&_.speed-dial-content]:max-w-72 [&_.speed-dial-icon-base]:size-3.5 [&_.speed-dial-base]:size-9"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&_.speed-dial-content]:max-w-80 [&_.speed-dial-icon-base]:size-4 [&_.speed-dial-base]:size-10"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&_.speed-dial-content]:max-w-96 [&_.speed-dial-icon-base]:size-5 [&_.speed-dial-base]:size-11"
-    ]
-  end
-
-  defp size_class("double_large") do
-    [
-      "[&_.speed-dial-content]:max-w-96 [&_.speed-dial-icon-base]:size-6 [&_.speed-dial-base]:size-12"
-    ]
-  end
-
-  defp size_class("triple_large") do
-    [
-      "[&_.speed-dial-content]:max-w-96 [&_.speed-dial-icon-base]:size-7 [&_.speed-dial-base]:size-14"
-    ]
-  end
-
-  defp size_class("quadruple_large") do
-    [
-      "[&_.speed-dial-content]:max-w-96 [&_.speed-dial-icon-base]:size-8 [&_.speed-dial-base]:size-16"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "gradient"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.speed-dial-base]:border-0"
-  defp border_class("extra_small", _), do: "[&_.speed-dial-base]:border"
-  defp border_class("small", _), do: "[&_.speed-dial-base]:border-2"
-  defp border_class("medium", _), do: "[&_.speed-dial-base]:border-[3px]"
-  defp border_class("large", _), do: "[&_.speed-dial-base]:border-4"
-  defp border_class("extra_large", _), do: "[&_.speed-dial-base]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp action_position("none", "top-start"), do: "top-0 start-0"
-  defp action_position("extra_small", "top-start"), do: "top-1 start-4"
-  defp action_position("small", "top-start"), do: "top-2 start-5"
-  defp action_position("medium", "top-start"), do: "top-3 start-6"
-  defp action_position("large", "top-start"), do: "top-4 start-7"
-  defp action_position("extra_large", "top-start"), do: "top-8 start-8"
-
-  defp action_position("none", "top-end"), do: "top-0 end-0"
-  defp action_position("extra_small", "top-end"), do: "top-4 end-4"
-  defp action_position("small", "top-end"), do: "top-5 end-5"
-  defp action_position("medium", "top-end"), do: "top-6 end-6"
-  defp action_position("large", "top-end"), do: "top-7 end-7"
-  defp action_position("extra_large", "top-end"), do: "top-8 end-8"
-
-  defp action_position("none", "[&_.speed-dial-content]:start"), do: "bottom-0 start-0"
-  defp action_position("extra_small", "bottom-start"), do: "bottom-4 start-4"
-  defp action_position("small", "bottom-start"), do: "bottom-5 start-5"
-  defp action_position("medium", "bottom-start"), do: "bottom-6 start-6"
-  defp action_position("large", "bottom-start"), do: "bottom-8 start-8"
-  defp action_position("extra_large", "bottom-start"), do: "bottom-9 start-9"
-
-  defp action_position("none", "bottom-end"), do: "bottom-0 end-0"
-  defp action_position("extra_small", "bottom-end"), do: "bottom-4 end-4"
-  defp action_position("small", "bottom-end"), do: "bottom-5 end-5"
-  defp action_position("medium", "bottom-end"), do: "bottom-6 end-6"
-  defp action_position("large", "bottom-end"), do: "bottom-8 end-8"
-  defp action_position("extra_large", "bottom-end"), do: "bottom-9 end-9"
-  defp action_position(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/spinner.ex b/lib/geo_web/components/spinner.ex
deleted file mode 100644
index 21bf163..0000000
--- a/lib/geo_web/components/spinner.ex
+++ /dev/null
@@ -1,349 +0,0 @@
-defmodule GeoWeb.Components.Spinner do
-  @moduledoc """
-  The `GeoWeb.Components.Spinner` module provides a dynamic and customizable loading spinner
-  component for Phoenix LiveView applications. It supports various animation styles and
-  configurations to visually indicate ongoing processes or loading states within an application.
-
-  This module includes several types of spinners, offering a range of visual effects, such as
-  traditional spinning animations, bouncing dots, bars, and more intricate radial patterns.
-  It also allows extensive customization, including color themes and size variations,
-  making it adaptable to different UI designs and user interfaces.
-
-  With its flexible design, the `GeoWeb.Components.Spinner` module enables developers to provide
-  visual feedback for asynchronous operations, enhancing user experience and maintaining engagement
-  during content loading or background processes.
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-
-  @spinner_types [
-    "default",
-    "dots",
-    "bars",
-    "pinging"
-  ]
-
-  @doc """
-  Renders a customizable `spinner` component to indicate loading or processing states.
-  The spinner can be adjusted in size, color, and type to match the desired style and theme.
-
-  ## Examples
-
-  ```elixir
-  <.spinner color="danger" size="extra_small" type="pinging" />
-  <.spinner color="misc" type="pinging" />
-  <.spinner color="warning" size="medium" type="pinging" />
-  <.spinner color="success" size="large" type="pinging" />
-  <.spinner color="primary" size="extra_large" type="pinging" />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :type, :string, values: @spinner_types, default: "default", doc: ""
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  def spinner(assigns) do
-    ~H"""
-    <span
-      id={@id}
-      class={[
-        default_class(@type),
-        size_class(@type, @size),
-        color_class(@color),
-        @class
-      ]}
-      role="status"
-      {@rest}
-    >
-      <.spinner_content type={@type} />
-    </span>
-    """
-  end
-
-  @doc type: :component
-  attr :type, :string, values: @spinner_types
-
-  defp spinner_content(%{type: "pinging"} = assigns) do
-    ~H"""
-    <span class="sr-only">{gettext("Loading...")}</span>
-    <svg viewBox="0 0 45 45" xmlns="http://www.w3.org/2000/svg">
-      <g fill="none" fill-rule="evenodd" transform="translate(1 1)" stroke-width="2">
-        <circle cx="22" cy="22" r="6" stroke-opacity="0">
-          <animate
-            attributeName="r"
-            begin="1.5s"
-            dur="3s"
-            values="6;22"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-          <animate
-            attributeName="stroke-opacity"
-            begin="1.5s"
-            dur="3s"
-            values="1;0"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-          <animate
-            attributeName="stroke-width"
-            begin="1.5s"
-            dur="3s"
-            values="2;0"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-        </circle>
-        <circle cx="22" cy="22" r="6" stroke-opacity="0">
-          <animate
-            attributeName="r"
-            begin="3s"
-            dur="3s"
-            values="6;22"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-          <animate
-            attributeName="stroke-opacity"
-            begin="3s"
-            dur="3s"
-            values="1;0"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-          <animate
-            attributeName="stroke-width"
-            begin="3s"
-            dur="3s"
-            values="2;0"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-        </circle>
-        <circle cx="22" cy="22" r="8">
-          <animate
-            attributeName="r"
-            begin="0s"
-            dur="1.5s"
-            values="6;1;2;3;4;5;6"
-            calcMode="linear"
-            repeatCount="indefinite"
-          >
-          </animate>
-        </circle>
-      </g>
-    </svg>
-    """
-  end
-
-  defp spinner_content(%{type: "dots"} = assigns) do
-    ~H"""
-    <span class="sr-only">{gettext("Loading...")}</span>
-    <span class="block rounded-full animate-bounce"></span>
-    <span class="block rounded-full animate-bounce [animation-delay:-0.2s]"></span>
-    <span class="block rounded-full animate-bounce [animation-delay:-0.4s]"></span>
-    """
-  end
-
-  defp spinner_content(%{type: "bars"} = assigns) do
-    ~H"""
-    <span class="sr-only">{gettext("Loading...")}</span>
-    <span class="block rounded-sm animate-bounce [animation-delay:-0.4s]"></span>
-    <span class="block rounded-sm animate-bounce [animation-delay:-0.2s]"></span>
-    <span class="block rounded-sm animate-bounce"></span>
-    """
-  end
-
-  defp spinner_content(assigns) do
-    ~H"""
-    <span class="sr-only">{gettext("Loading...")}</span>
-    """
-  end
-
-  defp default_class("dots") do
-    "w-fit flex space-x-2 justify-center items-center"
-  end
-
-  defp default_class("bars") do
-    "w-fit flex gap-2"
-  end
-
-  defp default_class("pinging"), do: "block"
-
-  defp default_class(_) do
-    "animate-spin border-t-transparent rounded-full border-current block"
-  end
-
-  defp size_class("dots", "extra_small"), do: "[&>span]:size-1"
-
-  defp size_class("dots", "small"), do: "[&>span]:size-1.5"
-
-  defp size_class("dots", "medium"), do: "[&>span]:size-2"
-
-  defp size_class("dots", "large"), do: "[&>span]:size-2.5"
-
-  defp size_class("dots", "extra_large"), do: "[&>span]:size-3"
-
-  defp size_class("dots", "double_large"), do: "[&>span]:size-3.5"
-
-  defp size_class("dots", "triple_large"), do: "[&>span]:size-4"
-
-  defp size_class("dots", "quadruple_large"), do: "[&>span]:size-5"
-
-  defp size_class("bars", "extra_small"), do: "[&>span]:w-1 [&>span]:h-5"
-
-  defp size_class("bars", "small"), do: "[&>span]:w-1 [&>span]:h-6"
-
-  defp size_class("bars", "medium"), do: "[&>span]:w-1.5 [&>span]:h-7"
-
-  defp size_class("bars", "large"), do: "[&>span]:w-1.5 [&>span]:h-8"
-
-  defp size_class("bars", "extra_large"), do: "[&>span]:w-2 [&>span]:h-9"
-
-  defp size_class("bars", "double_large"), do: "[&>span]:w-2 [&>span]:h-10"
-
-  defp size_class("bars", "triple_large"), do: "[&>span]:w-2.5 [&>span]:h-11"
-
-  defp size_class("bars", "quadruple_large"), do: "[&>span]:w-2.5 [&>span]:h-12"
-
-  defp size_class("pinging", "extra_small"), do: "[&>svg]:size-6"
-
-  defp size_class("pinging", "small"), do: "[&>svg]:size-7"
-
-  defp size_class("pinging", "medium"), do: "[&>svg]:size-8"
-
-  defp size_class("pinging", "large"), do: "[&>svg]:size-9"
-
-  defp size_class("pinging", "extra_large"), do: "[&>svg]:size-10"
-
-  defp size_class("pinging", "double_large"), do: "[&>svg]:size-12"
-
-  defp size_class("pinging", "triple_large"), do: "[&>svg]:size-14"
-
-  defp size_class("pinging", "quadruple_large"), do: "[&>svg]:size-16"
-
-  defp size_class("default", "extra_small"), do: "size-3.5 border-2"
-
-  defp size_class("default", "small"), do: "size-4 border-[3px]"
-
-  defp size_class("default", "medium"), do: "size-5 border-4"
-
-  defp size_class("default", "large"), do: "size-6 border-[5px]"
-
-  defp size_class("default", "extra_large"), do: "size-7 border-[5px]"
-
-  defp size_class("default", "double_large"), do: "size-8 border-[5px]"
-
-  defp size_class("default", "triple_large"), do: "size-9 border-[6px]"
-
-  defp size_class("default", "quadruple_large"), do: "size-10 border-[6px]"
-
-  defp size_class(_, params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "[&>span]:bg-[#e4e4e7] [&>svg]:stroke-[#e4e4e7] text-[#e4e4e7]",
-      "dark:[&>span]:bg-[#27272a] dark:[&>svg]:stroke-[#27272a] dark:text-[#27272a]"
-    ]
-  end
-
-  defp color_class("white") do
-    ["[&>span]:bg-white [&>svg]:stroke-white text-white"]
-  end
-
-  defp color_class("dark") do
-    ["[&>span]:bg-[#282828] [&>svg]:stroke-[#282828] text-[#282828]"]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&>span]:bg-[#4B4B4B] [&>svg]:stroke-[#4B4B4B] text-[#4B4B4B]",
-      "dark:[&>span]:bg-[#DDDDDD] dark:[&>svg]:stroke-[#DDDDDD] dark:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "[&>span]:bg-[#007F8C] [&>svg]:stroke-[#007F8C] text-[#007F8C]",
-      "dark:[&>span]:bg-[#01B8CA] dark:[&>svg]:stroke-[#01B8CA] dark:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&>span]:bg-[#266EF1] [&>svg]:stroke-[#266EF1] text-[#266EF1]",
-      "dark:[&>span]:bg-[#6DAAFB] dark:[&>svg]:stroke-[#6DAAFB] dark:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&>span]:bg-[#0E8345] [&>svg]:stroke-[#0E8345] text-[#0E8345]",
-      "dark:[&>span]:bg-[#06C167] dark:[&>svg]:stroke-[#06C167] dark:text-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&>span]:bg-[#CA8D01] [&>svg]:stroke-[#CA8D01] text-[#CA8D01]",
-      "dark:[&>span]:bg-[#FDC034] dark:[&>svg]:stroke-[#FDC034] dark:text-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&>span]:bg-[#DE1135] [&>svg]:stroke-[#DE1135] text-[#DE1135]",
-      "dark:[&>span]:bg-[#FC7F79] dark:[&>svg]:stroke-[#FC7F79] dark:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&>span]:bg-[#0B84BA] [&>svg]:stroke-[#0B84BA] text-[#0B84BA]",
-      "dark:[&>span]:bg-[#3EB7ED] dark:[&>svg]:stroke-[#3EB7ED] dark:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&>span]:bg-[#8750C5] [&>svg]:stroke-[#8750C5] text-[#8750C5]",
-      "dark:[&>span]:bg-[#BA83F9] dark:[&>svg]:stroke-[#BA83F9] dark:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&>span]:bg-[#A86438] [&>svg]:stroke-[#A86438] text-[#A86438]",
-      "dark:[&>span]:bg-[#DB976B] dark:[&>svg]:stroke-[#DB976B] dark:text-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&>span]:bg-[#868686] [&>svg]:stroke-[#868686] text-[#868686]",
-      "dark:[&>span]:bg-[#A6A6A6] dark:[&>svg]:stroke-[#A6A6A6] dark:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/stepper.ex b/lib/geo_web/components/stepper.ex
deleted file mode 100644
index ef2e4ca..0000000
--- a/lib/geo_web/components/stepper.ex
+++ /dev/null
@@ -1,1012 +0,0 @@
-defmodule GeoWeb.Components.Stepper do
-  @moduledoc """
-  The `GeoWeb.Components.Stepper` module provides a flexible and interactive stepper component
-  for Phoenix LiveView applications. It supports both horizontal and vertical layouts,
-  making it ideal for displaying multi-step processes, such as onboarding, forms, or any
-  workflow that requires users to follow a sequence of steps.
-
-  This module allows extensive customization options, including size, color themes, border styles,
-  and spacing between steps. Each step can display icons, titles, descriptions, and custom content.
-  The component also offers various step states like `current`, `loading`, `completed`, and `canceled`,
-  enabling a visual indication of the user's progress.
-
-  The `GeoWeb.Components.Stepper` enhances user experience by providing a clear and concise representation
-  of step-by-step workflows, ensuring users can easily track their position and progress within the application.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-  use Gettext, backend: GeoWeb.Gettext
-
-  @doc """
-  Renders a customizable `stepper` component that visually represents a multi-step process.
-  This component can be configured to display either horizontally or vertically, with various
-  styling options like color, size, and spacing.
-
-  ## Examples
-
-  ```elixir
-  <.stepper color="info" size="extra_large">
-    <.stepper_section step="current" title="First step" description="Create an account" />
-    <.stepper_section title="Second Step" description="Verify email" />
-    <.stepper_section title="Third Step" description="Get full access" />
-  </.stepper>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :margin, :string, default: "medium", doc: "Determines the element margin"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :max_width, :string, default: "", doc: "Determines the style of element max width"
-  attr :separator_size, :string, default: "extra_small", doc: "Determines the separator size"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :vertical, :boolean, default: false, doc: "Determines whether element is vertical"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :col_step, :boolean, default: false, doc: "Custom CSS class for additional styling"
-
-  attr :col_step_position, :string,
-    default: "start",
-    doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  @spec stepper(map()) :: Phoenix.LiveView.Rendered.t()
-  def stepper(%{vertical: true} = assigns) do
-    ~H"""
-    <div
-      role="list"
-      class={[
-        "vertical-stepper relative flex flex-col",
-        "[&_.vertical-step:last-child_.stepper-separator]:hidden",
-        step_visibility(),
-        border_class(@border),
-        space_class(@space),
-        size_class(@size),
-        color_variant(@variant, @color),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  def stepper(assigns) do
-    ~H"""
-    <div
-      role="list"
-      id={@id}
-      class={[
-        "group flex flex-row flex-start items-center flex-wrap gap-y-5",
-        "[&_.stepper-separator:last-child]:hidden",
-        step_visibility(),
-        size_class(@size),
-        color_variant(@variant, @color),
-        border_class(@border),
-        wrapper_width(@max_width),
-        separator_margin(@margin),
-        separator_size(@separator_size),
-        col_step_position(@col_step_position),
-        @col_step && "col-step",
-        @col_step_position && "col-step-position",
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a `stepper_section` within the stepper component, representing each individual step of
-  a multi-step process.
-
-  This section can display information such as the step number, title, description, and an icon.
-  It can also be customized to show different states, such as current, loading, completed, or canceled.
-
-  ## Examples
-
-  Horizontal Step Section:
-
-  ```elixir
-  <.stepper_section step="current" title="First step" description="Create an account" />
-  <.stepper_section title="Second Step" description="Verify email" />
-  <.stepper_section title="Third Step" description="Get full access" />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :separator_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to separator"
-
-  attr :icon_wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to separator"
-
-  attr :number_wrapper_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to separator"
-
-  attr :content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to content"
-
-  attr :description_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to description"
-
-  attr :title_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to title"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :step, :string,
-    values: ["none", "current", "loading", "completed", "canceled"],
-    default: "none"
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :step_number, :integer, default: 1
-  attr :vertical, :boolean, default: false, doc: "Determines whether element is vertical"
-
-  attr :clickable, :boolean,
-    default: true,
-    doc: "Determines if the element can be activated on click"
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :space, :string, default: "small", doc: "Switches the order of the element and label"
-  attr :border, :string, default: "", doc: "Determines border style"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def stepper_section(%{vertical: true} = assigns) do
-    ~H"""
-    <button
-      id={@id}
-      role="listitem"
-      aria-label={gettext("Step %{number}: %{title}", number: @step_number, title: @title)}
-      aria-disabled={!@clickable}
-      aria-current={@step == "current" && "step"}
-      class={[
-        "stepper-#{@step}-step",
-        "vertical-step overflow-hidden flex flex-row text-start gap-4",
-        @class
-      ]}
-      disabled={!@clickable}
-      {@rest}
-    >
-      <span class="block relative">
-        <span class={["stepper-separator block h-screen absolute start-1/2", @separator_class]}>
-        </span>
-        <span
-          :if={@icon}
-          class={[
-            "stepper-step relative border-2 rounded-full flex justify-center items-center shrink-0",
-            "transition-all ease-in-out duration-400 delay-100",
-            @icon_wrapper_class
-          ]}
-        >
-          <.icon name={@icon} class="step-symbol stepper-icon" />
-          <.loader :if={@step == "loading"} />
-          <.icon
-            :if={@step == "completed"}
-            name="hero-check-solid"
-            class={[
-              "stepper-icon stepper-completed-icon",
-              "transition-all ease-in-out duration-400 delay-100"
-            ]}
-          />
-        </span>
-
-        <span
-          :if={!@icon}
-          class={[
-            "stepper-step relative border-2 rounded-full flex justify-center items-center shrink-0",
-            "transition-all ease-in-out duration-400 delay-100",
-            @number_wrapper_class
-          ]}
-        >
-          <span class="step-symbol">{@step_number}</span>
-          <.loader :if={@step == "loading"} />
-          <.icon
-            :if={@step == "completed"}
-            name="hero-check-solid"
-            class={[
-              "stepper-icon stepper-completed-icon",
-              "transition-all ease-in-out duration-400 delay-100"
-            ]}
-          />
-        </span>
-      </span>
-
-      <span class={["stepper-content block", @content_class]}>
-        <span :if={@title} class={["block font-bold text-wrap", @title_class]}>
-          {@title}
-        </span>
-
-        <span :if={@description} class={["block text-xs text-wrap", @description_class]}>
-          {@description}
-        </span>
-
-        {render_slot(@inner_block)}
-      </span>
-    </button>
-    """
-  end
-
-  def stepper_section(assigns) do
-    ~H"""
-    <button
-      id={@id}
-      role="listitem"
-      aria-label={gettext("Step %{number}: %{title}", number: @step_number, title: @title)}
-      aria-disabled={!@clickable}
-      aria-current={@step == "current" && "step"}
-      class={[
-        "stepper-#{@step}-step",
-        "text-start flex flex-nowrap shrink-0",
-        "group-[:not(.col-step)]:justify-center group-[:not(.col-step)]:items-center",
-        @reverse && "flex-row-reverse text-end",
-        "group-[.col-step]:flex-col group-[.col-step]:gap-3",
-        content_space(@space, @reverse),
-        @class
-      ]}
-      disabled={!@clickable}
-      {@rest}
-    >
-      <span
-        :if={@icon}
-        class={[
-          "stepper-step border-2 rounded-full flex justify-center items-center shrink-0",
-          "transition-all ease-in-out duration-400 delay-100",
-          @icon_wrapper_class
-        ]}
-      >
-        <.icon name={@icon} class="step-symbol stepper-icon" />
-        <.loader :if={@step == "loading"} />
-        <.icon
-          :if={@step == "completed"}
-          name="hero-check-solid"
-          class={[
-            "stepper-icon stepper-completed-icon",
-            "transition-all ease-in-out duration-400 delay-100"
-          ]}
-        />
-      </span>
-
-      <span
-        :if={!@icon}
-        class={[
-          "stepper-step border-2 rounded-full flex justify-center items-center shrink-0",
-          "transition-all ease-in-out duration-400 delay-100",
-          @number_wrapper_class
-        ]}
-      >
-        <span class="step-symbol">{@step_number}</span>
-        <.loader :if={@step == "loading"} />
-        <.icon
-          :if={@step == "completed"}
-          name="hero-check-solid"
-          class={[
-            "stepper-icon stepper-completed-icon",
-            "transition-all ease-in-out duration-400 delay-100"
-          ]}
-        />
-      </span>
-
-      <span class={[
-        "stepper-content block",
-        @content_class
-      ]}>
-        <span :if={@title} class={["block font-bold text-wrap", @title_class]}>
-          {@title}
-        </span>
-
-        <span :if={@description} class={["block text-xs text-wrap", @description_class]}>
-          {@description}
-        </span>
-
-        {render_slot(@inner_block)}
-      </span>
-    </button>
-
-    <div class="stepper-separator w-full flex-1"></div>
-    """
-  end
-
-  defp loader(assigns) do
-    ~H"""
-    <svg
-      aria-hidden="true"
-      class="stepper-icon stepper-loading-icon text-gray-200 dark:text-gray-400 animate-spin"
-      stroke="currentColor"
-      viewBox="0 0 100 101"
-      fill="none"
-      xmlns="http://www.w3.org/2000/svg"
-    >
-      <path
-        d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
-        fill="currentColor"
-      />
-      <path
-        d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
-        fill="currentFill"
-      />
-    </svg>
-    """
-  end
-
-  defp step_visibility() do
-    [
-      "[&_.stepper-loading-icon]:block",
-      "[&_.stepper-loading-icon]:visible",
-      "[&_.stepper-loading-icon]:opacity-100",
-      "[&_.stepper-completed-step_.stepper-completed-icon]:block",
-      "[&_.stepper-completed-step_.stepper-completed-icon]:visible",
-      "[&_.stepper-completed-step_.stepper-completed-icon]:opacity-100",
-      "[&_.stepper-completed-step_.step-symbol]:hidden",
-      "[&_.stepper-completed-step_.step-symbol]:invisible",
-      "[&_.stepper-completed-step_.step-symbol]:opacity-0",
-      "[&_.stepper-loading-step_.step-symbol]:hidden",
-      "[&_.stepper-loading-step_.step-symbol]:invisible",
-      "[&_.stepper-loading-step_.step-symbol]:opacity-0"
-    ]
-  end
-
-  defp content_space("extra_small", reverse?) do
-    [
-      (reverse? && "group-[:not(.col-step)_.stepper-content]:me-1") ||
-        "group-[:not(.col-step)_.stepper-content]:ms-1"
-    ]
-  end
-
-  defp content_space("small", reverse?) do
-    [
-      (reverse? && "group-[:not(.col-step)_.stepper-content]:me-2") ||
-        "group-[:not(.col-step)_.stepper-content]:ms-2"
-    ]
-  end
-
-  defp content_space("medium", reverse?) do
-    [
-      (reverse? && "group-[:not(.col-step)_.stepper-content]:me-3") ||
-        "group-[:not(.col-step)_.stepper-content]:ms-3"
-    ]
-  end
-
-  defp content_space("large", reverse?) do
-    [
-      (reverse? && "group-[:not(.col-step)_.stepper-content]:me-4") ||
-        "group-[:not(.col-step)_.stepper-content]:ms-4"
-    ]
-  end
-
-  defp content_space("extra_large", reverse?) do
-    [
-      (reverse? && "group-[:not(.col-step)_.stepper-content]:me-5") ||
-        "group-[:not(.col-step)_.stepper-content]:ms-5"
-    ]
-  end
-
-  defp col_step_position("start") do
-    [
-      "[&.col-step-position>button]:items-start [&.col-step-position>button]:text-start"
-    ]
-  end
-
-  defp col_step_position("end") do
-    [
-      "[&.col-step-position>button]:items-end [&.col-step-position>button]:text-end"
-    ]
-  end
-
-  defp col_step_position("center") do
-    [
-      "[&.col-step-position>button]:items-center [&.col-step-position>button]:text-center"
-    ]
-  end
-
-  defp separator_margin("none") do
-    [
-      "[&_.stepper-separator]:mx-0"
-    ]
-  end
-
-  defp separator_margin("extra_small") do
-    [
-      "[&_.stepper-separator]:mx-1",
-      "xl:[&_.stepper-separator]:mx-3"
-    ]
-  end
-
-  defp separator_margin("small") do
-    [
-      "[&_.stepper-separator]:mx-2",
-      "xl:[&_.stepper-separator]:mx-4"
-    ]
-  end
-
-  defp separator_margin("medium") do
-    [
-      "[&_.stepper-separator]:mx-2",
-      "xl:[&_.stepper-separator]:mx-6"
-    ]
-  end
-
-  defp separator_margin("large") do
-    [
-      "[&_.stepper-separator]:mx-3",
-      "xl:[&_.stepper-separator]:mx-8"
-    ]
-  end
-
-  defp separator_margin("extra_large") do
-    [
-      "[&_.stepper-separator]:mx-3",
-      "xl:[&_.stepper-separator]:mx-10"
-    ]
-  end
-
-  defp separator_margin(params) when is_binary(params), do: params
-
-  defp border_class("extra_small") do
-    [
-      "[&.vertical-stepper_.stepper-separator]:border-s",
-      "[&:not(.vertical-stepper)_.stepper-separator]:border-t"
-    ]
-  end
-
-  defp border_class("small") do
-    [
-      "[&.vertical-stepper_.stepper-separator]:border-s-2",
-      "[&:not(.vertical-stepper)_.stepper-separator]:border-t-2"
-    ]
-  end
-
-  defp border_class("medium") do
-    [
-      "[&.vertical-stepper_.stepper-separator]:border-s-[3px]",
-      "[&:not(.vertical-stepper)_.stepper-separator]:border-t-[3px]"
-    ]
-  end
-
-  defp border_class("large") do
-    [
-      "[&.vertical-stepper_.stepper-separator]:border-s-4",
-      "[&:not(.vertical-stepper)_.stepper-separator]:border-t-4"
-    ]
-  end
-
-  defp border_class("extra_large") do
-    [
-      "[&.vertical-stepper_.stepper-separator]:border-s-[5px]",
-      "[&:not(.vertical-stepper)_.stepper-separator]:border-t-[5px]"
-    ]
-  end
-
-  defp border_class(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-2"
-
-  defp space_class("medium"), do: "space-y-3"
-
-  defp space_class("large"), do: "space-y-4"
-
-  defp space_class("extra_large"), do: "space-y-5"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp wrapper_width("extra_small"), do: "max-w-1/4"
-  defp wrapper_width("small"), do: "max-w-2/4"
-  defp wrapper_width("medium"), do: "max-w-3/4"
-  defp wrapper_width("large"), do: "max-w-11/12"
-  defp wrapper_width("extra_large"), do: "max-"
-  defp wrapper_width(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "text-xs [&_.stepper-step]:size-7 [&_.stepper-icon]:size-4",
-      "[&_.vertical-step:not(:last-child)]:min-h-10",
-      "[&_.stepper-loading-icon]:w-8"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "text-sm [&_.stepper-step]:size-8 [&_.stepper-icon]:size-5",
-      "[&_.vertical-step:not(:last-child)]:min-h-12",
-      "[&_.stepper-loading-icon]:w-10"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "text-base [&_.stepper-step]:size-9 [&_.stepper-icon]:size-6",
-      "[&_.vertical-step:not(:last-child)]:min-h-14",
-      "[&_.stepper-loading-icon]:w-11"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "text-lg [&_.stepper-step]:size-10 [&_.stepper-icon]:size-7",
-      "[&_.vertical-step:not(:last-child)]:min-h-16",
-      "[&_.stepper-loading-icon]:w-12"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "text-xl [&_.stepper-step]:size-11 [&_.stepper-icon]:size-8",
-      "[&_.vertical-step:not(:last-child)]:min-h-20",
-      "[&_.stepper-loading-icon]:w-14"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp separator_size("extra_small"), do: "[&_.stepper-separator]:h-px"
-  defp separator_size("small"), do: "[&_.stepper-separator]:h-0.5"
-  defp separator_size("medium"), do: "[&_.stepper-separator]:h-1"
-  defp separator_size("large"), do: "[&_.stepper-separator]:h-1.5"
-  defp separator_size("extra_large"), do: "[&_.stepper-separator]:h-2"
-  defp separator_size(params) when is_binary(params), do: params
-
-  # colors
-  # stepper-loading-step, stepper-current-step, stepper-completed-step, stepper-canceled-step
-
-  defp color_variant("base", _) do
-    [
-      "[&_.stepper-step]:bg-white [&_.stepper-step]:text-[#09090b] [&_.stepper-loading-icon]:fill-[#2563EB]",
-      "[&_.stepper-step]:border-[#e4e4e7] [&_.stepper-current-step_.stepper-step]:border-[#2563EB]",
-      "[&_.stepper-current-step_.stepper-step]:text-[#2563EB]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#14B8A6] [&_.stepper-completed-step_.stepper-step]:border-[#14B8A6]",
-      "[&_.stepper-completed-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-step]:bg-[#18181B] dark:[&_.stepper-step]:text-[#FAFAFA] dark:[&_.stepper-step]:border-[#27272a]",
-      "dark:[&_.stepper-current-step_.stepper-step]:text-[#1971C2]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#1971C2]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#099268] dark:[&_.stepper-completed-step_.stepper-step]:border-[#099268]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:text-white",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#FA5252] [&_.stepper-canceled-step_.stepper-step]:border-[#FA5252]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#E03131] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#E03131]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "[&_.stepper-separator]:border-[#e4e4e7] dark:[&_.stepper-separator]:border-[#27272a]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#14B8A6] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#099268]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#14B8A6]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#099268]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&_.stepper-step]:bg-[#F3F3F3] [&_.stepper-step]:text-[#282828] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#282828]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#E8E8E8] [&_.stepper-completed-step_.stepper-step]:border-black",
-      "dark:[&_.stepper-step]:bg-[#4B4B4B] dark:[&_.stepper-step]:text-[#E8E8E8]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#E8E8E8]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#5E5E5E] dark:[&_.stepper-completed-step_.stepper-step]:border-white",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#282828] dark:[&_.stepper-separator]:border-[#E8E8E8]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-black dark:[&_.stepper-completed-step+.stepper-separator]:border-white",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-black",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-white"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&_.stepper-step]:bg-[#E2F8FB] [&_.stepper-step]:text-[#016974] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#016974]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#CDEEF3] [&_.stepper-completed-step_.stepper-step]:border-[#1A535A]",
-      "dark:[&_.stepper-step]:bg-[#002D33] dark:[&_.stepper-step]:text-[#77D5E3]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#77D5E3]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#1A535A] dark:[&_.stepper-completed-step_.stepper-step]:border-[#B0E7EF]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#016974] dark:[&_.stepper-separator]:border-[#77D5E3]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#1A535A] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#B0E7EF]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#1A535A]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&_.stepper-step]:bg-[#EFF4FE] [&_.stepper-step]:text-[#175BCC] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#175BCC]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#DEE9FE] [&_.stepper-completed-step_.stepper-step]:border-[#1948A3]",
-      "dark:[&_.stepper-step]:bg-[#002661] dark:[&_.stepper-step]:text-[#A9C9FF]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#A9C9FF]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#1948A3] dark:[&_.stepper-completed-step_.stepper-step]:border-[#CDDEFF]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#175BCC] dark:[&_.stepper-separator]:border-[#A9C9FF]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#1948A3] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#CDDEFF]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#1948A3]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&_.stepper-step]:bg-[#EAF6ED] [&_.stepper-step]:text-[#166C3B] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#166C3B]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#D3EFDA] [&_.stepper-completed-step_.stepper-step]:border-[#0D572D]",
-      "dark:[&_.stepper-step]:bg-[#002F14] dark:[&_.stepper-step]:text-[#7FD99A]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#7FD99A]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#0D572D] dark:[&_.stepper-completed-step_.stepper-step]:border-[#B1EAC2]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#166C3B] dark:[&_.stepper-separator]:border-[#7FD99A]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#0D572D] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#B1EAC2]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#0D572D]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&_.stepper-step]:bg-[#FFF7E6] [&_.stepper-step]:text-[#976A01] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#976A01]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#FEEFCC] [&_.stepper-completed-step_.stepper-step]:border-[#654600]",
-      "dark:[&_.stepper-step]:bg-[#322300] dark:[&_.stepper-step]:text-[#FDD067]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#FDD067]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#654600] dark:[&_.stepper-completed-step_.stepper-step]:border-[#FEDF99]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#976A01] dark:[&_.stepper-separator]:border-[#FDD067]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#654600] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#FEDF99]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#654600]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&_.stepper-step]:bg-[#FFF0EE] [&_.stepper-step]:text-[#BB032A] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#BB032A]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#FFE1DE] [&_.stepper-completed-step_.stepper-step]:border-[#950F22]",
-      "dark:[&_.stepper-step]:bg-[#520810] dark:[&_.stepper-step]:text-[#FFB2AB]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#FFB2AB]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#950F22] dark:[&_.stepper-completed-step_.stepper-step]:border-[#FFD2CD]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#BB032A] dark:[&_.stepper-separator]:border-[#FFB2AB]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#950F22] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#FFD2CD]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#950F22]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&_.stepper-step]:bg-[#E7F6FD] [&_.stepper-step]:text-[#08638C] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#08638C]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#CFEDFB] [&_.stepper-completed-step_.stepper-step]:border-[#06425D]",
-      "dark:[&_.stepper-step]:bg-[#03212F] dark:[&_.stepper-step]:text-[#6EC9F2]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#6EC9F2]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#06425D] dark:[&_.stepper-completed-step_.stepper-step]:border-[#9FDBF6]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#08638C] dark:[&_.stepper-separator]:border-[#6EC9F2]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#06425D] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#9FDBF6]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#06425D]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&_.stepper-step]:bg-[#F6F0FE] [&_.stepper-step]:text-[#653C94] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#653C94]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#EEE0FD] [&_.stepper-completed-step_.stepper-step]:border-[#442863]",
-      "dark:[&_.stepper-step]:bg-[#221431] dark:[&_.stepper-step]:text-[#CBA2FA]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#CBA2FA]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#44286] dark:[&_.stepper-completed-step_.stepper-step]:border-[#DDC1FC]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#653C94] dark:[&_.stepper-separator]:border-[#CBA2FA]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#442863] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#DDC1FC]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#442863]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&_.stepper-step]:bg-[#FBF2ED] [&_.stepper-step]:text-[#7E4B2A] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#7E4B2A]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#F6E5DA] [&_.stepper-completed-step_.stepper-step]:border-[#54321C]",
-      "dark:[&_.stepper-step]:bg-[#2A190E] dark:[&_.stepper-step]:text-[#E4B190]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#E4B190]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#54321C] dark:[&_.stepper-completed-step_.stepper-step]:border-[#EDCBB5]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#7E4B2A] dark:[&_.stepper-separator]:border-[#E4B190]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#54321C] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#EDCBB5]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#54321C]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&_.stepper-step]:bg-[#F3F3F3] [&_.stepper-step]:text-[#727272] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#727272]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#E8E8E8] [&_.stepper-completed-step_.stepper-step]:border-[#5E5E5E]",
-      "dark:[&_.stepper-step]:bg-[#4B4B4B] dark:[&_.stepper-step]:text-[#BBBBBB]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#BBBBBB]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#5E5E5E] dark:[&_.stepper-completed-step_.stepper-step]:border-[#DDDDDD]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#727272] dark:[&_.stepper-separator]:border-[#BBBBBB]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#5E5E5E] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#DDDDDD]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#5E5E5E]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#282828] to-[#727272] [&_.stepper-step]:text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-step]:text-[#282828] [&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#282828]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#E8E8E8] [&_.stepper-completed-step_.stepper-step]:border-black",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#E8E8E8]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#5E5E5E] dark:[&_.stepper-completed-step_.stepper-step]:border-white",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#282828] dark:[&_.stepper-separator]:border-[#E8E8E8]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-black dark:[&_.stepper-completed-step+.stepper-separator]:border-white",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-black",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-white"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#016974] to-[#01B8CA] [&_.stepper-step]:text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#016974]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#CDEEF3] [&_.stepper-completed-step_.stepper-step]:border-[#1A535A]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#77D5E3]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#1A535A] dark:[&_.stepper-completed-step_.stepper-step]:border-[#B0E7EF]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#016974] dark:[&_.stepper-separator]:border-[#77D5E3]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#1A535A] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#B0E7EF]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#1A535A]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#B0E7EF]"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] [&_.stepper-step]:text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#175BCC]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#DEE9FE] [&_.stepper-completed-step_.stepper-step]:border-[#1948A3]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#A9C9FF]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#1948A3] dark:[&_.stepper-completed-step_.stepper-step]:border-[#CDDEFF]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#175BCC] dark:[&_.stepper-separator]:border-[#A9C9FF]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#1948A3] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#CDDEFF]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#1948A3]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#CDDEFF]"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#166C3B] to-[#06C167] [&_.stepper-step]:text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#166C3B]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#D3EFDA] [&_.stepper-completed-step_.stepper-step]:border-[#0D572D]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#7FD99A]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#0D572D] dark:[&_.stepper-completed-step_.stepper-step]:border-[#B1EAC2]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#166C3B] dark:[&_.stepper-separator]:border-[#7FD99A]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#0D572D] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#B1EAC2]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#0D572D]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#B1EAC2]"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#976A01] to-[#FDC034] [&_.stepper-step]:text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#976A01]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#FEEFCC] [&_.stepper-completed-step_.stepper-step]:border-[#654600]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#FDD067]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#654600] dark:[&_.stepper-completed-step_.stepper-step]:border-[#FEDF99]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#976A01] dark:[&_.stepper-separator]:border-[#FDD067]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#654600] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#FEDF99]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#654600]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#FEDF99]"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#BB032A] to-[#FC7F79] [&_.stepper-step]:text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#BB032A]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#FFE1DE] [&_.stepper-completed-step_.stepper-step]:border-[#950F22]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#FFB2AB]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#950F22] dark:[&_.stepper-completed-step_.stepper-step]:border-[#FFD2CD]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#BB032A] dark:[&_.stepper-separator]:border-[#FFB2AB]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#950F22] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#FFD2CD]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#950F22]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#FFD2CD]"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#08638C] to-[#3EB7ED] [&_.stepper-step]:text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#08638C]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#CFEDFB] [&_.stepper-completed-step_.stepper-step]:border-[#06425D]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#6EC9F2]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#06425D] dark:[&_.stepper-completed-step_.stepper-step]:border-[#9FDBF6]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#08638C] dark:[&_.stepper-separator]:border-[#6EC9F2]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#06425D] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#9FDBF6]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#06425D]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#9FDBF6]"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#653C94] to-[#BA83F9] [&_.stepper-step]:text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#653C94]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#EEE0FD] [&_.stepper-completed-step_.stepper-step]:border-[#442863]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#CBA2FA]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#44286] dark:[&_.stepper-completed-step_.stepper-step]:border-[#DDC1FC]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#653C94] dark:[&_.stepper-separator]:border-[#CBA2FA]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#442863] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#DDC1FC]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#442863]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#DDC1FC]"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] [&_.stepper-step]:text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#7E4B2A]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#F6E5DA] [&_.stepper-completed-step_.stepper-step]:border-[#54321C]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#E4B190]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#54321C] dark:[&_.stepper-completed-step_.stepper-step]:border-[#EDCBB5]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#7E4B2A] dark:[&_.stepper-separator]:border-[#E4B190]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#54321C] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#EDCBB5]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#54321C]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#EDCBB5]"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "[&_.stepper-step]:bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] [&_.stepper-step]:text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:[&_.stepper-step]:text-black",
-      "[&_.stepper-loading-icon]:fill-[#374151]",
-      "[&_.stepper-step]:border-transparent [&_.stepper-current-step_.stepper-step]:border-[#727272]",
-      "[&_.stepper-completed-step_.stepper-step]:bg-[#E8E8E8] [&_.stepper-completed-step_.stepper-step]:border-[#5E5E5E]",
-      "dark:[&_.stepper-current-step_.stepper-step]:border-[#BBBBBB]",
-      "dark:[&_.stepper-completed-step_.stepper-step]:bg-[#5E5E5E] dark:[&_.stepper-completed-step_.stepper-step]:border-[#DDDDDD]",
-      "[&_.stepper-canceled-step_.stepper-step]:bg-[#950F22] [&_.stepper-canceled-step_.stepper-step]:border-[#950F22]",
-      "[&_.stepper-canceled-step_.stepper-step]:text-white",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:bg-[#FFD2CD] dark:[&_.stepper-canceled-step_.stepper-step]:border-[#FFD2CD]",
-      "dark:[&_.stepper-canceled-step_.stepper-step]:text-black",
-      "[&_.stepper-separator]:border-[#727272] dark:[&_.stepper-separator]:border-[#BBBBBB]",
-      "[&_.stepper-completed-step+.stepper-separator]:border-[#5E5E5E] dark:[&_.stepper-completed-step+.stepper-separator]:border-[#DDDDDD]",
-      "[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#5E5E5E]",
-      "dark:[&.vertical-stepper_.stepper-completed-step_.stepper-separator]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/table.ex b/lib/geo_web/components/table.ex
deleted file mode 100644
index a703e85..0000000
--- a/lib/geo_web/components/table.ex
+++ /dev/null
@@ -1,1266 +0,0 @@
-defmodule GeoWeb.Components.Table do
-  @moduledoc """
-  `GeoWeb.Components.Table` is a versatile component for creating customizable tables in a
-  Phoenix LiveView application. This module offers a wide range of configurations to tailor table
-  presentations, including options for styling, borders, text alignment, padding, and various visual variants.
-
-  It provides components for table structure (`table/1`), headers (`th/1`), rows (`tr/1`), and cells
-  (`td/1`). These elements can be easily customized to fit different design requirements,
-  such as fixed layouts, border styles, and hover effects.
-
-  By utilizing slots, the module allows for the inclusion of dynamic content in the table's header and
-  footer sections, with the ability to embed icons and custom classes for a polished and interactive interface.
-  """
-
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  Renders a customizable `table` component that supports custom styling for rows, columns,
-  and table headers. This component allows for specifying borders, padding, rounded corners,
-  and text alignment.
-
-  It also supports fixed layout and various configurations for headers, footers, and cells.
-
-  ## Examples
-
-  ```elixir
-  <.table>
-    <:header>Name</:header>
-    <:header>Age</:header>
-    <:header>Address</:header>
-    <:header>Email</:header>
-    <:header>Job</:header>
-    <:header>Action</:header>
-
-    <.tr>
-      <.td>Jim Emerald</.td>
-      <.td>27</.td>
-      <.td>London No. 1 Lake Park</.td>
-      <.td>test@mail.com</.td>
-      <.td>Frontend Developer</.td>
-      <.td><.rating select={3} count={5} /></.td>
-    </.tr>
-
-    <.tr>
-      <.td>Alex Brown</.td>
-      <.td>32</.td>
-      <.td>New York No. 2 River Park</.td>
-      <.td>alex@mail.com</.td>
-      <.td>Backend Developer</.td>
-      <.td><.rating select={4} count={5} /></.td>
-    </.tr>
-
-    <.tr>
-      <.td>John Doe</.td>
-      <.td>28</.td>
-      <.td>Los Angeles No. 3 Sunset Boulevard</.td>
-      <.td>john@mail.com</.td>
-      <.td>UI/UX Designer</.td>
-      <.td><.rating select={5} count={5} /></.td>
-    </.tr>
-
-    <:footer>Total</:footer>
-    <:footer>3 Employees</:footer>
-  </.table>
-
-
-  <.table id="users" rows={@users}>
-    <:col :let={user} label="id">{user.id}</:col>
-    <:col :let={user} label="username">{user.username}</:col>
-  </.table>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :main_wrapper_class, :string, default: nil, doc: "Custom CSS class"
-  attr :inner_wrapper_class, :string, default: nil, doc: "Custom CSS class"
-  attr :table_wrapper_class, :string, default: nil, doc: "Custom CSS class"
-  attr :table_body_class, :string, default: nil, doc: "Custom CSS class"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-  attr :text_size, :string, default: "small", doc: "Determines text size"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :header_border, :string, default: "", doc: "Sets the border style for the table header"
-  attr :rows_border, :string, default: "", doc: "Sets the border style for rows in the table"
-  attr :cols_border, :string, default: "", doc: "Sets the border style for columns in the table"
-  attr :thead_class, :string, default: nil, doc: "Adds custom CSS classes to the table header"
-  attr :footer_class, :string, default: nil, doc: "Adds custom CSS classes to the table footer"
-  attr :table_fixed, :boolean, default: false, doc: "Enables or disables the table's fixed layout"
-  attr :text_position, :string, default: "left", doc: "Determines the element's text position"
-  attr :space, :string, default: "medium", doc: "Determines the table row spaces"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :header do
-    attr :class, :any, doc: "Custom CSS class for additional styling"
-    attr :icon, :any, doc: "Icon displayed alongside of an item"
-    attr :icon_class, :any, doc: "Determines custom class for the icon"
-  end
-
-  slot :footer do
-    attr :class, :any, doc: "Custom CSS class for additional styling"
-    attr :icon, :any, doc: "Icon displayed alongside of an item"
-    attr :icon_class, :any, doc: "Determines custom class for the icon"
-  end
-
-  attr :rows, :list, default: []
-  attr :row_id, :any, default: nil, doc: "the function for generating the row id"
-  attr :row_click, :any, default: nil, doc: "the function for handling phx-click on each row"
-
-  attr :row_item, :any,
-    default: &Function.identity/1,
-    doc: "the function for mapping each row before calling the :col and :action slots"
-
-  slot :col, required: false do
-    attr :label, :string
-    attr :label_class, :string
-  end
-
-  slot :action, doc: "the slot for showing user actions in the last table column"
-
-  def table(assigns) do
-    assigns =
-      with %{rows: %Phoenix.LiveView.LiveStream{}} <- assigns do
-        assign(assigns, row_id: assigns.row_id || fn {id, _item} -> id end)
-      end
-
-    ~H"""
-    <div class={["-m-1.5 overflow-x-auto", @main_wrapper_class]}>
-      <div class={["p-1.5 min-w-full inline-block align-middle", @inner_wrapper_class]}>
-        <div class={[
-          "overflow-hidden",
-          color_variant(@variant, @color),
-          text_position(@text_position),
-          rounded_size(@rounded, @variant),
-          text_size(@text_size),
-          border_class(@border, @variant),
-          padding_size(@padding),
-          rows_space(@space, @variant),
-          @header_border && header_border(@header_border, @variant),
-          @rows_border != "" && rows_border(@rows_border, @variant),
-          @cols_border && cols_border(@cols_border, @variant),
-          @table_wrapper_class
-        ]}>
-          <table
-            class={[
-              "min-w-full",
-              @rows != [] && "divide-y",
-              @table_fixed && "table-fixed",
-              @variant == "separated" || (@variant == "base_separated" && "border-separate"),
-              @class
-            ]}
-            {@rest}
-          >
-            <thead class={@thead_class}>
-              <.tr>
-                <.th
-                  :for={{header, index} <- Enum.with_index(@header, 1)}
-                  id={"#{@id}-table-header-#{index}"}
-                  scope="col"
-                  class={header[:class]}
-                >
-                  <.icon
-                    :if={header[:icon]}
-                    name={header[:icon]}
-                    class={["table-header-icon block me-2", header[:icon_class]]}
-                  />
-                  {render_slot(header)}
-                </.th>
-              </.tr>
-
-              <.tr :if={@col}>
-                <.th :for={col <- @col} class={["font-normal", col[:label_class]]}>{col[:label]}</.th>
-                <.th :if={@action != []} class="relative">
-                  <span class="sr-only">{gettext("Actions")}</span>
-                </.th>
-              </.tr>
-            </thead>
-
-            <tbody
-              id={@id}
-              phx-update={match?(%Phoenix.LiveView.LiveStream{}, @rows) && "stream"}
-              class={[@rows != [] && "divide-y", @table_body_class]}
-              aria-live="polite"
-            >
-              {render_slot(@inner_block)}
-
-              <.tr :for={row <- @rows} :if={@rows != []} id={@row_id && @row_id.(row)}>
-                <.td
-                  :for={{col, i} <- Enum.with_index(@col)}
-                  phx-click={@row_click && @row_click.(row)}
-                  class={@row_click && "hover:cursor-pointer"}
-                >
-                  <div class="relative">
-                    <span class="absolute -inset-y-px right-0 -left-4" />
-                    <span class={["relative", i == 0 && "font-semibold"]}>
-                      {render_slot(col, @row_item.(row))}
-                    </span>
-                  </div>
-                </.td>
-
-                <.td :if={@action} class="relative w-14 p-0">
-                  <div class="relative whitespace-nowrap py-4 text-right text-sm font-medium">
-                    <span class="absolute -inset-y-px -right-4 left-0" />
-                    <span :for={action <- @action} class="relative ml-4 font-semibold leading-6">
-                      {render_slot(action, @row_item.(row))}
-                    </span>
-                  </div>
-                </.td>
-              </.tr>
-            </tbody>
-
-            <tfoot :if={length(@footer) > 0} class={@footer_class}>
-              <.tr>
-                <.td
-                  :for={{footer, index} <- Enum.with_index(@footer, 1)}
-                  id={"#{@id}-table-footer-#{index}"}
-                  class={footer[:class]}
-                >
-                  <div class="flex items-center">
-                    <.icon
-                      :if={footer[:icon]}
-                      name={footer[:icon]}
-                      class={["table-footer-icon block me-2", footer[:icon_class]]}
-                    />
-                    {render_slot(footer)}
-                  </div>
-                </.td>
-              </.tr>
-            </tfoot>
-          </table>
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  Renders a table header cell (`<th>`) component with customizable class and scope attributes.
-  This component allows for additional styling and accepts global attributes.
-
-  ## Examples
-
-  ```elixir
-  <.th>Column Title</.th>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :any, default: nil, doc: "Custom CSS class for additional styling"
-  attr :scope, :string, default: nil, doc: "Specifies the scope of the table header cell"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def th(assigns) do
-    ~H"""
-    <th id={@id} scope={@scope} class={["table-header", @class]} {@rest}>
-      {render_slot(@inner_block)}
-    </th>
-    """
-  end
-
-  @doc """
-  Renders a table row (<tr>) component with customizable class attributes.
-  This component allows for additional styling and accepts global attributes.
-
-  ## Examples
-
-  ```elixir
-  <.tr>
-    <.td>Data 1</.td>
-    <.td>Data 2</.td>
-  </.tr>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def tr(assigns) do
-    ~H"""
-    <tr id={@id} class={["table-row", @class]} {@rest}>
-      {render_slot(@inner_block)}
-    </tr>
-    """
-  end
-
-  @doc """
-  Renders a table data cell (`<td>`) component with customizable class attributes.
-  This component allows for additional styling and accepts global attributes.
-
-  ## Examples
-  ```elixir
-  <.td>Data</.td>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def td(assigns) do
-    ~H"""
-    <td id={@id} class={["table-data-cell", @class]} {@rest}>
-      {render_slot(@inner_block)}
-    </td>
-    """
-  end
-
-  defp rounded_size("extra_small", "separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-sm [&_.border-separate_tr_td:first-child]:rounded-s-sm",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-sm [&_.border-separate_tr_td:last-child]:rounded-e-sm",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-sm [&_.border-separate_tr_th:first-child]:rounded-s-sm",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-sm [&_.border-separate_tr_th:last-child]:rounded-e-sm"
-    ]
-  end
-
-  defp rounded_size("small", "separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s [&_.border-separate_tr_td:first-child]:rounded-s",
-      "[&_.border-separate_tr_td:last-child]:rounded-e [&_.border-separate_tr_td:last-child]:rounded-e",
-      "[&_.border-separate_tr_th:first-child]:rounded-s [&_.border-separate_tr_th:first-child]:rounded-s",
-      "[&_.border-separate_tr_th:last-child]:rounded-e [&_.border-separate_tr_th:last-child]:rounded-e"
-    ]
-  end
-
-  defp rounded_size("medium", "separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-md [&_.border-separate_tr_td:first-child]:rounded-s-md",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-md [&_.border-separate_tr_td:last-child]:rounded-e-md",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-md [&_.border-separate_tr_th:first-child]:rounded-s-md",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-md [&_.border-separate_tr_th:last-child]:rounded-e-md"
-    ]
-  end
-
-  defp rounded_size("large", "separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-lg [&_.border-separate_tr_td:first-child]:rounded-s-lg",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-lg [&_.border-separate_tr_td:last-child]:rounded-e-lg",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-lg [&_.border-separate_tr_th:first-child]:rounded-s-lg",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-lg [&_.border-separate_tr_th:last-child]:rounded-e-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large", "separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-xl [&_.border-separate_tr_td:first-child]:rounded-s-xl",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-xl [&_.border-separate_tr_td:last-child]:rounded-e-xl",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-xl [&_.border-separate_tr_th:first-child]:rounded-s-xl",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-xl [&_.border-separate_tr_th:last-child]:rounded-e-xl"
-    ]
-  end
-
-  defp rounded_size("extra_small", "base_separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-sm [&_.border-separate_tr_td:first-child]:rounded-s-sm",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-sm [&_.border-separate_tr_td:last-child]:rounded-e-sm",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-sm [&_.border-separate_tr_th:first-child]:rounded-s-sm",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-sm [&_.border-separate_tr_th:last-child]:rounded-e-sm"
-    ]
-  end
-
-  defp rounded_size("small", "base_separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s [&_.border-separate_tr_td:first-child]:rounded-s",
-      "[&_.border-separate_tr_td:last-child]:rounded-e [&_.border-separate_tr_td:last-child]:rounded-e",
-      "[&_.border-separate_tr_th:first-child]:rounded-s [&_.border-separate_tr_th:first-child]:rounded-s",
-      "[&_.border-separate_tr_th:last-child]:rounded-e [&_.border-separate_tr_th:last-child]:rounded-e"
-    ]
-  end
-
-  defp rounded_size("medium", "base_separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-md [&_.border-separate_tr_td:first-child]:rounded-s-md",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-md [&_.border-separate_tr_td:last-child]:rounded-e-md",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-md [&_.border-separate_tr_th:first-child]:rounded-s-md",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-md [&_.border-separate_tr_th:last-child]:rounded-e-md"
-    ]
-  end
-
-  defp rounded_size("large", "base_separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-lg [&_.border-separate_tr_td:first-child]:rounded-s-lg",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-lg [&_.border-separate_tr_td:last-child]:rounded-e-lg",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-lg [&_.border-separate_tr_th:first-child]:rounded-s-lg",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-lg [&_.border-separate_tr_th:last-child]:rounded-e-lg"
-    ]
-  end
-
-  defp rounded_size("extra_large", "base_separated") do
-    [
-      "[&_.border-separate_tr_td:first-child]:rounded-s-xl [&_.border-separate_tr_td:first-child]:rounded-s-xl",
-      "[&_.border-separate_tr_td:last-child]:rounded-e-xl [&_.border-separate_tr_td:last-child]:rounded-e-xl",
-      "[&_.border-separate_tr_th:first-child]:rounded-s-xl [&_.border-separate_tr_th:first-child]:rounded-s-xl",
-      "[&_.border-separate_tr_th:last-child]:rounded-e-xl [&_.border-separate_tr_th:last-child]:rounded-e-xl"
-    ]
-  end
-
-  defp rounded_size("extra_small", _), do: "rounded-sm"
-
-  defp rounded_size("small", _), do: "rounded"
-
-  defp rounded_size("medium", _), do: "rounded-md"
-
-  defp rounded_size("large", _), do: "rounded-lg"
-
-  defp rounded_size("extra_large", _), do: "rounded-xl"
-
-  defp rounded_size(params, _) when is_binary(params), do: [params]
-
-  defp text_size("extra_small"), do: "text-xs"
-  defp text_size("small"), do: "text-sm"
-  defp text_size("medium"), do: "text-base"
-  defp text_size("large"), do: "text-lg"
-  defp text_size("extra_large"), do: "text-xl"
-  defp text_size(params) when is_binary(params), do: [params]
-
-  defp text_position("left"), do: "[&_table]:text-left [&_table_thead]:text-left"
-  defp text_position("right"), do: "[&_table]:text-right [&_table_thead]:text-right"
-  defp text_position("center"), do: "[&_table]:text-center [&_table_thead]:text-center"
-  defp text_position("justify"), do: "[&_table]:text-justify [&_table_thead]:text-justify"
-  defp text_position("start"), do: "[&_table]:text-start [&_table_thead]:text-start"
-  defp text_position("end"), do: "[&_table]:text-end [&_table_thead]:text-end"
-  defp text_position(params) when is_binary(params), do: params
-
-  defp border_class(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "transparent",
-              "stripped",
-              "hoverable",
-              "separated",
-              "base_separated"
-            ],
-       do: nil
-
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: [params]
-
-  defp cols_border(_, variant)
-       when variant in ["default", "shadow", "transparent", "stripped", "hoverable", "separated"],
-       do: nil
-
-  defp cols_border("extra_small", _) do
-    [
-      "[&_table_thead_th:not(:last-child)]:border-e",
-      "[&_table_tbody_td:not(:last-child)]:border-e",
-      "[&_table_tfoot_td:not(:last-child)]:border-e"
-    ]
-  end
-
-  defp cols_border("small", _) do
-    [
-      "[&_table_thead_th:not(:last-child)]:border-e-2",
-      "[&_table_tbody_td:not(:last-child)]:border-e-2",
-      "[&_table_tfoot_td:not(:last-child)]:border-e-2"
-    ]
-  end
-
-  defp cols_border("medium", _) do
-    [
-      "[&_table_thead_th:not(:last-child)]:border-e-[3px]",
-      "[&_table_tbody_td:not(:last-child)]:border-e-[3px]",
-      "[&_table_tfoot_td:not(:last-child)]:border-e-[3px]"
-    ]
-  end
-
-  defp cols_border("large", _) do
-    [
-      "[&_table_thead_th:not(:last-child)]:border-e-4",
-      "[&_table_tbody_td:not(:last-child)]:border-e-4",
-      "[&_table_tfoot_td:not(:last-child)]:border-e-4"
-    ]
-  end
-
-  defp cols_border("extra_large", _) do
-    [
-      "[&_table_thead_th:not(:last-child)]:border-e-[5px]",
-      "[&_table_tbody_td:not(:last-child)]:border-e-[5px]",
-      "[&_table_tfoot_td:not(:last-child)]:border-e-[5px]"
-    ]
-  end
-
-  defp cols_border(params, _) when is_binary(params), do: [params]
-
-  defp rows_border(_, variant)
-       when variant in ["default", "shadow", "transparent", "stripped", "hoverable", "separated"],
-       do: nil
-
-  defp rows_border("none", "base_separated"), do: nil
-
-  defp rows_border("extra_small", "base_separated") do
-    [
-      "[&_td]:border-y [&_th]:border-y",
-      "[&_td:first-child]:border-s [&_th:first-child]:border-s",
-      "[&_td:last-child]:border-e [&_th:last-child]:border-e"
-    ]
-  end
-
-  defp rows_border("small", "base_separated") do
-    [
-      "[&_td]:border-y-2 [&_th]:border-y-2",
-      "[&_td:first-child]:border-s-2 [&_th:first-child]:border-s-2",
-      "[&_td:last-child]:border-e-2 [&_th:last-child]:border-e-2"
-    ]
-  end
-
-  defp rows_border("medium", "base_separated") do
-    [
-      "[&_td]:border-y-[3px] [&_th]:border-y-[3px]",
-      "[&_td:first-child]:border-s-3 [&_th:first-child]:border-s-3",
-      "[&_td:last-child]:border-e-3 [&_th:last-child]:border-e-3"
-    ]
-  end
-
-  defp rows_border("large", "base_separated") do
-    [
-      "[&_td]:border-y-4 [&_th]:border-y-4",
-      "[&_td:first-child]:border-s-4 [&_th:first-child]:border-s-4",
-      "[&_td:last-child]:border-e-4 [&_th:last-child]:border-e-4"
-    ]
-  end
-
-  defp rows_border("extra_large", "base_separated") do
-    [
-      "[&_td]:border-y-[5px] [&_th]:border-y-[5px]",
-      "[&_td:first-child]:border-s-5 [&_th:first-child]:border-s-5",
-      "[&_td:last-child]:border-e-5 [&_th:last-child]:border-e-5"
-    ]
-  end
-
-  defp rows_border("none", _), do: nil
-  defp rows_border("extra_small", _), do: "[&_table_tbody]:divide-y"
-  defp rows_border("small", _), do: "[&_table_tbody]:divide-y-2"
-  defp rows_border("medium", _), do: "[&_table_tbody]:divide-y-[3px]"
-  defp rows_border("large", _), do: "[&_table_tbody]:divide-y-4"
-  defp rows_border("extra_large", _), do: "[&_table_tbody]:divide-y-[5px]"
-  defp rows_border(params, _) when is_binary(params), do: [params]
-
-  defp header_border(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "transparent",
-              "stripped",
-              "hoverable",
-              "separated",
-              "base_separated"
-            ],
-       do: nil
-
-  defp header_border("extra_small", _), do: "[&_table]:divide-y"
-  defp header_border("small", _), do: "[&_table]:divide-y-2"
-  defp header_border("medium", _), do: "[&_table]:divide-y-[3px]"
-  defp header_border("large", _), do: "[&_table]:divide-y-4"
-  defp header_border("extra_large", _), do: "[&_table]:divide-y-[5px]"
-  defp header_border(params, _) when is_binary(params), do: [params]
-
-  defp rows_space(_, variant)
-       when variant in [
-              "default",
-              "shadow",
-              "transparent",
-              "stripped",
-              "hoverable",
-              "bordered",
-              "base",
-              "base_hoverable",
-              "base_stripped",
-              "outline"
-            ],
-       do: nil
-
-  defp rows_space("extra_small", _), do: "[&_table]:border-spacing-y-0.5"
-  defp rows_space("small", _), do: "[&_table]:border-spacing-y-1"
-  defp rows_space("medium", _), do: "[&_table]:border-spacing-y-2"
-  defp rows_space("large", _), do: "[&_table]:border-spacing-y-3"
-  defp rows_space("extra_large", _), do: "[&_table]:border-spacing-y-4"
-  defp rows_space(params, _) when is_binary(params), do: [params]
-
-  defp padding_size("extra_small") do
-    [
-      "[&_table_.table-data-cell]:px-3 [&_table_.table-data-cell]:py-1.5",
-      "[&_table_.table-header]:px-3 [&_table_.table-header]:py-1.5"
-    ]
-  end
-
-  defp padding_size("small") do
-    [
-      "[&_table_.table-data-cell]:px-4 [&_table_.table-data-cell]:py-2",
-      "[&_table_.table-header]:px-4 [&_table_.table-header]:py-2"
-    ]
-  end
-
-  defp padding_size("medium") do
-    [
-      "[&_table_.table-data-cell]:px-5 [&_table_.table-data-cell]:py-2.5",
-      "[&_table_.table-header]:px-5 [&_table_.table-header]:py-2.5"
-    ]
-  end
-
-  defp padding_size("large") do
-    [
-      "[&_table_.table-data-cell]:px-6 [&_table_.table-data-cell]:py-3",
-      "[&_table_.table-header]:px-6 [&_table_.table-header]:py-3"
-    ]
-  end
-
-  defp padding_size("extra_large") do
-    [
-      "[&_table_.table-data-cell]:px-7 [&_table_.table-data-cell]:py-3.5",
-      "[&_table_.table-header]:px-7 [&_table_.table-header]:py-3.5"
-    ]
-  end
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "[&_table]:bg-white dark:[&_table]:bg-[#18181B] [&_table]:text-[#09090b] dark:[&_table]:text-[#FAFAFA]",
-      "border-[#e4e4e7] dark:border-[#27272a]",
-      "[&_*]:divide-[#e4e4e7] [&_td]:border-[#e4e4e7] [&_th]:border-[#e4e4e7]",
-      "dark:[&_*]:divide-[#27272a] dark:[&_td]:border-[#27272a] dark:[&_th]:border-[#27272a]",
-      "shadow-sm"
-    ]
-  end
-
-  defp color_variant("base_separated", _) do
-    [
-      "[&_table_tr]:bg-white [&_table]:text-[#09090b] dark:[&_table_tr]:bg-[#18181B] dark:[&_table]:text-[#FAFAFA]",
-      "[&_td]:border-[#e4e4e7] dark:[&_td]:border-[#27272a]",
-      "[&_th]:border-[#e4e4e7] dark:[&_th]:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("base_hoverable", _) do
-    [
-      "[&_table]:bg-white [&_table]:text-[#09090b] dark:[&_table]:bg-[#18181B] dark:[&_table]:text-[#FAFAFA]",
-      "hover:[&_table_tbody_tr]:bg-[#e4e4e7] dark:hover:[&_table_tbody_tr]:bg-[#27272a]",
-      "border-[#e4e4e7] dark:border-[#27272a]",
-      "[&_*]:divide-[#e4e4e7] [&_td]:border-[#e4e4e7] [&_th]:border-[#e4e4e7]",
-      "dark:[&_*]:divide-[#27272a] dark:[&_td]:border-[#27272a] dark:[&_th]:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("base_stripped", _) do
-    [
-      "[&_table]:bg-white [&_table]:text-[#09090b] dark:[&_table]:bg-[#18181B] dark:[&_table]:text-[#FAFAFA]",
-      "odd:[&_table_tbody_tr]:bg-[#F8F9FA] dark:odd:[&_table_tbody_tr]:bg-[#242424]",
-      "border-[#e4e4e7] dark:border-[#27272a]",
-      "[&_*]:divide-[#e4e4e7] [&_td]:border-[#e4e4e7] [&_th]:border-[#e4e4e7]",
-      "dark:[&_*]:divide-[#27272a] dark:[&_td]:border-[#27272a] dark:[&_th]:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    "[&_table]:bg-white text-[#3E3E3E] border-[#DADADA] [&_*]:divide-[#DADADA] [&_td]:border-[#DADADA] [&_th]:border-[#DADADA]"
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "[&_table]:bg-[#F3F3F3] dark:[&_table]:bg-[#4B4B4B] [&_table]:text-[#282828] dark:[&_table]:text-[#E8E8E8]",
-      "border-[#282828] dark:border-[#E8E8E8]",
-      "[&_*]:divide-[#282828] [&_td]:border-[#282828] [&_th]:border-[#282828]",
-      "dark:[&_*]:divide-[#E8E8E8] dark:[&_td]:border-[#E8E8E8] dark:[&_th]:border-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "[&_table]:bg-[#E2F8FB] dark:[&_table]:bg-[#002D33] [&_table]:text-[#016974] dark:[&_table]:text-[#77D5E3]",
-      "border-[#016974] dark:border-[#77D5E3]",
-      "[&_*]:divide-[#016974] [&_td]:border-[#016974] [&_th]:border-[#016974]",
-      "dark:[&_*]:divide-[#77D5E3] dark:[&_td]:border-[#77D5E3] dark:[&_th]:border-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "[&_table]:bg-[#EFF4FE] dark:[&_table]:bg-[#002661] [&_table]:text-[#175BCC] dark:[&_table]:text-[#A9C9FF]",
-      "border-[#175BCC] dark:border-[#A9C9FF]",
-      "[&_*]:divide-[#175BCC] [&_td]:border-[#175BCC] [&_th]:border-[#175BCC]",
-      "dark:[&_*]:divide-[#A9C9FF] dark:[&_td]:border-[#A9C9FF] dark:[&_th]:border-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "[&_table]:bg-[#EAF6ED] dark:[&_table]:bg-[#002F14] [&_table]:text-[#166C3B] dark:[&_table]:text-[#7FD99A]",
-      "border-[#166C3B] dark:border-[#7FD99A]",
-      "[&_*]:divide-[#166C3B] [&_td]:border-[#166C3B] [&_th]:border-[#166C3B]",
-      "dark:[&_*]:divide-[#7FD99A] dark:[&_td]:border-[#7FD99A] dark:[&_th]:border-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "[&_table]:bg-[#FFF7E6] dark:[&_table]:bg-[#322300] [&_table]:text-[#976A01] dark:[&_table]:text-[#FDD067]",
-      "border-[#976A01] dark:border-[#FDD067]",
-      "[&_*]:divide-[#976A01] [&_td]:border-[#976A01] [&_th]:border-[#976A01]",
-      "dark:[&_*]:divide-[#FDD067] dark:[&_td]:border-[#FDD067] dark:[&_th]:border-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "[&_table]:bg-[#FFF0EE] dark:[&_table]:bg-[#520810] [&_table]:text-[#BB032A] dark:[&_table]:text-[#FFB2AB]",
-      "border-[#BB032A] dark:border-[#FFB2AB]",
-      "[&_*]:divide-[#BB032A] [&_td]:border-[#BB032A] [&_th]:border-[#BB032A]",
-      "dark:[&_*]:divide-[#FFB2AB] dark:[&_td]:border-[#FFB2AB] dark:[&_th]:border-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "[&_table]:bg-[#E7F6FD] dark:[&_table]:bg-[#03212F] [&_table]:text-[#0B84BA] dark:[&_table]:text-[#6EC9F2]",
-      "border-[#0B84BA] dark:border-[#6EC9F2]",
-      "[&_*]:divide-[#0B84BA] [&_td]:border-[#0B84BA] [&_th]:border-[#0B84BA]",
-      "dark:[&_*]:divide-[#6EC9F2] dark:[&_td]:border-[#6EC9F2] dark:[&_th]:border-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "[&_table]:bg-[#F6F0FE] dark:[&_table]:bg-[#221431] [&_table]:text-[#653C94] dark:[&_table]:text-[#CBA2FA]",
-      "border-[#653C94] dark:border-[#CBA2FA]",
-      "[&_*]:divide-[#653C94] [&_td]:border-[#653C94] [&_th]:border-[#653C94]",
-      "dark:[&_*]:divide-[#CBA2FA] dark:[&_td]:border-[#CBA2FA] dark:[&_th]:border-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "[&_table]:bg-[#FBF2ED] dark:[&_table]:bg-[#2A190E] [&_table]:text-[#7E4B2A] dark:[&_table]:text-[#E4B190]",
-      "border-[#7E4B2A] dark:border-[#E4B190]",
-      "[&_*]:divide-[#7E4B2A] [&_td]:border-[#7E4B2A] [&_th]:border-[#7E4B2A]",
-      "dark:[&_*]:divide-[#E4B190] dark:[&_td]:border-[#E4B190] dark:[&_th]:border-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "[&_table]:bg-[#4B4B4B] dark:[&_table]:bg-[#2A190E] [&_table]:text-[#727272] dark:[&_table]:text-[#BBBBBB]",
-      "border-[#727272] dark:border-[#BBBBBB]",
-      "[&_*]:divide-[#727272] [&_td]:border-[#727272] [&_th]:border-[#727272]",
-      "dark:[&_*]:divide-[#BBBBBB] dark:[&_td]:border-[#BBBBBB] dark:[&_th]:border-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    "[&_table]:bg-[#282828] text-white border-[#050404] [&_*]:divide-[#050404] [&_td]:border-[#050404] [&_th]:border-[#050404]"
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "[&_table]:text-[#4B4B4B] border-[#4B4B4B] dark:[&_table]:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "[&_*]:divide-[#4B4B4B] [&_td]:border-[#4B4B4B] [&_th]:border-[#4B4B4B]",
-      "dark:[&_*]:divide-[#DDDDDD] dark:[&_td]:border-[#DDDDDD] dark:[&_th]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "[&_table]:text-[#007F8C] border-[#007F8C] dark:[&_table]:text-[#01B8CA] dark:border-[#01B8CA]",
-      "[&_*]:divide-[#007F8C] [&_td]:border-[#007F8C] [&_th]:border-[#007F8C]",
-      "dark:[&_*]:divide-[#01B8CA] dark:[&_td]:border-[#01B8CA] dark:[&_th]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "[&_table]:text-[#007F8C] border-[#007F8C] dark:[&_table]:text-[#01B8CA] dark:border-[#01B8CA]",
-      "[&_*]:divide-[#007F8C] [&_td]:border-[#007F8C] [&_th]:border-[#007F8C]",
-      "dark:[&_*]:divide-[#01B8CA] dark:[&_td]:border-[#01B8CA] dark:[&_th]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "[&_table]:text-[#0E8345] border-[#0E8345] dark:[&_table]:text-[#06C167] dark:border-[#06C167]",
-      "[&_*]:divide-[#0E8345] [&_td]:border-[#0E8345] [&_th]:border-[#0E8345]",
-      "dark:[&_*]:divide-[#06C167] dark:[&_td]:border-[#06C167] dark:[&_th]:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "[&_table]:text-[#CA8D01] border-[#CA8D01] dark:[&_table]:text-[#FDC034] dark:border-[#FDC034]",
-      "[&_*]:divide-[#CA8D01] [&_td]:border-[#CA8D01] [&_th]:border-[#CA8D01]",
-      "dark:[&_*]:divide-[#FDC034] dark:[&_td]:border-[#FDC034] dark:[&_th]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "[&_table]:text-[#DE1135] border-[#DE1135] dark:[&_table]:text-[#FC7F79] dark:border-[#FC7F79]",
-      "[&_*]:divide-[#DE1135] [&_td]:border-[#DE1135] [&_th]:border-[#DE1135]",
-      "dark:[&_*]:divide-[#FC7F79] dark:[&_td]:border-[#FC7F79] dark:[&_th]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "[&_table]:text-[#0B84BA] border-[#0B84BA] dark:[&_table]:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "[&_*]:divide-[#0B84BA] [&_td]:border-[#0B84BA] [&_th]:border-[#0B84BA]",
-      "dark:[&_*]:divide-[#3EB7ED] dark:[&_td]:border-[#3EB7ED] dark:[&_th]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "[&_table]:text-[#8750C5] border-[#8750C5] dark:[&_table]:text-[#BA83F9] dark:border-[#BA83F9]",
-      "[&_*]:divide-[#8750C5] [&_td]:border-[#8750C5] [&_th]:border-[#8750C5]",
-      "dark:[&_*]:divide-[#BA83F9] dark:[&_td]:border-[#BA83F9] dark:[&_th]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "[&_table]:text-[#A86438] border-[#A86438] dark:[&_table]:text-[#DB976B] dark:border-[#DB976B]",
-      "[&_*]:divide-[#A86438] [&_td]:border-[#A86438] [&_th]:border-[#A86438]",
-      "dark:[&_*]:divide-[#DB976B] dark:[&_td]:border-[#DB976B] dark:[&_th]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "[&_table]:text-[#868686] border-[#868686] dark:[&_table]:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "[&_*]:divide-[#868686] [&_td]:border-[#868686] [&_th]:border-[#868686]",
-      "dark:[&_*]:divide-[#A6A6A6] dark:[&_td]:border-[#A6A6A6] dark:[&_th]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    "bg-white text-black"
-  end
-
-  defp color_variant("default", "natural") do
-    "[&_table]:bg-[#4B4B4B] [&_table]:text-white dark:[&_table]:bg-[#DDDDDD] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "primary") do
-    "[&_table]:bg-[#007F8C] [&_table]:text-white dark:[&_table]:bg-[#01B8CA] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "secondary") do
-    "[&_table]:bg-[#266EF1] [&_table]:text-white dark:[&_table]:bg-[#6DAAFB] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "success") do
-    "[&_table]:bg-[#0E8345] [&_table]:text-white dark:[&_table]:bg-[#06C167] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "warning") do
-    "[&_table]:bg-[#CA8D01] [&_table]:text-white dark:[&_table]:bg-[#FDC034] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "danger") do
-    "[&_table]:bg-[#DE1135] [&_table]:text-white dark:[&_table]:bg-[#FC7F79] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "info") do
-    "[&_table]:bg-[#0B84BA] [&_table]:text-white dark:[&_table]:bg-[#3EB7ED] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "misc") do
-    "[&_table]:bg-[#8750C5] [&_table]:text-white dark:[&_table]:bg-[#BA83F9] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "dawn") do
-    "[&_table]:bg-[#A86438] [&_table]:text-white dark:[&_table]:bg-[#DB976B] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "silver") do
-    "[&_table]:bg-[#868686] [&_table]:text-white dark:[&_table]:bg-[#A6A6A6] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("default", "dark") do
-    "[&_table]:bg-[#282828] [&_table]:text-white"
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "[&_table]:bg-[#4B4B4B] [&_table]:text-white dark:[&_table]:bg-[#DDDDDD] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "[&_table]:bg-[#007F8C] [&_table]:text-white dark:[&_table]:bg-[#01B8CA] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "[&_table]:bg-[#266EF1] [&_table]:text-white dark:[&_table]:bg-[#6DAAFB] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "[&_table]:bg-[#0E8345] [&_table]:text-white dark:[&_table]:bg-[#06C167] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "[&_table]:bg-[#CA8D01] [&_table]:text-white dark:[&_table]:bg-[#FDC034] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "[&_table]:bg-[#DE1135] [&_table]:text-white dark:[&_table]:bg-[#FC7F79] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "[&_table]:bg-[#0B84BA] [&_table]:text-white dark:[&_table]:bg-[#3EB7ED] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "[&_table]:bg-[#8750C5] [&_table]:text-white dark:[&_table]:bg-[#BA83F9] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "[&_table]:bg-[#A86438] [&_table]:text-white dark:[&_table]:bg-[#DB976B] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "[&_table]:bg-[#868686] [&_table]:text-white dark:[&_table]:bg-[#A6A6A6] dark:[&_table]:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "[&_table]:text-[#4B4B4B] dark:[&_table]:text-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "[&_table]:text-[#007F8C] dark:[&_table]:text-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "[&_table]:text-[#266EF1] dark:[&_table]:text-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "[&_table]:text-[#0E8345] dark:[&_table]:text-[#06C167]"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "[&_table]:text-[#CA8D01] dark:[&_table]:text-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "[&_table]:text-[#DE1135] dark:[&_table]:text-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "[&_table]:text-[#0B84BA] dark:[&_table]:text-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "[&_table]:text-[#8750C5] dark:[&_table]:text-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "[&_table]:text-[#A86438] dark:[&_table]:text-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "[&_table]:text-[#868686] dark:[&_table]:text-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("hoverable", "white") do
-    [
-      "[&_table]:bg-white hover:[&_table_tbody_tr]:bg-[#DADADA] text-[#3E3E3E]"
-    ]
-  end
-
-  defp color_variant("hoverable", "natural") do
-    [
-      "[&_table]:bg-[#4B4B4B] [&_table]:text-white dark:[&_table]:bg-[#DDDDDD] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#282828] dark:hover:[&_table_tbody_tr]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("hoverable", "primary") do
-    [
-      "[&_table]:bg-[#007F8C] [&_table]:text-white dark:[&_table]:bg-[#01B8CA] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#016974] dark:hover:[&_table_tbody_tr]:bg-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("hoverable", "secondary") do
-    [
-      "[&_table]:bg-[#266EF1] [&_table]:text-white dark:[&_table]:bg-[#6DAAFB] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#175BCC] dark:hover:[&_table_tbody_tr]:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("hoverable", "success") do
-    [
-      "[&_table]:bg-[#0E8345] [&_table]:text-white dark:[&_table]:bg-[#06C167] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#06C167] dark:hover:[&_table_tbody_tr]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("hoverable", "warning") do
-    [
-      "[&_table]:bg-[#CA8D01] [&_table]:text-white dark:[&_table]:bg-[#FDC034] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#976A01] dark:hover:[&_table_tbody_tr]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("hoverable", "danger") do
-    [
-      "[&_table]:bg-[#DE1135] [&_table]:text-white dark:[&_table]:bg-[#FC7F79] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#BB032A] dark:hover:[&_table_tbody_tr]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("hoverable", "info") do
-    [
-      "[&_table]:bg-[#0B84BA] [&_table]:text-white dark:[&_table]:bg-[#3EB7ED] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#08638C] dark:hover:[&_table_tbody_tr]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("hoverable", "misc") do
-    [
-      "[&_table]:bg-[#8750C5] [&_table]:text-white dark:[&_table]:bg-[#BA83F9] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#653C94] dark:hover:[&_table_tbody_tr]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("hoverable", "dawn") do
-    [
-      "[&_table]:bg-[#A86438] [&_table]:text-white dark:[&_table]:bg-[#DB976B] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#7E4B2A] dark:hover:[&_table_tbody_tr]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("hoverable", "silver") do
-    [
-      "[&_table]:bg-[#868686] [&_table]:text-white dark:[&_table]:bg-[#A6A6A6] dark:[&_table]:text-black",
-      "hover:[&_table_tbody_tr]:bg-[#727272] dark:hover:[&_table_tbody_tr]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("hoverable", "dark") do
-    [
-      "[&_table]:bg-[#282828] [&_table]:text-white hover:[&_table_tbody_tr]:bg-black"
-    ]
-  end
-
-  defp color_variant("stripped", "white") do
-    [
-      "[&_table]:bg-white odd:[&_table_tbody_tr]:bg-[#DADADA] text-[#3E3E3E]"
-    ]
-  end
-
-  defp color_variant("stripped", "natural") do
-    [
-      "[&_table]:bg-[#4B4B4B] [&_table]:text-white dark:[&_table]:bg-[#DDDDDD] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#282828] dark:odd:[&_table_tbody_tr]:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("stripped", "primary") do
-    [
-      "[&_table]:bg-[#007F8C] [&_table]:text-white dark:[&_table]:bg-[#01B8CA] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#016974] dark:odd:[&_table_tbody_tr]:bg-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("stripped", "secondary") do
-    [
-      "[&_table]:bg-[#266EF1] [&_table]:text-white dark:[&_table]:bg-[#6DAAFB] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#175BCC] dark:odd:[&_table_tbody_tr]:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("stripped", "success") do
-    [
-      "[&_table]:bg-[#0E8345] [&_table]:text-white dark:[&_table]:bg-[#06C167] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#06C167] dark:odd:[&_table_tbody_tr]:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("stripped", "warning") do
-    [
-      "[&_table]:bg-[#CA8D01] [&_table]:text-white dark:[&_table]:bg-[#FDC034] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#976A01] dark:odd:[&_table_tbody_tr]:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("stripped", "danger") do
-    [
-      "[&_table]:bg-[#DE1135] [&_table]:text-white dark:[&_table]:bg-[#FC7F79] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#BB032A] dark:odd:[&_table_tbody_tr]:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("stripped", "info") do
-    [
-      "[&_table]:bg-[#0B84BA] [&_table]:text-white dark:[&_table]:bg-[#3EB7ED] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#08638C] dark:odd:[&_table_tbody_tr]:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("stripped", "misc") do
-    [
-      "[&_table]:bg-[#8750C5] [&_table]:text-white dark:[&_table]:bg-[#BA83F9] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#653C94] dark:odd:[&_table_tbody_tr]:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("stripped", "dawn") do
-    [
-      "[&_table]:bg-[#A86438] [&_table]:text-white dark:[&_table]:bg-[#DB976B] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#7E4B2A] dark:odd:[&_table_tbody_tr]:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("stripped", "silver") do
-    [
-      "[&_table]:bg-[#868686] [&_table]:text-white dark:[&_table]:bg-[#A6A6A6] dark:[&_table]:text-black",
-      "odd:[&_table_tbody_tr]:bg-[#727272] dark:odd:[&_table_tbody_tr]:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("stripped", "dark") do
-    [
-      "[&_table]:bg-[#282828] [&_table]:text-white odd:[&_table_tbody_tr]:bg-black"
-    ]
-  end
-
-  defp color_variant("separated", "white") do
-    "[&_table_tr]:bg-white [&_table]:text-black"
-  end
-
-  defp color_variant("separated", "natural") do
-    "[&_table_tr]:bg-[#4B4B4B] [&_table]:text-white dark:[&_table_tr]:bg-[#DDDDDD] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "primary") do
-    "[&_table_tr]:bg-[#007F8C] [&_table]:text-white dark:[&_table_tr]:bg-[#01B8CA] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "secondary") do
-    "[&_table_tr]:bg-[#266EF1] [&_table]:text-white dark:[&_table_tr]:bg-[#6DAAFB] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "success") do
-    "[&_table_tr]:bg-[#0E8345] [&_table]:text-white dark:[&_table_tr]:bg-[#06C167] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "warning") do
-    "[&_table_tr]:bg-[#CA8D01] [&_table]:text-white dark:[&_table_tr]:bg-[#FDC034] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "danger") do
-    "[&_table_tr]:bg-[#DE1135] [&_table]:text-white dark:[&_table_tr]:bg-[#FC7F79] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "info") do
-    "[&_table_tr]:bg-[#0B84BA] [&_table]:text-white dark:[&_table_tr]:bg-[#3EB7ED] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "misc") do
-    "[&_table_tr]:bg-[#8750C5] [&_table]:text-white dark:[&_table_tr]:bg-[#BA83F9] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "dawn") do
-    "[&_table_tr]:bg-[#A86438] [&_table]:text-white dark:[&_table_tr]:bg-[#DB976B] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "silver") do
-    "[&_table_tr]:bg-[#868686] [&_table]:text-white dark:[&_table_tr]:bg-[#A6A6A6] dark:[&_table]:text-black"
-  end
-
-  defp color_variant("separated", "dark") do
-    "[&_table_tr]:bg-[#282828] [&_table]:text-white"
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/table_content.ex b/lib/geo_web/components/table_content.ex
deleted file mode 100644
index 90ee1e4..0000000
--- a/lib/geo_web/components/table_content.ex
+++ /dev/null
@@ -1,776 +0,0 @@
-defmodule GeoWeb.Components.TableContent do
-  @moduledoc """
-  `GeoWeb.Components.TableContent` is a component module designed to create flexible and dynamic
-  content within a table. This module allows for a variety of customizations, including styles,
-  colors, borders, padding, and animations. It is composed of several subcomponents such as
-  `table_content/1`, `content_wrapper/1`, and `content_item/1`, each providing specific
-  roles for content display and interaction.
-
-  The `table_content/1` function creates a container with customizable styles and an optional title.
-  `content_wrapper/1` and `content_item/1` allow further structuring of content, including icons,
-  font weights, and active states, making it easy to build interactive and visually appealing
-  layouts within tables. The module leverages slots to enable dynamic content rendering,
-  offering high flexibility in the design of complex table layouts.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `table_content` component is used to display organized content with customizable styling
-  options such as color, padding, and animation.
-
-  It supports nested content items and wrappers for better content management and display.
-
-  ## Examples
-
-  ```elixir
-  <.table_content color="primary" animated>
-    <.content_item icon="hero-hashtag">
-      <.link href="#prag">Content 1</.link>
-    </.content_item>
-
-    <.content_item icon="hero-hashtag">
-      <.link href="#home">Content 2</.link>
-    </.content_item>
-
-    <.content_item title="Wrapper Content">
-      <.content_wrapper>
-        <.content_item icon="hero-hashtag">
-          <.link href="#home">Content 1</.link>
-        </.content_item>
-
-        <.content_item icon="hero-hashtag">
-          <.link href="#home">Content 2</.link>
-        </.content_item>
-
-        <.content_item icon="hero-hashtag" active>
-          <.link href="#home">Content 3</.link>
-        </.content_item>
-      </.content_wrapper>
-    </.content_item>
-  </.table_content>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :title_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to title"
-
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :space, :string, default: "", doc: "Space between items"
-  attr :animated, :boolean, default: false, doc: "Determines whether element's icon has animation"
-  attr :padding, :string, default: "", doc: "Determines padding for items"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :item, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :title, :string, doc: "Specifies the title of the element"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :font_weight, :string, doc: "Determines custom class for the font weight"
-    attr :link_title, :string, doc: "Determines link"
-    attr :link, :string, doc: "Determines link path"
-    attr :active, :boolean, doc: "Indicates whether the element is currently active and visible"
-    attr :title_class, :string, doc: "Custom CSS class for additional styling to title"
-
-    attr :wrapper_class, :string,
-      doc: "Custom CSS class for additional styling to content wrapper"
-
-    attr :link_class, :string, doc: "Custom CSS class for additional styling to link"
-    attr :contetn_class, :string, doc: "Custom CSS class for additional styling to content"
-  end
-
-  def table_content(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      phx-mounted={@animated && JS.add_class("scroll-smooth", to: "html")}
-      role="navigation"
-      aria-labelledby={@title && @id && "#{@id}-title"}
-      class={[
-        color_variant(@variant, @color),
-        padding_size(@padding),
-        rounded_size(@rounded),
-        border_class(@border, @variant),
-        space_size(@space),
-        size_class(@size)
-      ]}
-      {@rest}
-    >
-      <h5
-        class={["font-semibold text-sm leading-6", @title_class]}
-        id={@title && @id && "#{@id}-title"}
-      >
-        {@title}
-      </h5>
-
-      <div
-        :for={item <- @item}
-        class={[
-          "content-item",
-          item[:active] && "font-bold",
-          item[:font_weight],
-          item[:class]
-        ]}
-      >
-        <div :if={!is_nil(item[:title])} class={item[:title_class]}>{item[:title]}</div>
-        <div class={[
-          "flex items-center transition-all hover:font-bold hover:opacity-90",
-          item[:wrapper_class]
-        ]}>
-          <.icon
-            :if={!is_nil(item[:icon])}
-            name={item[:icon]}
-            class={["content-icon me-2 inline-block", item[:icon_class]]}
-          />
-          <.link :if={item[:link_title] && item[:link]} patch={item[:link]} class={item[:link_class]}>
-            {item[:link_title]}
-          </.link>
-          <div class={item[:content_class]}>
-            {render_slot(item)}
-          </div>
-        </div>
-      </div>
-
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `content_wrapper` component is used to wrap multiple content items, allowing for grouped
-  and structured presentation of content. It provides options for custom styling and font
-  weight, making it versatile for various use cases.
-
-  ## Examples
-
-  ```elixir
-  <.content_wrapper>
-    <.content_item icon="hero-hashtag">
-      <.link href="#home">Content 1</.link>
-    </.content_item>
-
-    <.content_item icon="hero-hashtag">
-      <.link href="#home">Content 2</.link>
-    </.content_item>
-
-    <.content_item icon="hero-hashtag" active>
-      <.link href="#home">Content 3</.link>
-    </.content_item>
-  </.content_wrapper>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def content_wrapper(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      class={[
-        "content-wrapper",
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `content_item` component is used to represent a single content item with an optional
-  icon and custom styling.
-
-  It allows for active state management and supports various configurations such as font
-  weight and additional CSS classes.
-
-  ## Examples
-
-  ```elixir
-  <.content_item icon="hero-hashtag">
-    <.link href="#prag">Content 1</.link>
-  </.content_item>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :title_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to title"
-
-  attr :wrapper_content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling content wrapper"
-
-  attr :content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling to content"
-
-  attr :link_class, :string, default: nil, doc: "Custom CSS class for additional styling to link"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  attr :icon_class, :string, default: nil, doc: "Determines custom class for the icon"
-  attr :link_title, :string, default: nil, doc: "Determines link name"
-  attr :link, :string, default: nil, doc: "Determines path of link"
-
-  attr :font_weight, :string,
-    default: "font-noraml",
-    doc: "Determines custom class for the font weight"
-
-  attr :active, :boolean,
-    default: false,
-    doc: "Indicates whether the element is currently active and visible"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def content_item(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="listitem"
-      aria-current={@active && "true"}
-      class={[
-        "content-item",
-        @active && "font-bold",
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div :if={!is_nil(@title)} class={@title_class}>{@title}</div>
-      <div class={[
-        "flex items-center transition-all hover:font-bold hover:opacity-90",
-        @wrapper_content_class
-      ]}>
-        <.icon
-          :if={!is_nil(@icon)}
-          name={@icon}
-          class={["content-icon me-2 inline-block", @icon_class]}
-        />
-        <.link :if={@link_title && @link} patch={@link} class={@link_class}>{@link_title}</.link>
-        <div class={@content_class}>
-          {render_slot(@inner_block)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp size_class("extra_small") do
-    [
-      "text-xs [&_.content-item]:py-1 [&_.content-item]:px-1.5 [&_.content-icon]:size-2.5"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "text-sm [&_.content-item]:py-1.5 [&_.content-item]:px-2 [&_.content-icon]:size-3"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "text-base [&_.content-item]:py-2 [&_.content-item]:px-2.5 [&_.content-icon]:size-3.5"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "text-lg [&_.content-item]:py-2.5 [&_.content-item]:px-3 [&_.content-icon]:size-4"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "text-xl [&_.content-item]:py-3 [&_.content-item]:px-3.5 [&_.content-icon]:size-5"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp space_size("extra_small"), do: "space-y-1"
-
-  defp space_size("small"), do: "space-y-2"
-
-  defp space_size("medium"), do: "space-y-3"
-
-  defp space_size("large"), do: "space-y-4"
-
-  defp space_size("extra_large"), do: "space-y-5"
-
-  defp space_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant)
-       when variant in ["default", "shadow", "transparent", "gradient"],
-       do: nil
-
-  defp border_class("none", _), do: "border-0"
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-5"
-
-  defp padding_size("small"), do: "p-6"
-
-  defp padding_size("medium"), do: "p-7"
-
-  defp padding_size("large"), do: "p-8"
-
-  defp padding_size("extra_large"), do: "p-9"
-
-  defp padding_size("double_large"), do: "p-10"
-
-  defp padding_size("triple_large"), do: "p-12"
-
-  defp padding_size("quadruple_large"), do: "p-16"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7]",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    [
-      "bg-white text-black"
-    ]
-  end
-
-  defp color_variant("default", "dark") do
-    [
-      "bg-[#282828] text-white"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white",
-      "dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white",
-      "dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white",
-      "dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white",
-      "dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#DE1135] text-white",
-      "dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white",
-      "dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white",
-      "dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white",
-      "dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white",
-      "dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white",
-      "dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "bg-transparent text-[#007F8C] border-[#007F8C]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "bg-transparent text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "bg-transparent text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "bg-transparent text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "bg-transparent text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "bg-transparent text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "bg-transparent text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "bg-transparent text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "bg-transparent text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural") do
-    [
-      "bg-transparent text-[#4B4B4B]",
-      "dark:text-[#DDDDDD] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary") do
-    [
-      "bg-transparent text-[#007F8C]",
-      "dark:text-[#01B8CA] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary") do
-    [
-      "bg-transparent text-[#266EF1]",
-      "dark:text-[#6DAAFB] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success") do
-    [
-      "bg-transparent text-[#0E8345]",
-      "dark:text-[#06C167] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning") do
-    [
-      "bg-transparent text-[#CA8D01]",
-      "dark:text-[#FDC034] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger") do
-    [
-      "bg-transparent text-[#DE1135]",
-      "dark:text-[#FC7F79] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info") do
-    [
-      "bg-transparent text-[#0B84BA]",
-      "dark:text-[#3EB7ED] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc") do
-    [
-      "bg-transparent text-[#8750C5]",
-      "dark:text-[#BA83F9] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn") do
-    [
-      "bg-transparent text-[#A86438]",
-      "dark:text-[#DB976B] border-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver") do
-    [
-      "bg-transparent text-[#868686]",
-      "dark:text-[#A6A6A6] border-transparent"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/tabs.ex b/lib/geo_web/components/tabs.ex
deleted file mode 100644
index b1bb3fe..0000000
--- a/lib/geo_web/components/tabs.ex
+++ /dev/null
@@ -1,874 +0,0 @@
-defmodule GeoWeb.Components.Tabs do
-  @moduledoc """
-  `GeoWeb.Components.Tabs` is a Phoenix component module that provides a highly customizable tab
-  interface for organizing and displaying content.
-
-  It allows the creation of both horizontal and vertical tabs with different styles, colors, and sizes.
-
-  The component supports various features such as icon placement, active state management,
-  and different border and padding options.
-
-  ## Features
-
-  - **Vertical and Horizontal Layouts:** Choose between a vertical or horizontal arrangement for the tabs.
-  - **Customizable Styles:** Supports multiple `variant` styles such as `default`, and `pills`.
-  - **Flexible Size Options:** Adjust the overall size of elements, including padding and font size.
-  - **Color Themes:** Offers a range of color themes such as `primary`, `secondary`, `success`, and more.
-  - **Active State Management:** Automatically manages active states and interactions with tabs.
-  - **Dynamic Content Slots:** Define tab and panel content using dynamic slots for easy customization.
-
-  ### Functionality:
-
-  The component uses Phoenix.LiveView.JS to manage the visibility and active state of the tabs dynamically.
-  It provides utility functions like show_tab/3 and hide_tab/3 for controlling the visibility of specific
-  tabs and panels programmatically.
-  """
-
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  import GeoWeb.Components.Badge, only: [badge: 1]
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `tabs` component provides a set of clickable tabs for organizing content.
-
-  Each tab can have an icon and supports various styles and configurations like vertical
-  or horizontal alignment.
-
-  ## Examples
-
-  ```elixir
-  <.tabs id="tab-1" color="warning" padding="large" gap="small" variant="pills" vertical>
-    <:tab icon="hero-home">1</:tab>
-    <:tab icon="hero-home">2</:tab>
-    <:tab icon="hero-home" active>3</:tab>
-
-    <:panel>
-      <p>
-        Tab1 Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum quis sapiente id?
-      </p>
-    </:panel>
-    <:panel>
-      <p>
-        Tab2 Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum quis sapiente id?
-      </p>
-    </:panel>
-    <:panel>
-      <p>
-        Tab3 Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum quis sapiente id?
-      </p>
-    </:panel>
-  </.tabs>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :border, :string, default: "none", doc: "Determines border style"
-  attr :tab_border_size, :string, default: "small", doc: "Determines border style for tab"
-  attr :full_width_tab, :boolean, default: false, doc: "Determines border style for tab"
-  attr :hide_list_border, :boolean, default: false, doc: "Determines border style for tab"
-
-  attr :size, :string,
-    default: "small",
-    doc: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :gap, :string, default: "", doc: "Determines gap for tabs"
-  attr :rounded, :string, default: "none", doc: "Determines the border radius"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :padding, :string, default: "extra_small", doc: "Determines padding for items"
-  attr :content_padding, :string, default: "extra_small", doc: "Determines padding for items"
-  attr :triggers_position, :string, default: "extra_small", doc: ""
-  attr :vertical, :boolean, default: false, doc: "Determines whether element is vertical"
-  attr :placement, :string, default: "start", doc: ""
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  slot :tab, required: true do
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :padding, :string, doc: "Determines padding for items"
-    attr :icon_class, :string, doc: "Determines custom class for the icon"
-    attr :icon_position, :string, doc: "Determines icon position"
-    attr :active, :boolean, doc: "Indicates whether the element is currently active and visible"
-    attr :badge, :string, doc: "Add badge to tab"
-    attr :badge_color, :string, doc: "badge color"
-    attr :badge_position, :string, doc: "badge position"
-    attr :badge_size, :string, doc: "badge size"
-    attr :badge_variant, :string, doc: "badge color varinat"
-    attr :on_select, :any, doc: "Custom JS module for on_select action"
-  end
-
-  slot :panel, required: false do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-  end
-
-  def tabs(%{vertical: true} = assigns) do
-    active_index =
-      Enum.find_index(assigns.tab, &Map.get(&1, :active)) || 0
-
-    assigns = assign(assigns, :active_index, active_index + 1)
-
-    ~H"""
-    <div
-      id={@id}
-      phx-mounted={hide_tab(@id, length(@tab)) |> show_tab(@id, @active_index)}
-      class={[
-        "vertical-tab flex dark:text-gray-200",
-        @placement == "end" && "flex-row-reverse",
-        content_position(@triggers_position),
-        @variant == "default" || (@variant == "base" && tab_border(@tab_border_size, @vertical)),
-        color_variant(@variant, @color),
-        rounded_size(@rounded, @variant),
-        padding_size(@padding),
-        content_padding(@content_padding),
-        border_class(@border),
-        size_class(@size),
-        gap_size(@gap),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        role="tablist"
-        tabindex="0"
-        class={[
-          "tab-trigger-list flex flex-col shrink-0 text-[#4B4B4B] dark:text-[#DDDDDD]",
-          @variant == "default" &&
-            "border-[#e8e8e8] dark:border-[#5e5e5e] [&:not(.active-tab)_.tab-trigger]:border-[#e8e8e8] dark:[&:not(.active-tab)_.tab-trigger]:border-[#5e5e5e]",
-          @variant == "base" &&
-            "border-[#e4e4e7] dark:border-[#27272A] [&:not(.active-tab)_.tab-trigger]:border-[#e4e4e7] dark:[&:not(.active-tab)_.tab-trigger]:border-[#27272a]"
-        ]}
-      >
-        <button
-          :for={{tab, index} <- Enum.with_index(@tab, 1)}
-          id={"#{@id}-tab-header-#{index}"}
-          phx-show-tab={hide_tab(@id, length(@tab)) |> show_tab(@id, index)}
-          phx-click={
-            if is_nil(tab[:on_select]) do
-              JS.exec("phx-show-tab", to: "##{@id}-tab-header-#{index}")
-            else
-              JS.exec(tab[:on_select] || %JS{}, "phx-show-tab", to: "##{@id}-tab-header-#{index}")
-            end
-          }
-          phx-mounted={tab[:active] && JS.exec("phx-show-tab", to: "##{@id}-tab-header-#{index}")}
-          role="tab"
-          aria-selected={@active_index == index}
-          aria-controls={"#{@id}-tab-panel-#{index}"}
-          tabindex={(@active_index == index && "0") || "-1"}
-          class={[
-            "tab-trigger flex flex-row flex-nowrap items-center gap-1.5 leading-5",
-            "transition-all duration-400 delay-100 disabled:opacity-80",
-            tab[:icon_position] == "end" && tab[:badge_position] == "end" && "flex-row-reverse",
-            tab[:class]
-          ]}
-        >
-          <.icon :if={tab[:icon]} name={tab[:icon]} class="tab-icon" />
-          <.badge
-            :if={tab[:badge]}
-            variant={tab[:badge_variant] || "default"}
-            color={tab[:badge_color] || "natural"}
-            size={tab[:badge_size] || "extra_small"}
-            rounded="full"
-            circle
-          >
-            {tab[:badge]}
-          </.badge>
-          <span class="block tab-button_contnet">
-            {render_slot(tab)}
-          </span>
-        </button>
-      </div>
-
-      <div class="ms-2 flex-1">
-        <div
-          :for={{panel, index} <- Enum.with_index(@panel, 1)}
-          id={"#{@id}-tab-panel-#{index}"}
-          role="tabpanel"
-          aria-labelledby={"#{@id}-tab-header-#{index}"}
-          class={[
-            "tab-content",
-            "[&:not(.active-tab-panel)]:hidden [&:not(.active-tab-panel)]:opacity-0 [&:not(.active-tab-panel)]:invisible",
-            "[&.active-tab-panel]:block [&.active-tab-panel]:opacity-100 [&.active-tab-panel]:visible",
-            panel[:class]
-          ]}
-        >
-          {render_slot(panel)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  def tabs(assigns) do
-    active_index =
-      Enum.find_index(assigns.tab, &Map.get(&1, :active)) || 0
-
-    assigns = assign(assigns, :active_index, active_index + 1)
-
-    ~H"""
-    <div
-      id={@id}
-      phx-mounted={hide_tab(@id, length(@tab)) |> show_tab(@id, @active_index)}
-      class={[
-        "horizontal-tab dark:text-gray-200",
-        content_position(@triggers_position),
-        @variant == "default" || (@variant == "base" && tab_border(@tab_border_size, @vertical)),
-        @hide_list_border && "no-border-tabs-list [&_.tab-trigger]:flex-1",
-        @full_width_tab && "[&_.tab-trigger]:flex-1",
-        color_variant(@variant, @color),
-        rounded_size(@rounded, @variant),
-        padding_size(@padding),
-        content_padding(@content_padding),
-        border_class(@border),
-        size_class(@size),
-        gap_size(@gap),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        role="tablist"
-        tabindex="0"
-        class={[
-          "tab-trigger-list flex flex-wrap flex-wrap",
-          @variant == "nav_pills" && "tab-nav-pills bg-[#F4F4F5] dark:bg-[#27272A]",
-          @variant == "nav_pills" && !@full_width_tab && "w-fit"
-        ]}
-      >
-        <button
-          :for={{tab, index} <- Enum.with_index(@tab, 1)}
-          id={"#{@id}-tab-header-#{index}"}
-          phx-click={
-            if is_nil(tab[:on_select]) do
-              hide_tab(@id, length(@tab)) |> show_tab(@id, index)
-            else
-              tab[:on_select] |> hide_tab(@id, length(@tab)) |> show_tab(@id, index)
-            end
-          }
-          role="tab"
-          aria-selected={@active_index == index}
-          aria-controls={"#{@id}-tab-panel-#{index}"}
-          tabindex={(@active_index == index && "0") || "-1"}
-          class={[
-            "tab-trigger flex flex-row flex-nowrap justify-center items-center gap-1.5 leading-5",
-            "transition-all duration-400 delay-100 disabled:opacity-80",
-            tab[:icon_position] == "end" && tab[:badge_position] == "end" && "flex-row-reverse",
-            tab[:class]
-          ]}
-        >
-          <.icon :if={tab[:icon]} name={tab[:icon]} class="tab-icon" />
-          <.badge
-            :if={tab[:badge]}
-            variant={tab[:badge_variant] || "default"}
-            color={tab[:badge_color] || "natural"}
-            size={tab[:badge_size] || "extra_small"}
-            rounded="full"
-            circle
-          >
-            {tab[:badge]}
-          </.badge>
-          <span class="block tab-button_contnet">
-            {render_slot(tab)}
-          </span>
-        </button>
-      </div>
-
-      <div class="mt-2">
-        <div
-          :for={{panel, index} <- Enum.with_index(@panel, 1)}
-          id={"#{@id}-tab-panel-#{index}"}
-          aria-labelledby={"#{@id}-tab-header-#{index}"}
-          role="tabpanel"
-          class={[
-            "tab-content w-full",
-            "[&:not(.active-tab-panel)]:hidden [&:not(.active-tab-panel)]:opacity-0 [&:not(.active-tab-panel)]:invisible",
-            "[&.active-tab-panel]:block [&.active-tab-panel]:opacity-100 [&.active-tab-panel]:visible",
-            panel[:class]
-          ]}
-        >
-          {render_slot(panel)}
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  defp content_position("start") do
-    [
-      "[&_.horizontal-tab_.tab-trigger-list]:justify-start",
-      "[&_.vertical-tab_.tab-trigger-list]:justify-start"
-    ]
-  end
-
-  defp content_position("end") do
-    [
-      "[&_.horizontal-tab_.tab-trigger-list]:justify-end",
-      "[&_.vertical-tab_.tab-trigger-list]:justify-end"
-    ]
-  end
-
-  defp content_position("center") do
-    [
-      "[&_.horizontal-tab_.tab-trigger-list]:justify-center",
-      "[&_.vertical-tab_.tab-trigger-list]:justify-center"
-    ]
-  end
-
-  defp content_position("between") do
-    [
-      "[&_.horizontal-tab_.tab-trigger-list]:justify-between",
-      "[&_.vertical-tab_.tab-trigger-list]:justify-between"
-    ]
-  end
-
-  defp content_position("around") do
-    [
-      "[&_.horizontal-tab_.tab-trigger-list]:justify-around",
-      "[&_.vertical-tab_.tab-trigger-list]:justify-around"
-    ]
-  end
-
-  defp content_position(params) when is_binary(params), do: params
-
-  defp padding_size("none"), do: nil
-
-  defp padding_size("extra_small") do
-    [
-      "[&_.tab-trigger]:py-1 [&_.tab-trigger]:px-2",
-      "[&_.tab-nav-pills]:py-1 [&_.tab-nav-pills]:px-2"
-    ]
-  end
-
-  defp padding_size("small") do
-    [
-      "[&_.tab-trigger]:py-1.5 [&_.tab-trigger]:px-3",
-      "[&_.tab-nav-pills]:py-1.5 [&_.tab-nav-pills]:px-3"
-    ]
-  end
-
-  defp padding_size("medium") do
-    [
-      "[&_.tab-trigger]:py-2 [&_.tab-trigger]:px-4",
-      "[&_.tab-nav-pills]:py-2 [&_.tab-nav-pills]:px-4"
-    ]
-  end
-
-  defp padding_size("large") do
-    [
-      "[&_.tab-trigger]:py-2.5 [&_.tab-trigger]:px-5",
-      "[&_.tab-nav-pills]:py-2.5 [&_.tab-nav-pills]:px-5"
-    ]
-  end
-
-  defp padding_size("extra_large") do
-    [
-      "[&_.tab-trigger]:py-3 [&_.tab-trigger]:px-5",
-      "[&_.tab-nav-pills]:py-3 [&_.tab-nav-pills]:px-5"
-    ]
-  end
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp content_padding("none"), do: nil
-  defp content_padding("extra_small"), do: "[&_.tab-content]:p-2"
-  defp content_padding("small"), do: "[&_.tab-content]:p-3"
-  defp content_padding("medium"), do: "[&_.tab-content]:p-4"
-  defp content_padding("large"), do: "[&_.tab-content]:p-5"
-  defp content_padding("extra_large"), do: "[&_.tab-content]:p-6"
-  defp content_padding(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs [&_.tab-icon]:size-4"
-
-  defp size_class("small"), do: "text-sm [&_.tab-icon]:size-5"
-
-  defp size_class("medium"), do: "text-base [&_.tab-icon]:size-6"
-
-  defp size_class("large"), do: "text-lg [&_.tab-icon]:size-7"
-
-  defp size_class("extra_large"), do: "text-xl [&_.tab-icon]:size-8"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp gap_size("extra_small"), do: "[&_.tab-trigger-list]:gap-1"
-  defp gap_size("small"), do: "[&_.tab-trigger-list]:gap-2"
-  defp gap_size("medium"), do: "[&_.tab-trigger-list]:gap-3"
-  defp gap_size("large"), do: "[&_.tab-trigger-list]:gap-4"
-  defp gap_size("extra_large"), do: "[&_.tab-trigger-list]:gap-5"
-  defp gap_size("none"), do: nil
-  defp gap_size(params) when is_binary(params), do: params
-
-  defp border_class("none"), do: nil
-  defp border_class("extra_small"), do: "border"
-  defp border_class("small"), do: "border-2"
-  defp border_class("medium"), do: "border-[3px]"
-  defp border_class("large"), do: "border-4"
-  defp border_class("extra_large"), do: "border-[5px]"
-  defp border_class(params) when is_binary(params), do: [params]
-  defp border_class(nil), do: border_class("none")
-
-  defp tab_border("none", true), do: nil
-  defp tab_border("extra_small", true), do: "[&_.tab-trigger]:border-e"
-  defp tab_border("small", true), do: "[&_.tab-trigger]:border-e-2"
-  defp tab_border("medium", true), do: "[&_.tab-trigger]:border-e-[3px]"
-  defp tab_border("large", true), do: "[&_.tab-trigger]:border-e-4"
-  defp tab_border("extra_large", true), do: "[&_.tab-trigger]:border-e-[5px]"
-  defp tab_border(params, true) when is_binary(params), do: [params]
-
-  defp tab_border("none", false), do: nil
-
-  defp tab_border("extra_small", false) do
-    [
-      "[&_.tab-trigger]:border-b [&_.tab-trigger]:-mb-px",
-      "[&:not(.no-border-tabs-list)_.tab-trigger-list]:border-b"
-    ]
-  end
-
-  defp tab_border("small", false) do
-    [
-      "[&_.tab-trigger]:border-b-2 [&_.tab-trigger]:-mb-0.5",
-      "[&:not(.no-border-tabs-list)_.tab-trigger-list]:border-b-2"
-    ]
-  end
-
-  defp tab_border("medium", false) do
-    [
-      "[&_.tab-trigger]:border-b-[3px]  [&_.tab-trigger]:-mb-1",
-      "[&:not(.no-border-tabs-list)_.tab-trigger-list]:border-b-[3px]"
-    ]
-  end
-
-  defp tab_border("large", false) do
-    [
-      "[&_.tab-trigger]:border-b-4 [&_.tab-trigger]:-mb-1.5",
-      "[&:not(.no-border-tabs-list)_.tab-trigger-list]:border-b-4"
-    ]
-  end
-
-  defp tab_border("extra_large", false) do
-    [
-      "[&_.tab-trigger]:border-b-[5px] [&_.tab-trigger]:-mb-2",
-      "[&:not(.no-border-tabs-list)_.tab-trigger-list]:border-b-[5px]"
-    ]
-  end
-
-  defp tab_border(params, false) when is_binary(params), do: [params]
-
-  defp rounded_size("none", "default"), do: nil
-
-  defp rounded_size("extra_small", "default"), do: "[&_.tab-trigger]:rounded-t-sm"
-
-  defp rounded_size("small", "default"), do: "[&_.tab-trigger]:rounded-t"
-
-  defp rounded_size("medium", "default"), do: "[&_.tab-trigger]:rounded-t-md"
-
-  defp rounded_size("large", "default"), do: "[&_.tab-trigger]:rounded-t-lg"
-
-  defp rounded_size("extra_large", "default"), do: "[&_.tab-trigger]:rounded-t-xl"
-
-  defp rounded_size("none", "pills"), do: "[&_.tab-trigger]:rounded-none"
-
-  defp rounded_size("extra_small", "pills"), do: "[&_.tab-trigger]:rounded-sm"
-
-  defp rounded_size("small", "pills"), do: "[&_.tab-trigger]:rounded"
-
-  defp rounded_size("medium", "pills"), do: "[&_.tab-trigger]:rounded-md"
-
-  defp rounded_size("large", "pills"), do: "[&_.tab-trigger]:rounded-lg"
-
-  defp rounded_size("extra_large", "pills"), do: "[&_.tab-trigger]:rounded-xl"
-
-  defp rounded_size("full", "pills"), do: "[&_.tab-trigger]:rounded-full"
-
-  defp rounded_size("none", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded-none [&_.tab-nav-pills]:rounded-none"
-
-  defp rounded_size("extra_small", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded-sm [&_.tab-nav-pills]:rounded-sm"
-
-  defp rounded_size("small", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded [&_.tab-nav-pills]:rounded"
-
-  defp rounded_size("medium", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded-md [&_.tab-nav-pills]:rounded-md"
-
-  defp rounded_size("large", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded-lg [&_.tab-nav-pills]:rounded-lg"
-
-  defp rounded_size("extra_large", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded-xl [&_.tab-nav-pills]:rounded-xl"
-
-  defp rounded_size("full", "nav_pills"),
-    do: "[&_.tab-trigger]:rounded-full [&_.tab-nav-pills]:rounded-full"
-
-  defp rounded_size(params, _) when is_binary(params), do: [params]
-
-  defp color_variant("base", _) do
-    [
-      "[&_.tab-trigger.active-tab]:bg-[#e4e4e7] [&_.tab-trigger.active-tab]:text-[#09090b]",
-      "[&_.tab-trigger.active-tab]:border-[#e4e4e7]",
-      "hover:[&_.tab-trigger]:text-[#09090b] hover:[&_.tab-trigger]:border-[#e4e4e7]",
-      "[&_.tab-trigger]:border-[#e4e4e7] dark:[&_.tab-trigger]:border-[#27272a]",
-      "dark:[&_.tab-trigger.active-tab]:bg-[#27272a] dark:[&_.tab-trigger.active-tab]:text-[#FAFAFA]",
-      "dark:[&_.tab-trigger.active-tab]:border-[#27272a] ",
-      "dark:hover:[&_.tab-trigger]:text-[#FAFAFA] dark:hover:[&_.tab-trigger]:border-[#27272a]",
-      "hover:[&_.tab-trigger]:bg-[#e4e4e7] dark:hover:[&_.tab-trigger]:bg-[#27272a]",
-      "dark:[&_.tab-trigger-list]:border-[#27272A] [&_.tab-trigger-list]:border-[#e4e4e7]"
-    ]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#282828] [&_.tab-trigger.active-tab]:border-[#282828]",
-      "hover:[&_.tab-trigger]:text-[#282828] hover:[&_.tab-trigger]:border-[#282828]",
-      "dark:[&_.tab-trigger.active-tab]:text-white dark:[&_.tab-trigger.active-tab]:border-white ",
-      "dark:hover:[&_.tab-trigger]:text-white dark:hover:[&_.tab-trigger]:border-white"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#016974] [&_.tab-trigger.active-tab]:border-[#016974]",
-      "hover:[&_.tab-trigger]:text-[#016974] hover:[&_.tab-trigger]:border-[#016974]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#77D5E3] dark:[&_.tab-trigger.active-tab]:border-[#77D5E3]",
-      "dark:hover:[&_.tab-trigger]:text-[#77D5E3] dark:hover:[&_.tab-trigger]:border-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#175BCC] [&_.tab-trigger.active-tab]:border-[#175BCC]",
-      "hover:[&_.tab-trigger]:text-[#175BCC] hover:[&_.tab-trigger]:border-[#175BCC]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#A9C9FF] dark:[&_.tab-trigger.active-tab]:border-[#A9C9FF]",
-      "dark:hover:[&_.tab-trigger]:text-[#A9C9FF] dark:hover:[&_.tab-trigger]:border-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#166C3B] [&_.tab-trigger.active-tab]:border-[#166C3B]",
-      "hover:[&_.tab-trigger]:text-[#166C3B] hover:[&_.tab-trigger]:border-[#166C3B]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#7FD99A] dark:[&_.tab-trigger.active-tab]:border-[#7FD99A]",
-      "dark:hover:[&_.tab-trigger]:text-[#7FD99A] dark:hover:[&_.tab-trigger]:border-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#976A01] [&_.tab-trigger.active-tab]:border-[#976A01]",
-      "hover:[&_.tab-trigger]:text-[#976A01] hover:[&_.tab-trigger]:border-[#976A01]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#FDD067] dark:[&_.tab-trigger.active-tab]:border-[#FDD067]",
-      "dark:hover:[&_.tab-trigger]:text-[#FDD067] dark:hover:[&_.tab-trigger]:border-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#BB032A] [&_.tab-trigger.active-tab]:border-[#BB032A]",
-      "hover:[&_.tab-trigger]:text-[#BB032A] hover:[&_.tab-trigger]:border-[#BB032A]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#FFB2AB] dark:[&_.tab-trigger.active-tab]:border-[#FFB2AB]",
-      "dark:hover:[&_.tab-trigger]:text-[#FFB2AB] dark:hover:[&_.tab-trigger]:border-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#08638C] [&_.tab-trigger.active-tab]:border-[#08638C]",
-      "hover:[&_.tab-trigger]:text-[#08638C] hover:[&_.tab-trigger]:border-[#08638C]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#6EC9F2] dark:[&_.tab-trigger.active-tab]:border-[#6EC9F2]",
-      "dark:hover:[&_.tab-trigger]:text-[#6EC9F2] dark:hover:[&_.tab-trigger]:border-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#653C94] [&_.tab-trigger.active-tab]:border-[#653C94]",
-      "hover:[&_.tab-trigger]:text-[#653C94] hover:[&_.tab-trigger]:border-[#653C94]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#CBA2FA] dark:[&_.tab-trigger.active-tab]:border-[#CBA2FA]",
-      "dark:hover:[&_.tab-trigger]:text-[#CBA2FA] dark:hover:[&_.tab-trigger]:border-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#7E4B2A] [&_.tab-trigger.active-tab]:border-[#7E4B2A]",
-      "hover:[&_.tab-trigger]:text-[#7E4B2A] hover:[&_.tab-trigger]:border-[#7E4B2A]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#E4B190] dark:[&_.tab-trigger.active-tab]:border-[#E4B190]",
-      "dark:hover:[&_.tab-trigger]:text-[#E4B190] dark:hover:[&_.tab-trigger]:border-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "[&_.tab-trigger.active-tab]:text-[#727272] [&_.tab-trigger.active-tab]:border-[#727272]",
-      "hover:[&_.tab-trigger]:text-[#727272] hover:[&_.tab-trigger]:border-[#727272]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#BBBBBB] dark:[&_.tab-trigger.active-tab]:border-[#BBBBBB]",
-      "dark:hover:[&_.tab-trigger]:text-[#BBBBBB] dark:hover:[&_.tab-trigger]:border-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("pills", "natural") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#282828]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#4B4B4B]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#E8E8E8]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("pills", "primary") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#016974]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#007F8C]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#77D5E3]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("pills", "secondary") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#175BCC]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#266EF1]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#A9C9FF]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("pills", "success") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#166C3B]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#0E8345]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#7FD99A]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("pills", "warning") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#976A01]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#CA8D01]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#FDD067]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("pills", "danger") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#BB032A]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#DE1135]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#FFB2AB]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("pills", "info") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#08638C]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#0B84BA]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#6EC9F2]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("pills", "misc") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#653C94]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#8750C5]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#CBA2FA]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("pills", "dawn") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#7E4B2A]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#A86438]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#E4B190]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("pills", "silver") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#727272]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#868686]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#BBBBBB]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "base") do
-    [
-      "hover:[&_.tab-trigger]:text-[#09090b] hover:[&_.tab-trigger]:bg-[#e4e4e7]",
-      "[&_.tab-trigger.active-tab]:text-[#09090b] [&_.tab-trigger.active-tab]:bg-white",
-      "dark:hover:[&_.tab-trigger]:text-[#FAFAFA] dark:hover:[&_.tab-trigger]:bg-[#18181B]",
-      "dark:[&_.tab-trigger.active-tab]:text-[#FAFAFA] dark:[&_.tab-trigger.active-tab]:bg-[#18181B]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "natural") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#282828]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#4B4B4B]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#E8E8E8]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "primary") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#016974]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#007F8C]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#77D5E3]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "secondary") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#175BCC]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#266EF1]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#A9C9FF]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "success") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#166C3B]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#0E8345]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#7FD99A]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "warning") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#976A01]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#CA8D01]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#FDD067]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "danger") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#BB032A]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#DE1135]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#FFB2AB]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "info") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#08638C]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#0B84BA]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#6EC9F2]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "misc") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#653C94]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#8750C5]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#CBA2FA]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "dawn") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#7E4B2A]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#A86438]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#E4B190]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("nav_pills", "silver") do
-    [
-      "hover:[&_.tab-trigger]:text-white hover:[&_.tab-trigger]:bg-[#727272]",
-      "[&_.tab-trigger.active-tab]:text-white [&_.tab-trigger.active-tab]:bg-[#868686]",
-      "dark:hover:[&_.tab-trigger]:text-black dark:hover:[&_.tab-trigger]:bg-[#BBBBBB]",
-      "dark:[&_.tab-trigger.active-tab]:text-black dark:[&_.tab-trigger.active-tab]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  @doc """
-  Sets a specific tab as active by adding `active-tab` and `active-tab-panel` CSS classes to the
-  selected tab and its corresponding panel.
-
-  ## Parameters
-
-    - `js` (optional): A `%Phoenix.LiveView.JS{}` struct that allows chaining multiple JS commands.
-    Defaults to an empty `%JS{}`.
-    - `id`: A `string` representing the unique identifier for the tab group.
-    - `count`: An `integer` indicating the tab number to be activated.
-
-  ## Usage
-
-  ```elixir
-  show_tab(%JS{}, "example-tabs", 2)
-  ```
-  This will activate the second tab and its corresponding panel in the tab group with the ID `example-tabs`.
-  """
-
-  def show_tab(js \\ %JS{}, id, count) when is_binary(id) do
-    js
-    |> JS.add_class("active-tab", to: "##{id}-tab-header-#{count}")
-    |> JS.add_class("active-tab-panel", to: "##{id}-tab-panel-#{count}")
-    |> JS.set_attribute({"aria-selected", "true"}, to: "##{id}-tab-header-#{count}")
-    |> JS.set_attribute({"tabindex", "0"}, to: "##{id}-tab-header-#{count}")
-  end
-
-  @doc """
-  Hides all tabs in a given tab group by removing the `active-tab` and `active-tab-panel` CSS
-  classes from each tab and its corresponding panel.
-
-  ## Parameters
-
-    - `js` (optional): A `%Phoenix.LiveView.JS{}` struct used to chain multiple JS commands.
-    Defaults to an empty `%JS{}`.
-    - `id`: A `string` representing the unique identifier for the tab group.
-    - `count`: An `integer` indicating the total number of tabs in the group.
-
-  ## Usage
-
-  ```elixir
-  hide_tab(%JS{}, "example-tabs", 3)
-  ```
-
-  This will deactivate all three tabs and their corresponding panels in the tab group
-  with the ID `example-tabs`.
-  """
-  def hide_tab(js \\ %JS{}, id, count) do
-    Enum.reduce(1..count, js, fn item, acc ->
-      acc
-      |> JS.remove_class("active-tab", to: "##{id}-tab-header-#{item}")
-      |> JS.remove_class("active-tab-panel", to: "##{id}-tab-panel-#{item}")
-      |> JS.set_attribute({"aria-selected", "false"}, to: "##{id}-tab-header-#{item}")
-      |> JS.set_attribute({"tabindex", "-1"}, to: "##{id}-tab-header-#{item}")
-    end)
-  end
-end
diff --git a/lib/geo_web/components/tel_field.ex b/lib/geo_web/components/tel_field.ex
deleted file mode 100644
index 3c980f1..0000000
--- a/lib/geo_web/components/tel_field.ex
+++ /dev/null
@@ -1,1063 +0,0 @@
-defmodule GeoWeb.Components.TelField do
-  @moduledoc """
-  The `GeoWeb.Components.TelField` module provides a highly customizable telephone input field
-  component for use in Phoenix LiveView applications. This component supports various styling
-  options such as color themes, border styles, padding, and more.
-
-  It also includes options for displaying error messages, descriptions, and floating labels,
-  allowing for a rich user experience.
-
-  ### Features:
-  - **Color Themes**: Choose from different color options for both the input field and the error states.
-  - **Border Styles**: Apply various border styles, including outline, unbordered, and shadow.
-  - **Padding and Size Options**: Customize the overall size and padding of the input field.
-  - **Error Handling**: Easily display error messages with optional icons.
-  - **Label Placement**: Support for floating labels in both inner and outer styles.
-  - **Accessibility**: Includes support for ARIA attributes and accessible error handling.
-  - **Slots**: Provides slots for rendering additional content at the start and end of the
-  input field, allowing for flexible customization.
-
-  This component is designed to integrate seamlessly into your Phoenix LiveView forms and
-  provides a wide range of customization options to suit different design needs.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `tel_field` component is a customizable telephone input field with support for various
-  styles, including floating labels and error messages.
-
-  ## Examples
-
-  ```elixir
-  <.tel_field
-    name="name"
-    space="small"
-    color="danger"
-    description="This is description"
-    label="This is outline label Tel"
-    placeholder="This is Tel placeholder"
-    floating="outer"
-  />
-
-  <.tel_field
-      name="name"
-      space="small"
-      color="danger"
-      description="This is description"
-      label="This is outline label Tel"
-      placeholder="This is Tel placeholder"
-      floating="outer"
-    >
-      <:start_section>
-        <.icon name="hero-home" class="size-4" />
-      </:start_section>
-      <:end_section>
-        <.icon name="hero-home" class="size-4" />
-      </:end_section>
-  </.tel_field>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form list maxlength minlength pattern placeholder
-        readonly required size inputmode inputmode title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec tel_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def tel_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> tel_field()
-  end
-
-  def tel_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.tel-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "tel-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "tel-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="tel"
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def tel_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.tel-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["tel-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "tel-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "tel-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="tel"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small") do
-    "[&_.tel-field-wrapper_input]:h-8 [&_.tel-field-wrapper_.tel-field-icon]:size-3"
-  end
-
-  defp size_class("small") do
-    "[&_.tel-field-wrapper_input]:h-9 [&_.tel-field-wrapper_.tel-field-icon]:size-3.5"
-  end
-
-  defp size_class("medium") do
-    "[&_.tel-field-wrapper_input]:h-10 [&_.tel-field-wrapper_.tel-field-icon]:size-4"
-  end
-
-  defp size_class("large") do
-    "[&_.tel-field-wrapper_input]:h-11 [&_.tel-field-wrapper_.tel-field-icon]:size-5"
-  end
-
-  defp size_class("extra_large") do
-    "[&_.tel-field-wrapper_input]:h-12 [&_.tel-field-wrapper_.tel-field-icon]:size-6"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.tel-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.tel-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.tel-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.tel-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.tel-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.tel-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.tel-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.tel-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.tel-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.tel-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.tel-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.tel-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-white",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#27272a]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.tel-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.tel-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#DDDDDD]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#007F8C]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#01B8CA]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.tel-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#266EF1]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#6DAAFB]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.tel-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#0E8345]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#06C167]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.tel-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#CA8D01]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#FDC034]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#CA8D01]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#FC7F79]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#0B84BA]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#3EB7ED]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.tel-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#8750C5]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#BA83F9]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.tel-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#A86438]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#DB976B]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#868686]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#A6A6A6]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#868686] dark:focus-within:[&_.tel-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-white dark:[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.tel-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.tel-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.tel-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#DDDDDD]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#007F8C]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#01B8CA]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.tel-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#266EF1]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#6DAAFB]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.tel-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#0E8345]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#06C167]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.tel-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FDC034]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#DE1135]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FC7F79]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#3EB7ED]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.tel-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#8750C5]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#BA83F9]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.tel-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#A86438]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#DB976B]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#868686]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#A6A6A6]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#868686] dark:focus-within:[&_.tel-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.tel-field-wrapper]:bg-[#282828] text-[#282828] [&_.tel-field-wrapper]:text-white",
-      "[&_.tel-field-wrapper.tel-field-error]:border-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white focus-within:[&_.tel-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.tel-field-wrapper]:bg-white [&_.tel-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.tel-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#282828]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#868686]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#016974]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#77D5E3]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.tel-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#175BCC]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#002661]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#A9C9FF]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.tel-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#166C3B]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#002F14]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#7FD99A]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.tel-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#976A01]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#322300]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#FDD067]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#BB032A]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#520810]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#FFB2AB]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#0B84BA]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#03212F]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#6EC9F2]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.tel-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#653C94]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#221431]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#CBA2FA]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.tel-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#7E4B2A]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#2A190E]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#E4B190]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#727272]",
-      "[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:border-[#BBBBBB]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.tel-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#868686] dark:focus-within:[&_.tel-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.tel-field-wrapper]:bg-[#282828] text-[#282828] [&_.tel-field-wrapper]:border-[#727272] text-white",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white focus-within:[&_.tel-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.tel-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#DDDDDD]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#007F8C]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#01B8CA]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.tel-field-wrapper]:ring-[#01B8CA]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#266EF1]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#6DAAFB]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.tel-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#0E8345]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#06C167]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.tel-field-wrapper]:ring-[#06C167]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FDC034]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FDC034]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#DE1135]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#FC7F79]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.tel-field-wrapper]:ring-[#FC7F79]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#3EB7ED]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.tel-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#8750C5]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#BA83F9]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.tel-field-wrapper]:ring-[#BA83F9]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#A86438]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#DB976B]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.tel-field-wrapper]:ring-[#DB976B]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#868686]",
-      "dark:[&_.tel-field-wrapper:not(:has(.tel-field-error))]:bg-[#A6A6A6]",
-      "[&_.tel-field-wrapper.tel-field-error]:bg-rose-700",
-      "[&_.tel-field-wrapper>input]:placeholder:text-white dark:[&_.tel-field-wrapper>input]:placeholder:text-black",
-      "[&_.tel-field-wrapper>input]:text-white dark:[&_.tel-field-wrapper>input]:text-black",
-      "focus-within:[&_.tel-field-wrapper]:ring-[#868686] dark:focus-within:[&_.tel-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.tel-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.tel-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.tel-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.tel-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.tel-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.tel-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.tel-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.tel-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/text_field.ex b/lib/geo_web/components/text_field.ex
deleted file mode 100644
index 9ac34f5..0000000
--- a/lib/geo_web/components/text_field.ex
+++ /dev/null
@@ -1,1066 +0,0 @@
-defmodule GeoWeb.Components.TextField do
-  @moduledoc """
-  The `GeoWeb.Components.TextField` module provides a highly customizable text input field
-  component for use in Phoenix LiveView applications. This component supports various
-  styling options such as color themes, border styles, padding, and more.
-
-  It also includes options for displaying error messages, descriptions, and floating labels,
-  allowing for a rich user experience.
-
-  ### Features:
-  - **Color Themes**: Choose from different color options for both the input field and the error states.
-  - **Border Styles**: Apply various border styles, including outline, bordered, and shadow.
-  - **Padding and Size Options**: Customize the overall size and padding of the input field.
-  - **Error Handling**: Easily display error messages with optional icons.
-  - **Label Placement**: Support for floating labels in both inner and outer styles.
-  - **Accessibility**: Includes support for ARIA attributes and accessible error handling.
-  - **Slots**: Provides slots for rendering additional content at the start and end of the
-  input field, allowing for flexible customization.
-
-  This component is designed to integrate seamlessly into your Phoenix LiveView forms and provides
-  a wide range of customization options to suit different design needs.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `text_field` component is a customizable text input field with support for various styles,
-  including floating labels, error messages, and content sections.
-
-  ## Examples
-
-  ```elixir
-  <.text_field
-    name="name1"
-    value=""
-    space="small"
-    color="danger"
-    description="This is description"
-    label="This is outline label"
-    placeholder="This is placeholder"
-    floating="outer"
-  />
-
-  <.text_field
-    name="name"
-    value=""
-    space="small"
-    color="danger"
-    description="This is description"
-    label="This is outline label"
-    placeholder="This is placeholder"
-    floating="outer"
-  >
-    <:start_section>
-      <.icon name="hero-home" class="size-4" />
-    </:start_section>
-    <:end_section>
-      <.icon name="hero-home" class="size-4" />
-    </:end_section>
-  </.text_field>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form list maxlength minlength pattern placeholder
-        readonly required size spellcheck inputmode title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec text_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def text_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> text_field()
-  end
-
-  def text_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.text-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "text-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "text-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="text"
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def text_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.text-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["text-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "text-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "text-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="text"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small") do
-    "[&_.text-field-wrapper_input]:h-8 [&_.text-field-wrapper>.text-field-icon]:size-3.5"
-  end
-
-  defp size_class("small") do
-    "[&_.text-field-wrapper_input]:h-9 [&_.text-field-wrapper>.text-field-icon]:size-4"
-  end
-
-  defp size_class("medium") do
-    "[&_.text-field-wrapper_input]:h-10 [&_.text-field-wrapper>.text-field-icon]:size-5"
-  end
-
-  defp size_class("large") do
-    "[&_.text-field-wrapper_input]:h-11 [&_.text-field-wrapper>.text-field-icon]:size-6"
-  end
-
-  defp size_class("extra_large") do
-    "[&_.text-field-wrapper_input]:h-12 [&_.text-field-wrapper>.text-field-icon]:size-7"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.text-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.text-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.text-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.text-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.text-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.text-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.text-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.text-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.text-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.text-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.text-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.text-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-white",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#27272a]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.text-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.text-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.text-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#DDDDDD]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.text-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.text-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#007F8C]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#01B8CA]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.text-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.text-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#266EF1]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#6DAAFB]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.text-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.text-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#0E8345]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#06C167]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.text-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.text-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#CA8D01]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#FDC034]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.text-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.text-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#CA8D01]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#FC7F79]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.text-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.text-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#0B84BA]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#3EB7ED]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.text-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.text-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#8750C5]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#BA83F9]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.text-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.text-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#A86438]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#DB976B]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.text-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.text-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#868686]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#A6A6A6]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.text-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#868686] dark:focus-within:[&_.text-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-white dark:[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.text-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.text-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.text-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#DDDDDD]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.text-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.text-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#007F8C]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#01B8CA]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.text-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.text-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#266EF1]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#6DAAFB]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.text-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.text-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#0E8345]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#06C167]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.text-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.text-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FDC034]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.text-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.text-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#DE1135]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FC7F79]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.text-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.text-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#3EB7ED]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.text-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.text-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#8750C5]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#BA83F9]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.text-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.text-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#A86438]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#DB976B]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.text-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.text-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#868686]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#A6A6A6]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#868686] dark:focus-within:[&_.text-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.text-field-wrapper]:bg-[#282828] text-[#282828] [&_.text-field-wrapper]:text-white",
-      "[&_.text-field-wrapper.text-field-error]:border-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white focus-within:[&_.text-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.text-field-wrapper]:bg-white [&_.text-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.text-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#282828]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#868686]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.text-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.text-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#016974]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#77D5E3]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.text-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.text-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#175BCC]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#002661]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#A9C9FF]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.text-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.text-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#166C3B]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#002F14]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#7FD99A]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.text-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.text-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#976A01]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#322300]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#FDD067]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.text-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.text-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#BB032A]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#520810]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#FFB2AB]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.text-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.text-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#0B84BA]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#03212F]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#6EC9F2]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.text-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.text-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#653C94]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#221431]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#CBA2FA]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.text-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.text-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#7E4B2A]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#2A190E]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#E4B190]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.text-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.text-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#727272]",
-      "[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:border-[#BBBBBB]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.text-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.text-field-wrapper]:ring-[#868686] dark:focus-within:[&_.text-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.text-field-wrapper]:bg-[#282828] text-[#282828] [&_.text-field-wrapper]:border-[#727272] text-white",
-      "[&_.text-field-wrapper>input]:placeholder:text-white focus-within:[&_.text-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.text-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#DDDDDD]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.text-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.text-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#007F8C]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#01B8CA]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.text-field-wrapper]:ring-[#01B8CA]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.text-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#266EF1]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#6DAAFB]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.text-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.text-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#0E8345]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#06C167]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.text-field-wrapper]:ring-[#06C167]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.text-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FDC034]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.text-field-wrapper]:ring-[#FDC034]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.text-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#DE1135]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#FC7F79]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.text-field-wrapper]:ring-[#FC7F79]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.text-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#3EB7ED]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.text-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.text-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#8750C5]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#BA83F9]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.text-field-wrapper]:ring-[#BA83F9]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.text-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#A86438]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#DB976B]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.text-field-wrapper]:ring-[#DB976B]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.text-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#868686]",
-      "dark:[&_.text-field-wrapper:not(:has(.text-field-error))]:bg-[#A6A6A6]",
-      "[&_.text-field-wrapper.text-field-error]:bg-rose-700",
-      "[&_.text-field-wrapper>input]:placeholder:text-white dark:[&_.text-field-wrapper>input]:placeholder:text-black",
-      "[&_.text-field-wrapper>input]:text-white dark:[&_.text-field-wrapper>input]:text-black",
-      "focus-within:[&_.text-field-wrapper]:ring-[#868686] dark:focus-within:[&_.text-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.text-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.text-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.text-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.text-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.text-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.text-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.text-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.text-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/textarea_field.ex b/lib/geo_web/components/textarea_field.ex
deleted file mode 100644
index 62dfaf3..0000000
--- a/lib/geo_web/components/textarea_field.ex
+++ /dev/null
@@ -1,1022 +0,0 @@
-defmodule GeoWeb.Components.TextareaField do
-  @moduledoc """
-  The `GeoWeb.Components.TextareaField` module provides a versatile and customizable textarea field component
-  for Phoenix LiveView applications. It supports a range of styles, themes, and functional attributes
-  to enhance the user experience when working with large text inputs.
-
-  ### Features:
-  - **Color Themes**: Offers a variety of color options to style the textarea field and error states.
-  - **Border and Padding**: Customizable border styles and padding for a consistent look and feel.
-  - **Size Options**: Allows adjustments to the height and size of the textarea field to suit different
-  requirements.
-  - **Floating Labels**: Supports floating labels that adapt to different styles, including inner and
-  outer placements.
-  - **Error Handling**: Displays error messages with optional icons, integrated seamlessly into the
-  field's design.
-  - **Resize Control**: Includes an option to disable textarea resizing.
-  - **Accessibility**: Supports ARIA attributes for accessibility and user-friendly error handling.
-  - **Slots for Customization**: Provides slots for adding content before and after the textarea field,
-  enabling a high degree of customization.
-
-  This component integrates smoothly into Phoenix LiveView forms, providing a user-friendly interface
-  for text input with extensive customization options.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `textarea_field` component provides a customizable text area input with various styling options,
-  including floating labels, error messages, and resizing control.
-
-  ## Examples
-
-  ```elixir
-  <.textarea_field
-    name="name"
-    space="small"
-    color="danger"
-    description="This is description"
-    label="This is outline label"
-    placeholder="This is placeholder"
-    floating="outer"
-    disable_resize
-  />
-
-  <.textarea_field
-    name="name"
-    variant="bordered"
-    space="small"
-    color="success"
-    label="This is bordered Success"
-    placeholder="This is placeholder"
-  />
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :textarea_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :disable_resize, :boolean, default: false, doc: ""
-  attr :rows, :string, default: nil, doc: "Determines count of textarea rows"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include:
-      ~w(disabled form maxlength minlength placeholder readonly required spellcheck inputmode title autofocus wrap dirname),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec textarea_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def textarea_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> textarea_field()
-  end
-
-  def textarea_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      height_size(@size),
-      space_class(@space),
-      @ring && "[&_.textarea-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "textarea-field-wrapper transition-all ease-in-out duration-200 relative w-full z-[2]",
-        @errors != [] && "textarea-field-error",
-        @field_wrapper_class
-      ]}>
-        <textarea
-          type="text"
-          name={@name}
-          id={@id}
-          rows={@rows}
-          value={@value}
-          class={[
-            "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-3 px-2",
-            "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-            @disable_resize && "resize-none",
-            @textarea_class
-          ]}
-          placeholder=" "
-          {@rest}
-        >{Phoenix.HTML.Form.normalize_value("textarea", @value)}</textarea>
-
-        <label
-          class={[
-            "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-            variant_label_position(@floating),
-            @flaoting_label_class
-          ]}
-          for={@id}
-        >
-          {@label}
-        </label>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def textarea_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      height_size(@size),
-      space_class(@space),
-      @ring && "[&_.textarea-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["textarea-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "textarea-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex flex-nowrap",
-        @errors != [] && "textarea-field-error",
-        @field_wrapper_class
-      ]}>
-        <textarea
-          type="text"
-          name={@name}
-          id={@id}
-          rows={@rows}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @disable_resize && "resize-none",
-            @textarea_class
-          ]}
-          {@rest}
-        >{Phoenix.HTML.Form.normalize_value("textarea", @value)}</textarea>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-4 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp height_size("extra_small"), do: "[&_.textarea-field-wrapper_textarea]:h-10"
-
-  defp height_size("small"), do: "[&_.textarea-field-wrapper_textarea]:h-12"
-
-  defp height_size("medium"), do: "[&_.textarea-field-wrapper_textarea]:h-11"
-
-  defp height_size("large"), do: "[&_.textarea-field-wrapper_textarea]:h-16"
-
-  defp height_size("extra_large"), do: "[&_.textarea-field-wrapper_textarea]:h-18"
-
-  defp height_size("auto"), do: "[&_.textarea-field-wrapper_textarea]:h-auto"
-
-  defp height_size(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.textarea-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.textarea-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.textarea-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.textarea-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.textarea-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.textarea-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.textarea-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.textarea-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.textarea-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.textarea-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.textarea-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.textarea-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-white",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#27272a]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.textarea-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#DDDDDD]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#007F8C]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#01B8CA]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#266EF1]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#6DAAFB]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#0E8345]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#06C167]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#CA8D01]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#FDC034]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#CA8D01]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#FC7F79]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#0B84BA]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#3EB7ED]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#8750C5]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#BA83F9]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#A86438]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#DB976B]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#868686]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#A6A6A6]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#868686] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-white dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.textarea-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.textarea-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.textarea-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#DDDDDD]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#007F8C]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#01B8CA]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#266EF1]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#6DAAFB]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#0E8345]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#06C167]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FDC034]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#DE1135]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FC7F79]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#3EB7ED]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#8750C5]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#BA83F9]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#A86438]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#DB976B]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#868686]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#A6A6A6]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#868686] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.textarea-field-wrapper]:bg-[#282828] text-[#282828] [&_.textarea-field-wrapper]:text-white",
-      "[&_.textarea-field-wrapper.textarea-field-error]:border-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white focus-within:[&_.textarea-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.textarea-field-wrapper]:bg-white [&_.textarea-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.textarea-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#282828]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#868686]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#016974]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#77D5E3]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#175BCC]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#002661]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#A9C9FF]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#166C3B]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#002F14]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#7FD99A]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#976A01]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#322300]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#FDD067]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#BB032A]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#520810]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#FFB2AB]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#0B84BA]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#03212F]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#6EC9F2]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#653C94]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#221431]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#CBA2FA]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#7E4B2A]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#2A190E]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#E4B190]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#727272]",
-      "[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:border-[#BBBBBB]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#868686] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.textarea-field-wrapper]:bg-[#282828] text-[#282828] [&_.textarea-field-wrapper]:border-[#727272] text-white",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white focus-within:[&_.textarea-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.textarea-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#DDDDDD]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#007F8C]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#01B8CA]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#01B8CA]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#266EF1]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#6DAAFB]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#0E8345]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#06C167]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#06C167]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FDC034]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FDC034]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#DE1135]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#FC7F79]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#FC7F79]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#3EB7ED]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#8750C5]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#BA83F9]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#BA83F9]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#A86438]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#DB976B]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#DB976B]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#868686]",
-      "dark:[&_.textarea-field-wrapper:not(:has(.textarea-field-error))]:bg-[#A6A6A6]",
-      "[&_.textarea-field-wrapper.textarea-field-error]:bg-rose-700",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-white dark:[&_.textarea-field-wrapper>input]:placeholder:text-black",
-      "[&_.textarea-field-wrapper>input]:text-white dark:[&_.textarea-field-wrapper>input]:text-black",
-      "focus-within:[&_.textarea-field-wrapper]:ring-[#868686] dark:focus-within:[&_.textarea-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.textarea-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.textarea-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.textarea-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.textarea-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.textarea-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.textarea-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.textarea-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.textarea-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/timeline.ex b/lib/geo_web/components/timeline.ex
deleted file mode 100644
index e7abdfc..0000000
--- a/lib/geo_web/components/timeline.ex
+++ /dev/null
@@ -1,571 +0,0 @@
-defmodule GeoWeb.Components.Timeline do
-  @moduledoc """
-  The `GeoWeb.Components.Timeline` module is a versatile and customizable component
-  designed for displaying timeline-style content in Phoenix LiveView applications.
-
-  It allows users to present chronological or sequential events in both horizontal and vertical formats.
-
-  ### Features:
-  - **Layout Options**: Supports both horizontal and vertical timeline orientations,
-  providing flexibility in content presentation.
-  - **Customizable Appearance**: Offers various attributes to modify the appearance of
-  timeline sections, such as colors, line widths, and bullet sizes.
-  - **Thematic Colors**: Includes multiple color themes like primary, secondary, success,
-  warning, and more to match the design aesthetic.
-  - **Bullet and Icon Support**: Provides options to include icons or images in place of the
-  standard timeline bullets for enhanced visual representation.
-  - **Slot-based Content**: Supports slot-based content insertion, allowing developers to include
-  custom HTML or components within the timeline sections.
-  - **Responsive Design**: Adapts to different screen sizes and orientations, ensuring a consistent
-  user experience across devices.
-  - **Flexible Styling**: Attributes like `gapped_sections` and `hide_last_line` offer additional
-  control over the layout and visibility of timeline elements.
-
-  This component integrates seamlessly into Phoenix LiveView applications, providing a rich
-  and interactive way to visualize timelines, events, or progressions.
-  """
-
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `timeline` component provides a structured layout to display a sequence of events or actions,
-  either horizontally or vertically.
-
-  It can include various content, such as images and text, and supports customization options
-  like color themes and spacing.
-
-  ## Examples
-
-  ```elixir
-  <.timeline>
-    <.timeline_section
-      size="double_large"
-      image="https://example.com/profile.jpg"
-    >
-      <.card padding="large" rounded="large">
-        <div class="items-center justify-between">
-          <time class="mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0">
-            just now
-          </time>
-          <div class="text-sm font-normal text-gray-500">
-            Bonnie moved
-            <a href="#" class="font-semibold text-blue-600 dark:text-blue-500 hover:underline">
-              Jese Leos
-            </a>
-            to
-            <span class={[
-              "bg-gray-100 text-gray-800 text-xs font-normal me-2 px-2.5 py-0.5 rounded",
-              "dark:bg-gray-600 dark:text-gray-300"
-            ]}>
-              Funny Group
-            </span>
-          </div>
-        </div>
-      </.card>
-    </.timeline_section>
-    <.timeline_section
-      size="double_large"
-      image="https://example.com/profile.jpg"
-    >
-      <.card padding="large" rounded="large">
-        <div class="items-center justify-between mb-3 sm:flex">
-          <time class="mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0">
-            2 hours ago
-          </time>
-          <div class="text-sm font-normal text-gray-500">
-            Thomas Lean commented on
-            <a href="#" class="font-semibold text-gray-900 hover:underline">Flowbite Pro</a>
-          </div>
-        </div>
-        <div class="p-3 text-xs italic font-normal text-gray-500 border border-gray-200 rounded-lg bg-gray-50">
-          Hi ya'll! I wanted to share a webinar zeroheight is having regarding how to
-          best measure your design system! This is the second session of our new webinar
-          series on #DesignSystems discussions where we'll be speaking about Measurement.
-        </div>
-      </.card>
-    </.timeline_section>
-  </.timeline>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "base", doc: "Determines color theme"
-  attr :hide_last_line, :boolean, default: false, doc: ""
-  attr :gapped_sections, :boolean, default: false, doc: ""
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :horizontal, :boolean, default: false, doc: "Determines whether element is horizontal"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def timeline(%{horizontal: true} = assigns) do
-    ~H"""
-    <div
-      role="list"
-      class={[
-        "timeline-horizontal items-center sm:flex px-5 lg:px-0",
-        color_class(@color),
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  def timeline(assigns) do
-    ~H"""
-    <div
-      role="list"
-      class={[
-        color_class(@color),
-        @gapped_sections && "[&_.timeline-bullet-wrapper]:items-center",
-        @hide_last_line && "[&_.timeline-section:last-child_.timeline-vertical-line]:after:hidden",
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc """
-  The `timeline_section` component is used to define individual sections within a `Timeline`.
-
-  It supports both vertical and horizontal layouts, and can include a title, time, description,
-  and additional content. It also allows for custom icons or images to be displayed alongside
-  each timeline section.
-
-  ## Examples
-
-  ```elixir
-  <.timeline_section
-    size="double_large"
-    image="https://example.com/profile.jpg"
-  >
-    <.card padding="large" rounded="large">
-      <div class="items-center justify-between mb-3 sm:flex">
-        <time class="mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0">
-          2 hours ago
-        </time>
-        <div class="text-sm font-normal text-gray-500">
-          Thomas Lean commented on
-          <a href="#" class="font-semibold text-gray-900 hover:underline">Flowbite Pro</a>
-        </div>
-      </div>
-      <div class="p-3 text-xs italic font-normal text-gray-500 border border-gray-200 rounded-lg bg-gray-50">
-        Hi ya'll! I wanted to share a webinar zeroheight is having regarding how to
-        best measure your design system! This is the second session of our new webinar
-        series on #DesignSystems discussions where we'll be speaking about Measurement.
-      </div>
-    </.card>
-  </.timeline_section>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :line_size, :string, default: "extra_small", doc: "Determines line width of timeline"
-
-  attr :line_style, :string,
-    values: ["dashed", "solid", "dotted"],
-    default: "solid",
-    doc: "Determines line border styles"
-
-  attr :size, :string,
-    default: "extra_small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :bullet_icon, :string, default: nil, doc: "Determines bullet icon"
-  attr :image, :string, default: nil, doc: "Image displayed alongside of an item"
-  attr :title, :string, default: nil, doc: "Specifies the title of the element"
-  attr :time, :string, default: nil, doc: "Specifies the time"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :horizontal, :boolean, default: false, doc: "Determines whether element is horizontal"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :icon_class, :string, default: nil, doc: "Custom CSS class for additional styling icon"
-  attr :line_class, :string, default: nil, doc: "Custom CSS class for additional styling lines"
-
-  attr :bullte_wrapper_class,
-       :string,
-       default: nil,
-       doc: "Custom CSS class for additional styling icon"
-
-  attr :bullet_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling bullets"
-
-  attr :bullet_wrapper_Class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling bullet wrapper"
-
-  attr :image_class, :string, default: nil, doc: "Custom CSS class for additional styling icon"
-
-  attr :content_class, :string,
-    default: nil,
-    doc: "Custom CSS class for additional styling content"
-
-  attr :title_class, :string, default: nil, doc: "Custom CSS class for additional styling title"
-  attr :time_class, :string, default: nil, doc: "Custom CSS class for additional styling time"
-
-  attr :description_class, :string,
-    default: "text-sm",
-    doc: "Custom CSS class for additional styling description"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def timeline_section(%{horizontal: true} = assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="listitem"
-      class={[
-        "timeline-section relative mb-6 sm:mb-0",
-        @class
-      ]}
-      {@rest}
-    >
-      <div :if={!@image} class={["flex items-center", @bullet_wrapper_Class]}>
-        <div class={[
-          "timeline-bullet z-10 flex items-center justify-center rounded-full shrink-0",
-          bullet_size(@size),
-          @bullet_class
-        ]}>
-          <.icon
-            :if={@bullet_icon}
-            name={@bullet_icon}
-            class={["bullet-icon", @icon_class]}
-            aria-hidden="true"
-          />
-        </div>
-        <div class={[
-          "timeline-horizontal-line hidden sm:flex w-full",
-          line_size(@line_size, @horizontal),
-          line_style(@line_style, @horizontal),
-          @line_class
-        ]}>
-        </div>
-      </div>
-
-      <div :if={@image} class={["flex items-center", @bullet_wrapper_Class]}>
-        <div class={[
-          "timeline-image-wrapper z-10 shrink-0",
-          bullet_size(@size),
-          @bullet_class
-        ]}>
-          <img class={["rounded-full shadow-md", @image_class]} src={@image} alt={@image} />
-        </div>
-        <div class={[
-          "timeline-horizontal-line hidden sm:flex w-full",
-          line_size(@line_size, @horizontal),
-          line_style(@line_style, @horizontal),
-          @line_class
-        ]}>
-        </div>
-      </div>
-
-      <div class={["mt-3 sm:pe-5", @content_class]}>
-        <h3 :if={@title} class={["text-lg font-semibold mb-2", @title_class]}>{@title}</h3>
-        <time :if={@time} class={["block mb-3 text-xs font-normal leading-none", @time_class]}>
-          {@time}
-        </time>
-        <p :if={@description} class={@description_class}>{@description}</p>
-
-        {render_slot(@inner_block)}
-      </div>
-    </div>
-    """
-  end
-
-  def timeline_section(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="listitem"
-      class={[
-        "timeline-section flex gap-x-3 [&_.timeline-vertical-line]:after:top-3",
-        @class
-      ]}
-      {@rest}
-    >
-      <div
-        :if={!@image}
-        class={[
-          "timeline-vertical-line relative after:absolute",
-          "after:bottom-0 after:start-3.5 after:-translate-x-[0.5px]",
-          line_size(@line_size, @horizontal),
-          line_style(@line_style, @horizontal),
-          @line_class
-        ]}
-      >
-        <div class={[
-          "timeline-bullet-wrapper relative z-10 size-7 flex justify-center",
-          @bullte_wrapper_class
-        ]}>
-          <div class={[
-            "timeline-bullet rounded-full flex justify-center items-center",
-            bullet_size(@size),
-            @bullet_class
-          ]}>
-            <.icon
-              :if={@bullet_icon}
-              name={@bullet_icon}
-              class={["bullet-icon", @icon_class]}
-              aria-hidden="true"
-            />
-          </div>
-        </div>
-      </div>
-
-      <div
-        :if={@image}
-        class={[
-          "timeline-vertical-line relative after:absolute",
-          "after:bottom-0 after:start-1/2 after:-translate-x-[0.5px] shrink-0",
-          line_size(@line_size, @horizontal),
-          line_style(@line_style, @horizontal),
-          @line_class
-        ]}
-      >
-        <div class={["relative z-10", @bullte_wrapper_class]}>
-          <div class={[
-            "timeline-image-wrapper",
-            bullet_size(@size),
-            @bullet_class
-          ]}>
-            <img class={["rounded-full shadow-md", @image_class]} src={@image} alt={@image} />
-          </div>
-        </div>
-      </div>
-
-      <div class={["grow pt-0.5 pb-5", @content_class]}>
-        <h3 :if={@title} class={["text-lg font-semibold mb-2", @title_class]}>{@title}</h3>
-        <time :if={@time} class={["block mb-3 text-[12px] font-normal leading-none", @time_class]}>
-          {@time}
-        </time>
-        <p :if={@description} class={@description_class}>{@description}</p>
-
-        {render_slot(@inner_block)}
-      </div>
-    </div>
-    """
-  end
-
-  defp line_style("solid", horizontal?),
-    do: (horizontal? && "border-solid") || "after:border-solid"
-
-  defp line_style("dashed", horizontal?),
-    do: (horizontal? && "border-dashed") || "after:border-dashed"
-
-  defp line_style("dotted", horizontal?),
-    do: (horizontal? && "border-dotted") || "after:border-dotted"
-
-  defp line_style(params, _) when is_binary(params), do: params
-
-  defp line_size("extra_small", horizontal?),
-    do: (horizontal? && "border-t-[0.031rem]") || "after:border-s-[0.031rem]"
-
-  defp line_size("small", horizontal?),
-    do: (horizontal? && "border-t-[0.063rem]") || "after:border-s-[0.063rem]"
-
-  defp line_size("medium", horizontal?),
-    do: (horizontal? && "border-t-[0.094rem]") || "after:border-s-[0.094rem]"
-
-  defp line_size("large", horizontal?),
-    do: (horizontal? && "border-t-[0.156rem]") || "after:border-s-[0.156rem]"
-
-  defp line_size("extra_large", horizontal?),
-    do: (horizontal? && "border-t-[0.188rem]") || "after:border-s-[0.188rem]"
-
-  defp line_size(params, _) when is_binary(params), do: params
-
-  defp bullet_size("extra_small") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-2 [&_.bullet-icon]:size-1.5",
-      "[&.timeline-image-wrapper>img]:size-6"
-    ]
-  end
-
-  defp bullet_size("small") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-3 [&_.bullet-icon]:size-2",
-      "[&.timeline-image-wrapper>img]:size-7"
-    ]
-  end
-
-  defp bullet_size("medium") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-4 [&_.bullet-icon]:size-2",
-      "[&.timeline-image-wrapper>img]:size-8"
-    ]
-  end
-
-  defp bullet_size("large") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-[18px] [&_.bullet-icon]:size-2",
-      "[&.timeline-image-wrapper>img]:size-9"
-    ]
-  end
-
-  defp bullet_size("extra_large") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-5 [&_.bullet-icon]:size-3",
-      "[&.timeline-image-wrapper>img]:size-10"
-    ]
-  end
-
-  defp bullet_size("double_large") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-[22px] [&_.bullet-icon]:size-4",
-      "[&.timeline-image-wrapper>img]:size-12"
-    ]
-  end
-
-  defp bullet_size("triple_large") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-[25px] [&_.bullet-icon]:size-4",
-      "[&.timeline-image-wrapper>img]:size-14"
-    ]
-  end
-
-  defp bullet_size("quadruple_large") do
-    [
-      "[&:not(.timeline-image-wrapper)]:size-7 [&_.bullet-icon]:size-5",
-      "[&.timeline-image-wrapper>img]:size-16"
-    ]
-  end
-
-  defp bullet_size(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "[&_.timeline-bullet]:bg-[#e4e4e7] [&_.timeline-bullet]:text-[#e4e4e7] [&_.timeline-vertical-line]:after:border-[#e4e4e7]",
-      "[&_.timeline-horizontal-line]:border-[#e4e4e7]",
-      "dark:[&_.timeline-bullet]:bg-[#27272a] dark:[&_.timeline-bullet]:text-[#FAFAFA] dark:[&_.timeline-vertical-line]:after:border-[#27272a]",
-      "dark:[&_.timeline-horizontal-line]:border-[#27272a]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "[&_.timeline-bullet]:bg-white [&_.timeline-bullet]:text-[#DADADA] [&_.timeline-vertical-line]:after:border-white",
-      "[&_.timeline-horizontal-line]:border-white"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "[&_.timeline-bullet]:bg-[#4B4B4B] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#4B4B4B]",
-      "[&_.timeline-horizontal-line]:border-[#4B4B4B]",
-      "dark:[&_.timeline-bullet]:bg-[#DDDDDD] dark:[&_.timeline-bullet]:text-black dark:[&_.timeline-vertical-line]:after:border-[#DDDDDD]",
-      "dark:[&_.timeline-horizontal-line]:border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "[&_.timeline-bullet]:bg-[#007F8C] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#007F8C]",
-      "[&_.timeline-horizontal-line]:border-[#007F8C]",
-      "dark:[&_.timeline-bullet]:bg-[#01B8CA] dark:[&_.timeline-bullet]:text-black dark:[&_.timeline-vertical-line]:after:border-[#01B8CA]",
-      "dark:[&_.timeline-horizontal-line]:border-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "[&_.timeline-bullet]:bg-[#266EF1] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#266EF1]",
-      "[&_.timeline-horizontal-line]:border-[#266EF1]",
-      "dark:[&_.timeline-bullet]:bg-[#6DAAFB] dark:[&_.timeline-bullet]:text-black dark:[&_.timeline-vertical-line]:after:border-[#6DAAFB]",
-      "dark:[&_.timeline-horizontal-line]:border-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "[&_.timeline-bullet]:bg-[#0E8345] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#0E8345]",
-      "[&_.timeline-horizontal-line]:border-[#0E8345]",
-      "[&_.timeline-bullet]:bg-[#06C167] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#06C167]",
-      "[&_.timeline-horizontal-line]:border-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "[&_.timeline-bullet]:bg-[#CA8D01] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#CA8D01]",
-      "[&_.timeline-horizontal-line]:border-[#CA8D01]",
-      "[&_.timeline-bullet]:bg-[#FDC034] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#FDC034]",
-      "[&_.timeline-horizontal-line]:border-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "[&_.timeline-bullet]:bg-[#DE1135] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#DE1135]",
-      "[&_.timeline-horizontal-line]:border-[#DE1135]",
-      "[&_.timeline-bullet]:bg-[#FC7F79] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#FC7F79]",
-      "[&_.timeline-horizontal-line]:border-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "[&_.timeline-bullet]:bg-[#0B84BA] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#0B84BA]",
-      "[&_.timeline-horizontal-line]:border-[#0B84BA]",
-      "[&_.timeline-bullet]:bg-[#3EB7ED] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#3EB7ED]",
-      "[&_.timeline-horizontal-line]:border-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "[&_.timeline-bullet]:bg-[#8750C5] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#8750C5]",
-      "[&_.timeline-horizontal-line]:border-[#8750C5]",
-      "[&_.timeline-bullet]:bg-[#BA83F9] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#BA83F9]",
-      "[&_.timeline-horizontal-line]:border-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "[&_.timeline-bullet]:bg-[#A86438] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#A86438]",
-      "[&_.timeline-horizontal-line]:border-[#A86438]",
-      "[&_.timeline-bullet]:bg-[#DB976B] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#DB976B]",
-      "[&_.timeline-horizontal-line]:border-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "[&_.timeline-bullet]:bg-[#868686] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#868686]",
-      "[&_.timeline-horizontal-line]:border-[#868686]",
-      "[&_.timeline-bullet]:bg-[#A6A6A6] [&_.timeline-bullet]:text-black [&_.timeline-vertical-line]:after:border-[#A6A6A6]",
-      "[&_.timeline-horizontal-line]:border-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "[&_.timeline-bullet]:bg-[#282828] [&_.timeline-bullet]:text-white [&_.timeline-vertical-line]:after:border-[#282828]",
-      "[&_.timeline-horizontal-line]:border-[#282828]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/toast.ex b/lib/geo_web/components/toast.ex
deleted file mode 100644
index 59a5e47..0000000
--- a/lib/geo_web/components/toast.ex
+++ /dev/null
@@ -1,908 +0,0 @@
-defmodule GeoWeb.Components.Toast do
-  @moduledoc """
-  A module for creating toast notifications in a Phoenix application.
-
-  This module provides components for rendering toast messages, including
-  options for customization such as size, color, and dismiss behavior. It
-  supports a variety of visual styles and positions, allowing for
-  flexible integration into any user interface.
-
-  Toasts can be used to provide feedback to users or display
-  informational messages without interrupting their workflow. The
-  components defined in this module handle the presentation and
-  interaction logic, enabling developers to easily implement toast
-  notifications within their applications.
-
-  > You can create a toast notification with various styles and
-  > configurations to suit your application's needs.
-  """
-  use Phoenix.Component
-  alias Phoenix.LiveView.JS
-  use Gettext, backend: GeoWeb.Gettext
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `toast` component displays temporary notifications or messages, usually at the top
-  or bottom of the screen.
-
-  It supports customization for size, color, border, and positioning, allowing you to
-  style the toast as needed.
-
-  ## Examples
-
-  ```elixir
-  <.toast id="toast-1">
-    <div>Lorem ipsum dolor sit amet consectetur adipisicing elit.</div>
-  </.toast>
-
-  <.toast
-    id="toast-2"
-    color="success"
-    content_border="small"
-    border_position="end"
-    horizontal="center"
-    vertical_space="large"
-  >
-    <div>Lorem ipsum dolor sit amet consectetur adipisicing elit.</div>
-  </.toast>
-
-  <.toast
-    id="toast-3"
-    color="misc"
-    horizontal="left"
-    content_border="extra_small"
-    border_position="start"
-    rounded="medium"
-    width="extra_large"
-  >
-    <div>Lorem ipsum dolor sit amet consectetur adipisicing elit.</div>
-  </.toast>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :fixed, :boolean, default: true, doc: "Determines whether the element is fixed"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "medium", doc: "Determines the border radius"
-  attr :width, :string, default: "medium", doc: "Determines the element width"
-  attr :space, :string, default: "extra_small", doc: "Space between items"
-  attr :vertical, :string, values: ["top", "bottom"], default: "top", doc: "Type of vertical"
-  attr :vertical_space, :string, default: "extra_small", doc: "Space between vertical items"
-  attr :z_index, :string, default: "z-50", doc: "custom z-index"
-
-  attr :horizontal, :string,
-    values: ["left", "right", "center"],
-    default: "right",
-    doc: "Type of horizontal"
-
-  attr :horizontal_space, :string, default: "extra_small", doc: "Space between horizontal items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :class, :string, default: "", doc: "Additional CSS classes to be added to the toast."
-
-  attr :wrapper_class, :string,
-    default: "",
-    doc: "Additional CSS classes to be added to the toast contents."
-
-  attr :content_wrapper_class, :string,
-    default: "",
-    doc: "Additional CSS classes to be added to the toast contents."
-
-  attr :content_class, :string,
-    default: "",
-    doc: "Additional CSS classes to be added to the toast contents."
-
-  attr :dismiss_class, :string,
-    default: "",
-    doc: "Additional CSS classes to be added to the toast contents."
-
-  attr :dismiss_icon_class, :string,
-    default: "",
-    doc: "Additional CSS classes to be added to the toast contents."
-
-  attr :params, :map,
-    default: %{kind: "toast"},
-    doc: "A map of additional parameters used for element configuration"
-
-  attr :rest, :global,
-    include: ~w(right_dismiss left_dismiss),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  attr :content_border, :string, default: "none", doc: "Determines the content border style"
-  attr :border_position, :string, default: "start", doc: "Determines the border position style"
-  attr :row_direction, :string, default: "none", doc: "Determines row direction"
-  attr :padding, :string, default: "extra_small", doc: "Determines padding for items"
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def toast(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      aria-atomic="true"
-      tabindex="0"
-      class={[
-        "overflow-hidden leading-5",
-        @fixed && "fixed",
-        width_class(@width),
-        rounded_size(@rounded),
-        border_class(@border, @variant),
-        color_variant(@variant, @color),
-        position_class(@horizontal_space, @horizontal),
-        vertical_position(@vertical_space, @vertical),
-        @font_weight,
-        @z_index,
-        @class
-      ]}
-      {@rest}
-    >
-      <div class={[
-        "toast-content-wrapper relative",
-        "before:block before:absolute before:inset-y-0 before:rounded-full before:my-1",
-        content_border(@content_border),
-        @content_border != "none" && boder_position(@border_position),
-        @wrapper_class
-      ]}>
-        <div class={[
-          "flex gap-2 items-center justify-between",
-          row_direction(@row_direction),
-          padding_size(@padding),
-          @content_wrapper_class
-        ]}>
-          <div class={[space_class(@space), @content_class]}>
-            {render_slot(@inner_block)}
-          </div>
-          <.toast_dismiss
-            id={@id}
-            params={@params}
-            class={@dismiss_class}
-            icon_class={@dismiss_icon_class}
-          />
-        </div>
-      </div>
-    </div>
-    """
-  end
-
-  @doc """
-  The `toast_group` component is used to group multiple `toast` elements together,
-  allowing for coordinated display and positioning of toast notifications.
-
-  ## Examples
-
-  ```elixir
-  <.toast_group vertical_space="large" horizontal_space="extra_large">
-    <.toast
-      id="toast-1"
-      color="success"
-      content_border="small"
-      border_position="end"
-      fixed={false}
-    >
-      <div>
-        Lorem ipsum dolor sit amet consectetur adipisicing elit.
-      </div>
-    </.toast>
-
-    <.toast
-      id="toast-2"
-      variant="outline"
-      color="danger"
-      content_border="small"
-      border_position="start"
-      fixed={false}
-    >
-      <div>
-        Lorem ipsum dolor sit amet consectetur adipisicing elit.
-      </div>
-    </.toast>
-
-    <.toast
-      id="toast-3"
-      variant="unbordered"
-      color="warning"
-      content_border="small"
-      border_position="start"
-      fixed={false}
-    >
-      <div>
-        Lorem ipsum dolor sit amet consectetur adipisicing elit.
-      </div>
-    </.toast>
-  </.toast_group>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :space, :string, default: "small", doc: "Space between items"
-  attr :vertical, :string, values: ["top", "bottom"], default: "bottom", doc: "Type of vertical"
-  attr :vertical_space, :string, default: "extra_small", doc: "Space between vertical items"
-  attr :z_index, :string, default: "z-50", doc: "custom z-index"
-
-  attr :horizontal, :string,
-    values: ["left", "right", "center"],
-    default: "right",
-    doc: "Type of horizontal"
-
-  attr :horizontal_space, :string, default: "extra_small", doc: "Space between horizontal items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def toast_group(assigns) do
-    ~H"""
-    <div
-      id={@id}
-      role="region"
-      class={[
-        "fixed",
-        space_class(@space),
-        position_class(@horizontal_space, @horizontal),
-        vertical_position(@vertical_space, @vertical),
-        @z_index,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </div>
-    """
-  end
-
-  @doc type: :component
-  attr :id, :string,
-    required: true,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :dismiss, :boolean,
-    default: false,
-    doc: "Determines if the toast should include a dismiss button"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :icon_class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :size, :string,
-    default: "small",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :params, :map,
-    default: %{kind: "toast"},
-    doc: "A map of additional parameters used for element configuration"
-
-  defp toast_dismiss(assigns) do
-    ~H"""
-    <button
-      type="button"
-      class={["shrink-0 leading-5", @class]}
-      aria-label={gettext("close")}
-      phx-click={JS.push("dismiss", value: Map.merge(%{id: @id}, @params)) |> hide_toast("##{@id}")}
-    >
-      <.icon
-        name="hero-x-mark-solid"
-        class={[
-          "toast-icon opacity-80 group-hover:opacity-70",
-          dismiss_size(@size),
-          @icon_class
-        ]}
-      />
-    </button>
-    """
-  end
-
-  defp boder_position("end"), do: "pe-1.5 before:end-1"
-  defp boder_position("start"), do: "ps-1.5 before:start-1"
-  defp boder_position(params) when is_binary(params), do: params
-
-  defp content_border("extra_small"), do: "before:w-px"
-  defp content_border("small"), do: "before:w-0.5"
-  defp content_border("medium"), do: "before:w-[3px]"
-  defp content_border("large"), do: "before:w-1"
-  defp content_border("extra_large"), do: "before:w-[5px]"
-  defp content_border("none"), do: "before:content-none"
-  defp content_border(params) when is_binary(params), do: params
-
-  defp row_direction("none"), do: "flex-row"
-  defp row_direction("reverse"), do: "flex-row-reverse"
-  defp row_direction(_), do: row_direction("none")
-
-  defp padding_size("extra_small"), do: "p-2"
-
-  defp padding_size("small"), do: "p-3"
-
-  defp padding_size("medium"), do: "p-4"
-
-  defp padding_size("large"), do: "p-5"
-
-  defp padding_size("extra_large"), do: "p-6"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp width_class("extra_small"), do: "max-w-60"
-  defp width_class("small"), do: "max-w-64"
-  defp width_class("medium"), do: "max-w-72"
-  defp width_class("large"), do: "max-w-80"
-  defp width_class("extra_large"), do: "max-w-96"
-  defp width_class("full"), do: "w-[calc(100%-10px)]"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp dismiss_size("extra_small"), do: "size-3.5"
-  defp dismiss_size("small"), do: "size-4"
-  defp dismiss_size("medium"), do: "size-5"
-  defp dismiss_size("large"), do: "size-6"
-  defp dismiss_size("extra_large"), do: "size-7"
-  defp dismiss_size(params) when is_binary(params), do: params
-
-  defp vertical_position("extra_small", "top"), do: "top-1"
-  defp vertical_position("small", "top"), do: "top-2"
-  defp vertical_position("medium", "top"), do: "top-3"
-  defp vertical_position("large", "top"), do: "top-4"
-  defp vertical_position("extra_large", "top"), do: "top-5"
-
-  defp vertical_position("extra_small", "bottom"), do: "bottom-1"
-  defp vertical_position("small", "bottom"), do: "bottom-2"
-  defp vertical_position("medium", "bottom"), do: "bottom-3"
-  defp vertical_position("large", "bottom"), do: "bottom-4"
-  defp vertical_position("extra_large", "bottom"), do: "bottom-5"
-
-  defp vertical_position(params, _) when is_binary(params), do: params
-
-  defp position_class("extra_small", "left"), do: "left-1 ml-1"
-  defp position_class("small", "left"), do: "left-2 ml-2"
-  defp position_class("medium", "left"), do: "left-3 ml-3"
-  defp position_class("large", "left"), do: "left-4 ml-4"
-  defp position_class("extra_large", "left"), do: "left-5 ml-5"
-
-  defp position_class("extra_small", "right"), do: "right-1 mr-1"
-  defp position_class("small", "right"), do: "right-2 mr-2"
-  defp position_class("medium", "right"), do: "right-3 mr-3"
-  defp position_class("large", "right"), do: "right-4 mr-4"
-  defp position_class("extra_large", "right"), do: "right-5 mr-5"
-
-  defp position_class(_, "center"), do: "left-1/2 -translate-x-1/2"
-
-  defp position_class(params, _) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size("none"), do: "rounded-none"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "gradient"],
-    do: nil
-
-  defp border_class("extra_small", _), do: "border"
-  defp border_class("small", _), do: "border-2"
-  defp border_class("medium", _), do: "border-[3px]"
-  defp border_class("large", _), do: "border-4"
-  defp border_class("extra_large", _), do: "border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] dark:bg-[#18181B] dark:text-[#FAFAFA]",
-      "[&>.toast-content-wrapper]:before:bg-[#09090b] dark:[&>.toast-content-wrapper]:before:bg-[#FAFAFA]",
-      "border-[#e4e4e7] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black [&>.toast-content-wrapper]:before:bg-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white [&>.toast-content-wrapper]:before:bg-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("outline", "natural") do
-    [
-      "text-[#4B4B4B] border-[#4B4B4B]",
-      "dark:text-[#DDDDDD] dark:border-[#DDDDDD]",
-      "[&>.toast-content-wrapper]:before:bg-[#4B4B4B] dark:[&>.toast-content-wrapper]:before:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("outline", "primary") do
-    [
-      "text-[#007F8C] border-[#007F8C]",
-      "dark:text-[#01B8CA] dark:border-[#01B8CA]",
-      "[&>.toast-content-wrapper]:before:bg-[#007F8C] dark:[&>.toast-content-wrapper]:before:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary") do
-    [
-      "text-[#266EF1] border-[#266EF1]",
-      "dark:text-[#6DAAFB] dark:border-[#6DAAFB]",
-      "[&>.toast-content-wrapper]:before:bg-[#266EF1] dark:[&>.toast-content-wrapper]:before:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("outline", "success") do
-    [
-      "text-[#0E8345] border-[#0E8345]",
-      "dark:text-[#06C167] dark:border-[#06C167]",
-      "[&>.toast-content-wrapper]:before:bg-[#0E8345] dark:[&>.toast-content-wrapper]:before:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("outline", "warning") do
-    [
-      "text-[#CA8D01] border-[#CA8D01]",
-      "dark:text-[#FDC034] dark:border-[#FDC034]",
-      "[&>.toast-content-wrapper]:before:bg-[#CA8D01] dark:[&>.toast-content-wrapper]:before:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("outline", "danger") do
-    [
-      "text-[#DE1135] border-[#DE1135]",
-      "dark:text-[#FC7F79] dark:border-[#FC7F79]",
-      "[&>.toast-content-wrapper]:before:bg-[#DE1135] dark:[&>.toast-content-wrapper]:before:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("outline", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA]",
-      "dark:text-[#3EB7ED] dark:border-[#3EB7ED]",
-      "[&>.toast-content-wrapper]:before:bg-[#0B84BA] dark:[&>.toast-content-wrapper]:before:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("outline", "misc") do
-    [
-      "text-[#8750C5] border-[#8750C5]",
-      "dark:text-[#BA83F9] dark:border-[#BA83F9]",
-      "[&>.toast-content-wrapper]:before:bg-[#8750C5] dark:[&>.toast-content-wrapper]:before:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn") do
-    [
-      "text-[#A86438] border-[#A86438]",
-      "dark:text-[#DB976B] dark:border-[#DB976B]",
-      "[&>.toast-content-wrapper]:before:bg-[#A86438] dark:[&>.toast-content-wrapper]:before:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("outline", "silver") do
-    [
-      "text-[#868686] border-[#868686]",
-      "dark:text-[#A6A6A6] dark:border-[#A6A6A6]",
-      "[&>.toast-content-wrapper]:before:bg-[#868686] dark:[&>.toast-content-wrapper]:before:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]",
-      "[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]",
-      "[&>.toast-content-wrapper]:before:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]",
-      "[&>.toast-content-wrapper]:before:bg-[#282828] dark:[&>.toast-content-wrapper]:before:bg-[#E8E8E8]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]",
-      "[&>.toast-content-wrapper]:before:bg-[#016974] dark:[&>.toast-content-wrapper]:before:bg-[#77D5E3]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]",
-      "[&>.toast-content-wrapper]:before:bg-[#175BCC] dark:[&>.toast-content-wrapper]:before:bg-[#A9C9FF]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]",
-      "[&>.toast-content-wrapper]:before:bg-[#166C3B] dark:[&>.toast-content-wrapper]:before:bg-[#7FD99A]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]",
-      "[&>.toast-content-wrapper]:before:bg-[#976A01] dark:[&>.toast-content-wrapper]:before:bg-[#FDD067]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]",
-      "[&>.toast-content-wrapper]:before:bg-[#BB032A] dark:[&>.toast-content-wrapper]:before:bg-[#FFB2AB]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]",
-      "[&>.toast-content-wrapper]:before:bg-[#0B84BA] dark:[&>.toast-content-wrapper]:before:bg-[#6EC9F2]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]",
-      "[&>.toast-content-wrapper]:before:bg-[#653C94] dark:[&>.toast-content-wrapper]:before:bg-[#CBA2FA]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]",
-      "[&>.toast-content-wrapper]:before:bg-[#7E4B2A] dark:[&>.toast-content-wrapper]:before:bg-[#E4B190]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]",
-      "[&>.toast-content-wrapper]:before:bg-[#727272] dark:[&>.toast-content-wrapper]:before:bg-[#BBBBBB]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black",
-      "[&>.toast-content-wrapper]:before:bg-white dark:[&>.toast-content-wrapper]:before:bg-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-
-  ## JS Commands
-
-  @doc """
-  Displays a toast notification.
-
-  This function shows a toast notification by applying a specified transition effect to the
-  element identified by the provided `selector`. It utilizes the `JS.show/2` function to handle
-  the showing animation with a duration of 300 milliseconds.
-
-  ## Parameters
-
-  - `js` (optional): A `JS` struct that can be used to chain further JavaScript actions.
-  - `selector`: A string representing the CSS selector for the toast element to be displayed.
-
-  ## Example
-
-  ```elixir
-  show_toast(js, "#my-toast")
-  ```
-
-  This documentation provides a clear explanation of what the function does,
-  its parameters, and an example usage.
-  """
-  def show_toast(js \\ %JS{}, selector) do
-    JS.show(js,
-      to: selector,
-      time: 300,
-      transition:
-        {"transition-all transform ease-out duration-300",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95",
-         "opacity-100 translate-y-0 sm:scale-100"}
-    )
-  end
-
-  @doc """
-  Hides a toast notification.
-
-  This function hides a toast notification by applying a specified transition effect to the
-  element identified by the provided `selector`. It utilizes the `JS.hide/2` function to handle
-  the hiding animation with a duration of 200 milliseconds.
-
-  ## Parameters
-
-  - `js` (optional): A `JS` struct that can be used to chain further JavaScript actions.
-  - `selector`: A string representing the CSS selector for the toast element to be hidden.
-
-  ## Example
-
-  ```elixir
-  hide_toast(js, "#my-toast")
-  ```
-
-  This documentation clearly outlines the purpose of the function, its parameters,
-  and an example of how to use it.
-  """
-  def hide_toast(js \\ %JS{}, selector) do
-    JS.hide(js,
-      to: selector,
-      time: 200,
-      transition:
-        {"transition-all transform ease-in duration-200",
-         "opacity-100 translate-y-0 sm:scale-100",
-         "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"}
-    )
-  end
-end
diff --git a/lib/geo_web/components/toggle_field.ex b/lib/geo_web/components/toggle_field.ex
deleted file mode 100644
index 8fca03e..0000000
--- a/lib/geo_web/components/toggle_field.ex
+++ /dev/null
@@ -1,332 +0,0 @@
-defmodule GeoWeb.Components.ToggleField do
-  @moduledoc """
-  GeoWeb.Components.ToggleField component renders a toggle field with customizable options.
-
-  This module provides functionality for creating a toggle switch UI element
-  that can be integrated into forms. It supports various attributes to tailor
-  the appearance and behavior of the toggle, including size, color, and error handling.
-
-  The toggle field includes support for accessibility features and can display
-  error messages when validation fails. It is designed to be used within
-  Phoenix LiveView applications, enabling dynamic interactions.
-  """
-  use Phoenix.Component
-  alias Phoenix.HTML.Form
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `toggle_field` component is a customizable toggle switch input, often used for binary on/off
-  choices like enabling or disabling a feature.
-
-  ## Examples
-
-  ```elixir
-  <.toggle_field id="name1" color="danger" label="This is label" />
-
-  <.toggle_field id="name2" color="dark" label="This is label" size="extra_large"/>
-
-  <.toggle_field id="name3" color="warning" label="This is label" size="extra_small" checked={true} />
-
-  <.toggle_field id="name4" color="success" label="This is label" size="small"/>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "primary", doc: "Determines color theme"
-  attr :rounded, :string, default: "full", doc: "Determines border radius"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :label_class, :string, default: nil, doc: "Determines the label class"
-  attr :label_wrapper_class, :string, default: nil, doc: "Determines the label wrapper"
-  attr :description_class, :string, default: nil, doc: "Determines the label description"
-  attr :toggle_wrapper_class, :string, default: nil, doc: "Determines the toggle wrapper"
-
-  attr :toggle_field_wrapper_class, :string,
-    default: nil,
-    doc: "Determines the toggle field wrapper"
-
-  attr :toggle_base_class, :string, default: nil, doc: "Determines the toggle base"
-  attr :toggle_circle_class, :string, default: nil, doc: "Determines the toggle circle"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :checked, :boolean, doc: ""
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :reverse, :boolean, default: false, doc: "Switches the order of the element and label"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, default: nil
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form indeterminate readonly required title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec toggle_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def toggle_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> toggle_field()
-  end
-
-  def toggle_field(assigns) do
-    assigns =
-      assign_new(assigns, :checked, fn ->
-        Phoenix.HTML.Form.normalize_value("checkbox", assigns[:value])
-      end)
-
-    ~H"""
-    <div class={[
-      size_class(@size),
-      rounded_size(@rounded),
-      @class
-    ]}>
-      <div class={@label_wrapper_class}>
-        <.label for={@id} class={@label_class}>{@label}</.label>
-        <div :if={!is_nil(@description)} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-      <label
-        for={@id}
-        class={["flex items-center cursor-pointer select-none w-fit", @toggle_wrapper_class]}
-      >
-        <div class={["relative toggle-field-wrapper", @toggle_field_wrapper_class]}>
-          <input type="hidden" name={@name} value="false" disabled={@rest[:disabled]} />
-          <input
-            type="checkbox"
-            checked={@checked}
-            id={@id}
-            name={@name}
-            value="true"
-            class="peer sr-only"
-            role="switch"
-            aria-checked={to_string(@checked)}
-            {@rest}
-          />
-          <div class={[
-            "toggle-field-circle absolute transition-all ease-in-out duration-500 bg-white",
-            "top-1 peer-checked:translate-x-full left-1",
-            @toggle_circle_class
-          ]}>
-          </div>
-          <div class={[
-            "bg-[#F4F4F4] dark:bg-[#4B4B4B] transition-all ease-in-out duration-500 toggle-field-base",
-            color_class(@color),
-            @toggle_base_class
-          ]}>
-          </div>
-        </div>
-      </label>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def toggle_check(field, %{params: params, data: data} = _form) do
-    if params[Atom.to_string(field)] do
-      Form.normalize_value("checkbox", params[Atom.to_string(field)])
-    else
-      Map.get(data, field, false)
-    end
-  end
-
-  @doc type: :component
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["block text-sm font-semibold leading-6", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  @doc type: :component
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp rounded_size("extra_small"),
-    do: "[&_.toggle-field-base]:rounded-sm [&_.toggle-field-circle]:rounded-sm"
-
-  defp rounded_size("small"),
-    do: "[&_.toggle-field-base]:rounded [&_.toggle-field-circle]:rounded"
-
-  defp rounded_size("medium"),
-    do: "[&_.toggle-field-base]:rounded-md [&_.toggle-field-circle]:rounded-md"
-
-  defp rounded_size("large"),
-    do: "[&_.toggle-field-base]:rounded-lg [&_.toggle-field-circle]:rounded-lg"
-
-  defp rounded_size("extra_large"),
-    do: "[&_.toggle-field-base]:rounded-xl [&_.toggle-field-circle]:rounded-xl"
-
-  defp rounded_size("full"),
-    do: "[&_.toggle-field-base]:rounded-full [&_.toggle-field-circle]:rounded-full"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp size_class("extra_small") do
-    [
-      "[&_.toggle-field-base]:w-10 [&_.toggle-field-base]:h-6 [&_.toggle-field-circle]:size-4"
-    ]
-  end
-
-  defp size_class("small") do
-    [
-      "[&_.toggle-field-base]:w-12 [&_.toggle-field-base]:h-7 [&_.toggle-field-circle]:size-5"
-    ]
-  end
-
-  defp size_class("medium") do
-    [
-      "[&_.toggle-field-base]:w-14 [&_.toggle-field-base]:h-8 [&_.toggle-field-circle]:size-6"
-    ]
-  end
-
-  defp size_class("large") do
-    [
-      "[&_.toggle-field-base]:w-16 [&_.toggle-field-base]:h-9 [&_.toggle-field-circle]:size-7"
-    ]
-  end
-
-  defp size_class("extra_large") do
-    [
-      "[&_.toggle-field-base]:w-[72px] [&_.toggle-field-base]:h-10 [&_.toggle-field-circle]:size-8"
-    ]
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp color_class("base") do
-    [
-      "peer-checked:bg-[#e4e4e7] dark:peer-checked:bg-[#27272a]"
-    ]
-  end
-
-  defp color_class("white") do
-    [
-      "peer-checked:bg-white"
-    ]
-  end
-
-  defp color_class("natural") do
-    [
-      "peer-checked:bg-[#4B4B4B] dark:peer-checked:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_class("primary") do
-    [
-      "peer-checked:bg-[#007F8C] dark:peer-checked:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_class("secondary") do
-    [
-      "peer-checked:bg-[#266EF1] dark:peer-checked:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_class("success") do
-    [
-      "peer-checked:bg-[#0E8345] dark:peer-checked:bg-[#06C167]"
-    ]
-  end
-
-  defp color_class("warning") do
-    [
-      "peer-checked:bg-[#CA8D01] dark:peer-checked:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_class("danger") do
-    [
-      "peer-checked:bg-[#DE1135] dark:peer-checked:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_class("info") do
-    [
-      "peer-checked:bg-[#0B84BA] dark:peer-checked:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_class("misc") do
-    [
-      "peer-checked:bg-[#8750C5] dark:peer-checked:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_class("dawn") do
-    [
-      "peer-checked:bg-[#A86438] dark:peer-checked:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_class("silver") do
-    [
-      "peer-checked:bg-[#868686] dark:peer-checked:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_class("dark") do
-    [
-      "peer-checked:bg-[#282828]"
-    ]
-  end
-
-  defp color_class(params) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/tooltip.ex b/lib/geo_web/components/tooltip.ex
deleted file mode 100644
index bb08975..0000000
--- a/lib/geo_web/components/tooltip.ex
+++ /dev/null
@@ -1,532 +0,0 @@
-defmodule GeoWeb.Components.Tooltip do
-  @moduledoc """
-  A Tooltip GeoWeb.Components.Tooltip module for use in Phoenix applications.
-
-  This component allows you to display informative text when the user hovers over or focuses on an element.
-  It supports various customization options, including position, color themes, and sizes, allowing for
-  flexible integration within your UI.
-
-  ## Features
-
-  - Customizable tooltip position (top, bottom, left, right).
-  - Multiple color variants and styles for different contexts.
-  - Adjustable size and padding to fit design requirements.
-  - Support for additional CSS classes to further customize appearance.
-
-  Use this component to enhance user experience by providing contextual information without cluttering the interface.
-  """
-  use Phoenix.Component
-
-  @doc """
-  The `tooltip` component is used to display additional information when users hover over an element.
-
-  It provides a small box with text or content and is positioned around the target
-  element based on the specified `position`.
-
-  ## Examples
-
-  ```elixir
-  <.tooltip text="This is text" position="bottom">
-    <button class="p-2 bg-orange-700">
-      This is Tooltip a long text for bottom tooltip
-    </button>
-  </.tooltip>
-
-  <.tooltip text="This is text" color="warning" position="left">
-    <button class="p-2 bg-orange-700">This is Tooltip left</button>
-  </.tooltip>
-
-  <.tooltip text="Delete" color="light" position="left">
-    <button class="p-2 bg-red-500 text-white">
-      <.icon name="hero-trash" />
-    </button>
-  </.tooltip>
-
-  <.tooltip text="This is text" color="dark" position="right">
-    <button class="p-2 bg-orange-700">This is Tooltip right</button>
-  </.tooltip>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :position, :string, default: "top", doc: "Determines the element position"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :show_arrow, :boolean, default: true, doc: "Show or hide arrow of popover"
-
-  attr :size, :string,
-    default: "",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :space, :string, default: "", doc: "Space between items"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :width, :string, default: "fit", doc: "Determines the element width"
-  attr :wrapper_width, :string, default: "w-fit", doc: "Determines the parent element width"
-  attr :wrapper_class, :string, default: "w-fit", doc: "Determines the parent element class"
-  attr :arrow_class, :string, default: nil, doc: "Determines arrow class"
-  attr :padding, :string, default: "small", doc: "Determines padding for items"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :text_position, :string, default: "center", doc: "Determines the element' text position"
-  attr :text, :string, default: "", doc: "Determines element's text"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: false, doc: "Inner block that renders HEEx content"
-
-  def tooltip(assigns) do
-    ~H"""
-    <span class={["relative group", @wrapper_width, @wrapper_class]}>
-      {render_slot(@inner_block)}
-      <span
-        role="tooltip"
-        id={@id}
-        class={[
-          "absolute z-10 transition-all ease-in-out delay-100 duratio-500 w-full",
-          "invisible opacity-0 group-hover:visible group-hover:opacity-100",
-          space_class(@space),
-          color_variant(@variant, @color),
-          rounded_size(@rounded),
-          size_class(@size),
-          padding_size(@padding),
-          @variant == "bordered" || (@variant == "base" && border_class(@border)),
-          position_class(@position),
-          text_position(@text_position),
-          width_class(@width),
-          @font_weight,
-          @class
-        ]}
-        {@rest}
-      >
-        <span
-          :if={@show_arrow && @variant != "bordered" && @variant != "base"}
-          class={["block absolute size-[8px] bg-inherit rotate-45 -z-[1] tooltip-arrow", @arrow_class]}
-        >
-        </span>
-        {@text}
-      </span>
-    </span>
-    """
-  end
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp position_class("top") do
-    [
-      "bottom-full left-1/2 -translate-x-1/2 -translate-y-[4px]",
-      "[&>.tooltip-arrow]:-bottom-[4px] [&>.tooltip-arrow]:-translate-x-1/2 [&>.tooltip-arrow]:left-1/2"
-    ]
-  end
-
-  defp position_class("bottom") do
-    [
-      "top-full left-1/2 -translate-x-1/2 translate-y-[4px]",
-      "[&>.tooltip-arrow]:-top-[4px] [&>.tooltip-arrow]:-translate-x-1/2 [&>.tooltip-arrow]:left-1/2"
-    ]
-  end
-
-  defp position_class("left") do
-    [
-      "right-full top-1/2 -translate-y-1/2 -translate-x-[6px]",
-      "[&>.tooltip-arrow]:-right-[4px] [&>.tooltip-arrow]:translate-y-1/2 [&>.tooltip-arrow]:top-1/3"
-    ]
-  end
-
-  defp position_class("right") do
-    [
-      "left-full top-1/2 -translate-y-1/2 translate-x-[6px]",
-      "[&>.tooltip-arrow]:-left-[4px] [&>.tooltip-arrow]:translate-y-1/2 [&>.tooltip-arrow]:top-1/3"
-    ]
-  end
-
-  defp border_class("extra_small"), do: "border"
-
-  defp border_class("small"), do: "border-2"
-
-  defp border_class("medium"), do: "border-[3px]"
-
-  defp border_class("large"), do: "border-4"
-
-  defp border_class("extra_large"), do: "border-[5px]"
-
-  defp border_class("none"), do: nil
-
-  defp border_class(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs max-w-40"
-
-  defp size_class("small"), do: "text-sm max-w-44"
-
-  defp size_class("medium"), do: "text-base max-w-48"
-
-  defp size_class("large"), do: "text-lg max-w-28"
-
-  defp size_class("extra_large"), do: "text-xl max-w-32"
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp text_position("left"), do: "text-left"
-  defp text_position("right"), do: "text-right"
-  defp text_position("center"), do: "text-center"
-  defp text_position("justify"), do: "text-justify"
-  defp text_position("start"), do: "text-start"
-  defp text_position("end"), do: "text-end"
-  defp text_position(_), do: text_position("center")
-
-  defp width_class("extra_small"), do: "min-w-28"
-  defp width_class("small"), do: "min-w-32"
-  defp width_class("medium"), do: "min-w-36"
-  defp width_class("large"), do: "min-w-40"
-  defp width_class("extra_large"), do: "min-w-44"
-  defp width_class("double_large"), do: "min-w-48"
-  defp width_class("triple_large"), do: "min-w-52"
-  defp width_class("quadruple_large"), do: "min-w-56"
-  defp width_class("fit"), do: "min-w-fit"
-  defp width_class(params) when is_binary(params), do: params
-
-  defp padding_size("extra_small"), do: "p-1"
-
-  defp padding_size("small"), do: "p-2"
-
-  defp padding_size("medium"), do: "p-3"
-
-  defp padding_size("large"), do: "p-4"
-
-  defp padding_size("extra_large"), do: "p-5"
-
-  defp padding_size("none"), do: "p-0"
-
-  defp padding_size(params) when is_binary(params), do: params
-
-  defp space_class("extra_small"), do: "space-y-2"
-
-  defp space_class("small"), do: "space-y-3"
-
-  defp space_class("medium"), do: "space-y-4"
-
-  defp space_class("large"), do: "space-y-5"
-
-  defp space_class("extra_large"), do: "space-y-6"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _) do
-    [
-      "bg-white text-[#09090b] border-[#e4e4e7] shadow-sm",
-      "dark:bg-[#18181B] dark:text-[#FAFAFA] dark:border-[#27272a]"
-    ]
-  end
-
-  defp color_variant("default", "white") do
-    ["bg-white text-black"]
-  end
-
-  defp color_variant("default", "dark") do
-    ["bg-[#282828] text-white"]
-  end
-
-  defp color_variant("default", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "success") do
-    [
-      "bg-[#0E8345] text-white dark:bg-[#06C167] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black"
-    ]
-  end
-
-  defp color_variant("default", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("shadow", "natural") do
-    [
-      "bg-[#4B4B4B] text-white dark:bg-[#DDDDDD] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "primary") do
-    [
-      "bg-[#007F8C] text-white dark:bg-[#01B8CA] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary") do
-    [
-      "bg-[#266EF1] text-white dark:bg-[#6DAAFB] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "success") do
-    [
-      "bg-[#0E8345] text-white hover:bg-[#166C3B] dark:bg-[#06C167] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "warning") do
-    [
-      "bg-[#CA8D01] text-white dark:bg-[#FDC034] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "danger") do
-    [
-      "bg-[#DE1135] text-white dark:bg-[#FC7F79] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "info") do
-    [
-      "bg-[#0B84BA] text-white dark:bg-[#3EB7ED] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "misc") do
-    [
-      "bg-[#8750C5] text-white dark:bg-[#BA83F9] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn") do
-    [
-      "bg-[#A86438] text-white dark:bg-[#DB976B] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("shadow", "silver") do
-    [
-      "bg-[#868686] text-white dark:bg-[#A6A6A6] dark:text-black",
-      "shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)] dark:shadow-none"
-    ]
-  end
-
-  defp color_variant("bordered", "white") do
-    [
-      "bg-white text-black border-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark") do
-    [
-      "bg-[#282828] text-white border-[#727272]"
-    ]
-  end
-
-  defp color_variant("bordered", "natural") do
-    [
-      "text-[#282828] border-[#282828] bg-[#F3F3F3]",
-      "dark:text-[#E8E8E8] dark:border-[#E8E8E8] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary") do
-    [
-      "text-[#016974] border-[#016974] bg-[#E2F8FB]",
-      "dark:text-[#77D5E3] dark:border-[#77D5E3] dark:bg-[#002D33]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary") do
-    [
-      "text-[#175BCC] border-[#175BCC] bg-[#EFF4FE]",
-      "dark:text-[#A9C9FF] dark:border-[#A9C9FF] dark:bg-[#002661]"
-    ]
-  end
-
-  defp color_variant("bordered", "success") do
-    [
-      "text-[#166C3B] border-[#166C3B] bg-[#EAF6ED]",
-      "dark:text-[#7FD99A] dark:border-[#7FD99A] dark:bg-[#002F14]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning") do
-    [
-      "text-[#976A01] border-[#976A01] bg-[#FFF7E6]",
-      "dark:text-[#FDD067] dark:border-[#FDD067] dark:bg-[#322300]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger") do
-    [
-      "text-[#BB032A] border-[#BB032A] bg-[#FFF0EE]",
-      "dark:text-[#FFB2AB] dark:border-[#FFB2AB] dark:bg-[#520810]"
-    ]
-  end
-
-  defp color_variant("bordered", "info") do
-    [
-      "text-[#0B84BA] border-[#0B84BA] bg-[#E7F6FD]",
-      "dark:text-[#6EC9F2] dark:border-[#6EC9F2] dark:bg-[#03212F]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc") do
-    [
-      "text-[#653C94] border-[#653C94] bg-[#F6F0FE]",
-      "dark:text-[#CBA2FA] dark:border-[#CBA2FA] dark:bg-[#221431]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn") do
-    [
-      "text-[#7E4B2A] border-[#7E4B2A] bg-[#FBF2ED]",
-      "dark:text-[#E4B190] dark:border-[#E4B190] dark:bg-[#2A190E]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver") do
-    [
-      "text-[#727272] border-[#727272] bg-[#F3F3F3]",
-      "dark:text-[#BBBBBB] dark:border-[#BBBBBB] dark:bg-[#4B4B4B]"
-    ]
-  end
-
-  defp color_variant("gradient", "natural") do
-    [
-      "bg-gradient-to-br from-[#282828] to-[#727272] text-white",
-      "dark:from-[#A6A6A6] dark:to-[#FFFFFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "primary") do
-    [
-      "bg-gradient-to-br from-[#016974] to-[#01B8CA] text-white",
-      "dark:from-[#01B8CA] dark:to-[#B0E7EF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "secondary") do
-    [
-      "bg-gradient-to-br from-[#175BCC] to-[#6DAAFB] text-white",
-      "dark:from-[#6DAAFB] dark:to-[#CDDEFF] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "success") do
-    [
-      "bg-gradient-to-br from-[#166C3B] to-[#06C167] text-white",
-      "dark:from-[#06C167] dark:to-[#B1EAC2] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "warning") do
-    [
-      "bg-gradient-to-br from-[#976A01] to-[#FDC034] text-white",
-      "dark:from-[#FDC034] dark:to-[#FEDF99] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "danger") do
-    [
-      "bg-gradient-to-br from-[#BB032A] to-[#FC7F79] text-white",
-      "dark:from-[#FC7F79] dark:to-[#FFD2CD] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "info") do
-    [
-      "bg-gradient-to-br from-[#08638C] to-[#3EB7ED] text-white",
-      "dark:from-[#3EB7ED] dark:to-[#9FDBF6] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "misc") do
-    [
-      "bg-gradient-to-br from-[#653C94] to-[#BA83F9] text-white",
-      "dark:from-[#BA83F9] dark:to-[#DDC1FC] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "dawn") do
-    [
-      "bg-gradient-to-br from-[#7E4B2A] to-[#DB976B] text-white",
-      "dark:from-[#DB976B] dark:to-[#EDCBB5] dark:text-black"
-    ]
-  end
-
-  defp color_variant("gradient", "silver") do
-    [
-      "bg-gradient-to-br from-[#5E5E5E] to-[#A6A6A6] text-white",
-      "dark:from-[#868686] dark:to-[#BBBBBB] dark:text-black"
-    ]
-  end
-
-  defp color_variant(params, _) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/typography.ex b/lib/geo_web/components/typography.ex
deleted file mode 100644
index 5b794ea..0000000
--- a/lib/geo_web/components/typography.ex
+++ /dev/null
@@ -1,1226 +0,0 @@
-defmodule GeoWeb.Components.Typography do
-  @moduledoc """
-  The `GeoWeb.Components.Typography` module provides components for rendering
-  typographic elements in a Phoenix application.
-
-  This module offers various components such as headings (h1 to h6), paragraphs, and other
-  text-related HTML elements. Each component allows customization of attributes such
-  as `id`, `color`, `size`, and `font_weight`, enabling developers to create styled
-  text elements that align with the design requirements of their applications.
-
-  The components are designed to work seamlessly with HEEx templates, supporting slots for
-  rendering dynamic content.
-  """
-  use Phoenix.Component
-
-  @doc """
-  The `h1` component renders a large header text with customizable size, color, and other styling options.
-  It is used to display primary headings in your layout.
-
-  ## Examples
-
-  ```elixir
-  <.h1>Heading 1</.h1>
-  <.h1 color="primary" size="large">Primary Heading 1</.h1>
-  <.h1 class="custom-class" font_weight="font-bold">Bold Heading 1</.h1>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "quadruple_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  @spec h1(map()) :: Phoenix.LiveView.Rendered.t()
-  def h1(assigns) do
-    ~H"""
-    <h1
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </h1>
-    """
-  end
-
-  @doc """
-  The `h2` component renders a large header text with customizable size, color, and other styling options.
-  It is used to display primary headings in your layout.
-
-  ## Examples
-
-  ```elixir
-  <.h2>Heading 2</.h2>
-  <.h2 color="primary" size="large">Primary Heading 2</.h2>
-  <.h2 class="custom-class" font_weight="font-bold">Bold Heading 2</.h1>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "triple_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  @spec h2(map()) :: Phoenix.LiveView.Rendered.t()
-  def h2(assigns) do
-    ~H"""
-    <h2
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </h2>
-    """
-  end
-
-  @doc """
-  The `h1` component renders a large header text with customizable size, color, and other styling options.
-  It is used to display primary headings in your layout.
-
-  ## Examples
-
-  ```elixir
-  <.h3>Heading 3</.h3>
-  <.h3 color="primary" size="large">Primary Heading 3</.h3>
-  <.h3 class="custom-class" font_weight="font-bold">Bold Heading 3</.h3>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "double_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  @doc type: :component
-  def h3(assigns) do
-    ~H"""
-    <h3
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </h3>
-    """
-  end
-
-  @doc """
-  The `h4` component renders a large header text with customizable size, color, and other styling options.
-  It is used to display primary headings in your layout.
-
-  ## Examples
-
-  ```elixir
-  <.h4>Heading 4</.h4>
-  <.h4 color="primary" size="large">Primary Heading 4</.h4>
-  <.h4 class="custom-class" font_weight="font-bold">Bold Heading 4</.h4>
-  ```
-  """
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  @doc type: :component
-  def h4(assigns) do
-    ~H"""
-    <h4
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </h4>
-    """
-  end
-
-  @doc """
-  The `h1` component renders a large header text with customizable size, color, and other styling options.
-  It is used to display primary headings in your layout.
-
-  ## Examples
-
-  ```elixir
-  <.h5>Heading 5</.h5>
-  <.h5 color="primary" size="large">Primary Heading 5</.h5>
-  <.h5 class="custom-class" font_weight="font-bold">Bold Heading 5</.h5>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def h5(assigns) do
-    ~H"""
-    <h5
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </h5>
-    """
-  end
-
-  @doc """
-  The `h6` component renders a large header text with customizable size, color, and other styling options.
-  It is used to display primary headings in your layout.
-
-  ## Examples
-
-  ```elixir
-  <.h6>Heading 6</.h6>
-  <.h6 color="primary" size="large">Primary Heading 6</.h6>
-  <.h6 class="custom-class" font_weight="font-bold">Bold Heading 6</.h6>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def h6(assigns) do
-    ~H"""
-    <h6
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </h6>
-    """
-  end
-
-  @doc """
-  The `p` component is used to render a paragraph with customizable size, color, and other
-  styling options.
-
-  It helps in displaying regular text content within your layout.
-
-  ## Examples
-
-  ```elixir
-  <.p>Here is the paragraph.</.p>
-  <.p color="primary" size="large">This is a primary colored paragraph with a larger size.</.p>
-  <.p><.strong>This is Strong</.strong></.p>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def p(assigns) do
-    ~H"""
-    <p
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  @doc """
-  The `strong` component is used to emphasize important text by rendering it in a bold style.
-
-  It allows customization of color, size, and additional styles.
-
-  ## Examples
-
-  ```elixir
-  <.strong>This is Strong</.strong>
-  <.strong color="primary" size="large">
-    This is a primary colored strong text with a larger size.
-  </.strong>
-  <.strong class="custom-class">This is strong text with custom styling.</.strong>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-bold",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def strong(assigns) do
-    ~H"""
-    <strong
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </strong>
-    """
-  end
-
-  @doc """
-  The `em` component is used to emphasize text, rendering it in italics to indicate importance or stress.
-
-  It allows customization of color, size, and additional styles.
-
-  ## Examples
-
-  ```elixir
-  <.p><.em>This is Em</.em></.p>
-
-  <.em color="primary" size="large">
-    This is emphasized text with a primary color and larger size.
-  </.em>
-
-  <.em class="custom-class">
-    This is emphasized text with custom styling.
-  </.em>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def em(assigns) do
-    ~H"""
-    <em
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </em>
-    """
-  end
-
-  @doc """
-  The `dl` component represents a description list, typically used for name-value pairs such as
-  terms and definitions. It can be styled with custom colors, sizes, and other attributes.
-
-  ## Examples
-
-  ```elixir
-  <.dl>
-    <.dt>Coffee</.dt>
-    <.dd>Black hot drink</.dd>
-    <.dt>Milk</.dt>
-    <.dd>White cold drink</.dd>
-  </.dl>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def dl(assigns) do
-    ~H"""
-    <dl
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </dl>
-    """
-  end
-
-  @doc """
-  The `dt` component represents a term or name in a description list (`dl`). It is typically used in
-  conjunction with the `dd` component to display a description or definition for the term.
-
-  ## Examples
-
-  ```elixir
-  <.dt>Coffee</.dt>
-  <.dd>Black hot drink</.dd>
-  <.dt>Milk</.dt>
-  <.dd>White cold drink</.dd>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-bold",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def dt(assigns) do
-    ~H"""
-    <dt
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </dt>
-    """
-  end
-
-  @doc """
-  The `dd` component represents the description or definition of a term in a description
-  list (`dl`).
-
-  It is typically used with the `dt` component to create a complete term-description structure.
-
-  ## Examples
-
-  ```elixir
-  <.dl>
-    <.dt>Coffee</.dt>
-    <.dd>Black hot drink</.dd>
-    <.dt>Milk</.dt>
-    <.dd>White cold drink</.dd>
-  </.dl>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def dd(assigns) do
-    ~H"""
-    <dd
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </dd>
-    """
-  end
-
-  @doc """
-  The `figure` component is used to group content, such as an image and its caption,
-  as a single unit.
-
-  It is typically used in conjunction with the `figcaption` component to provide a caption
-  or description for the content.
-
-  ## Examples
-
-  ```elixir
-  <.figure>
-    <.p>Content of Figure</.p>
-
-    <.figcaption>
-      Someone famous in <cite title="Source Title">Source Title</cite>
-    </.figcaption>
-  </.figure>
-
-  <.figure size="large" color="secondary">
-    <img src="https://example.com/image.jpg" alt="Example image" />
-    <.figcaption>
-      A beautiful scenery captured during summer.
-    </.figcaption>
-  </.figure>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def figure(assigns) do
-    ~H"""
-    <figure
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </figure>
-    """
-  end
-
-  @doc """
-  The `figcaption` component is used to add a caption or description to a `figure` element.
-
-  It is typically placed inside a `figure` component to provide context or credit for
-  the enclosed content, such as an image or illustration.
-
-  ## Examples
-
-  ```elixir
-  <.figcaption>
-    Someone famous in <cite title="Source Title">Source Title</cite>
-  </.figcaption>
-
-  <.figure>
-    <img src="https://example.com/image.jpg" alt="Example image" />
-    <.figcaption>
-      A beautiful scenery captured during summer.
-    </.figcaption>
-  </.figure>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def figcaption(assigns) do
-    ~H"""
-    <figcaption
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </figcaption>
-    """
-  end
-
-  @doc """
-  The `abbr` component is used to display an abbreviation or acronym, providing a way to
-  define or explain the shortened text using the `title` attribute.
-
-  ## Examples
-
-  ```elixir
-  <.abbr title="HyperText Markup Language">HTML</.abbr>
-
-  <.p>
-    The standard language for creating web pages is
-    <.abbr title="HyperText Markup Language">HTML</.abbr>.
-  </.p>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def abbr(assigns) do
-    ~H"""
-    <abbr
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </abbr>
-    """
-  end
-
-  @doc """
-  The `mark` component is used to highlight text, typically by applying a background color to
-  the wrapped content.
-
-  ## Examples
-
-  ```elixir
-  <.p><.mark>This is highlighted text</.mark> inside a paragraph.</.p>
-
-  <.mark>Highlighted text with default styles.</.mark>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string,
-    default: "p-0.5 bg-rose-200",
-    doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def mark(assigns) do
-    ~H"""
-    <mark
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </mark>
-    """
-  end
-
-  @doc """
-  The `small` component is used for rendering small-sized text with various
-  styling options such as color, size, and weight.
-
-  ## Examples
-
-  ```elixir
-  <.small>This is small text</.small>
-
-  <.small color="primary" font_weight="font-bold">This is bold primary small text</.small>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def small(assigns) do
-    ~H"""
-    <small
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </small>
-    """
-  end
-
-  @doc """
-  The `s` component is used to render text with a strikethrough style, r
-  epresenting content that is no longer relevant or accurate.
-
-  ## Examples
-
-  ```elixir
-  <.p><.s>This is strikethrough text</.s></.p>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def s(assigns) do
-    ~H"""
-    <s
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </s>
-    """
-  end
-
-  @doc """
-  The `u` component is used to underline text content.
-
-  It allows customization through attributes such as color, size, and font weight.
-
-  ## Examples
-
-  ```elixir
-  <.p><.u>This is u</.u></.p>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def u(assigns) do
-    ~H"""
-    <u
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </u>
-    """
-  end
-
-  @doc """
-  The `cite` component is used to reference the title of a work or to indicate a citation.
-  It allows customization through attributes such as color, size, and font weight.
-
-  ## Examples
-
-  ```elixir
-  <.p>
-    <.cite>
-      Source Title
-    </.cite>
-  </.p>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def cite(assigns) do
-    ~H"""
-    <cite
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </cite>
-    """
-  end
-
-  @doc """
-  The `del` component is used to represent text that has been deleted or marked for removal.
-
-  It supports attributes for customizing color, size, and font weight.
-
-  ## Examples
-
-  ```elixir
-  <.del>This text is marked for deletion.</.del>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :color, :string, default: "inherit", doc: "Determines color theme"
-
-  attr :size, :string,
-    default: "medium",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :font_weight, :string,
-    default: "font-normal",
-    doc: "Determines custom class for the font weight"
-
-  attr :rest, :global,
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  def del(assigns) do
-    ~H"""
-    <del
-      id={@id}
-      class={[
-        color(@color),
-        size_class(@size),
-        @font_weight,
-        @class
-      ]}
-      {@rest}
-    >
-      {render_slot(@inner_block)}
-    </del>
-    """
-  end
-
-  defp color("base"), do: "text-[#09090b] dark:text-[#FAFAFA]"
-
-  defp color("white"), do: "text-white"
-
-  defp color("natural"), do: "text-[#4B4B4B] dark:text-[#DDDDDD]"
-
-  defp color("primary"), do: "text-[#007F8C] dark:text-[#01B8CA]"
-
-  defp color("secondary"), do: "text-[#266EF1] dark:text-[#6DAAFB]"
-
-  defp color("success"), do: "text-[#0E8345] dark:text-[#06C167]"
-
-  defp color("warning"), do: "text-[#CA8D01] dark:text-[#FDC034]"
-
-  defp color("danger"), do: "text-[#DE1135] dark:text-[#FC7F79]"
-
-  defp color("info"), do: "text-[#0B84BA] dark:text-[#3EB7ED]"
-
-  defp color("misc"), do: "text-[#8750C5] dark:text-[#BA83F9]"
-
-  defp color("dawn"), do: "text-[#A86438] dark:text-[#DB976B]"
-
-  defp color("silver"), do: "text-[#868686] dark:text-[#A6A6A6]"
-
-  defp color("dark"), do: "text-[#282828]"
-
-  defp color("inherit"), do: "text-inherit"
-
-  defp color(params) when is_binary(params), do: params
-
-  defp size_class("extra_small"), do: "text-xs"
-
-  defp size_class("small"), do: "text-sm"
-
-  defp size_class("medium"), do: "text-base"
-
-  defp size_class("large"), do: "text-lg"
-
-  defp size_class("extra_large"), do: "text-xl"
-
-  defp size_class("double_large"), do: "text-2xl"
-
-  defp size_class("triple_large"), do: "text-3xl"
-
-  defp size_class("quadruple_large"), do: "text-4xl"
-
-  defp size_class(params) when is_binary(params), do: params
-end
diff --git a/lib/geo_web/components/url_field.ex b/lib/geo_web/components/url_field.ex
deleted file mode 100644
index b33b052..0000000
--- a/lib/geo_web/components/url_field.ex
+++ /dev/null
@@ -1,1050 +0,0 @@
-defmodule GeoWeb.Components.UrlField do
-  @moduledoc """
-  GeoWeb.Components.UrlField, A component for rendering a URL input field in a Phoenix application.
-
-  This module provides a customizable URL input field with various options
-  for styling and layout, including the ability to display errors, descriptions,
-  and additional elements before or after the input. It supports both floating
-  label and standard label styles.
-
-  The `url_field/1` function can be used to render the URL input, and it accepts
-  attributes for customization such as color, border style, and size.
-
-  Additionally, helper functions for rendering labels and error messages are provided
-  to enhance usability and accessibility.
-  """
-  use Phoenix.Component
-  import GeoWeb.Components.Icon, only: [icon: 1]
-
-  @doc """
-  The `url_field` component is used to create an input field for URLs.
-  It supports various attributes for customization, including color, size, border style, and more.
-
-  ## Examples
-
-  ```elixir
-  <.url_field
-    name="website"
-    value="https://example.com"
-    label="Website URL"
-    description="Enter your website URL"
-    floating="outer"
-  />
-
-  <.url_field
-    name="social_media"
-    value="https://linkedin.com/in/username"
-    label="LinkedIn Profile"
-    color="success"
-    description="Enter your LinkedIn profile URL"
-    floating="inner"
-  >
-    <:start_section>
-      <.icon name="hero-link" class="size-4" />
-    </:start_section>
-  </.url_field>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  attr :color, :string, default: "natural", doc: "Determines color theme"
-  attr :border, :string, default: "extra_small", doc: "Determines border style"
-  attr :rounded, :string, default: "small", doc: "Determines the border radius"
-  attr :variant, :string, default: "base", doc: "Determines the style"
-  attr :description, :string, default: nil, doc: "Determines a short description"
-  attr :space, :string, default: "medium", doc: "Space between items"
-  attr :placeholder, :string, default: nil, doc: "Specifies text for placeholder"
-  attr :description_class, :string, default: "text-[12px]", doc: "Custom classes for description"
-  attr :label_class, :string, default: nil, doc: "Custom CSS class for the label styling"
-  attr :field_wrapper_class, :string, default: nil, doc: "Custom CSS class field wrapper"
-  attr :input_class, :string, default: nil, doc: "Custom CSS class for the input"
-
-  attr :flaoting_label_class, :string,
-    default: nil,
-    doc: "Custom CSS class for the flaoting label"
-
-  attr :description_wrapper_class, :string,
-    default: nil,
-    doc: "Custom classes for description wrapper"
-
-  attr :size, :string,
-    default: "extra_large",
-    doc:
-      "Determines the overall size of the elements, including padding, font size, and other items"
-
-  attr :ring, :boolean,
-    default: true,
-    doc:
-      "Determines a ring border on focused input, utilities for creating outline rings with box-shadows."
-
-  attr :floating, :string, default: "none", doc: "none, inner, outer"
-  attr :error_icon, :string, default: nil, doc: "Icon to be displayed alongside error messages"
-  attr :label, :string, default: nil, doc: "Specifies text for the label"
-
-  slot :start_section, required: false, doc: "Renders heex content in start of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  slot :end_section, required: false, doc: "Renders heex content in end of an element" do
-    attr :class, :string, doc: "Custom CSS class for additional styling"
-    attr :icon, :string, doc: "Icon displayed alongside of an item"
-  end
-
-  attr :errors, :list, default: [], doc: "List of error messages to be displayed"
-  attr :name, :any, doc: "Name of input"
-  attr :value, :any, doc: "Value of input"
-
-  attr :field, Phoenix.HTML.FormField, doc: "a form field struct retrieved from the form"
-
-  attr :rest, :global,
-    include: ~w(autocomplete disabled form list maxlength minlength pattern placeholder
-        readonly required size spellcheck inputmode title autofocus),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  @spec url_field(map()) :: Phoenix.LiveView.Rendered.t()
-  def url_field(%{field: %Phoenix.HTML.FormField{} = field} = assigns) do
-    errors = if Phoenix.Component.used_input?(field), do: field.errors, else: []
-
-    assigns
-    |> assign(field: nil, id: assigns.id || field.id)
-    |> assign(:errors, Enum.map(errors, &translate_error(&1)))
-    |> assign_new(:name, fn -> field.name end)
-    |> assign_new(:value, fn -> field.value end)
-    |> url_field()
-  end
-
-  def url_field(%{floating: floating} = assigns) when floating in ["inner", "outer"] do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.url-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@description} class={@description_class}>
-        {@description}
-      </div>
-      <div class={[
-        "url-field-wrapper transition-all ease-in-out duration-200 w-full flex flex-nowrap",
-        @errors != [] && "url-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-        <div class="relative w-full z-[2]">
-          <input
-            type="url"
-            name={@name}
-            id={@id}
-            value={@value}
-            class={[
-              "disabled:opacity-80 block w-full z-[2] focus:ring-0 placeholder:text-transparent pb-1 pt-2.5 px-2",
-              "text-[16px] sm:font-inherit appearance-none bg-transparent border-0 focus:outline-none peer",
-              @input_class
-            ]}
-            placeholder=" "
-            {@rest}
-          />
-
-          <label
-            class={[
-              "floating-label px-1 start-1 -z-[1] absolute text-xs duration-300 transform scale-75 origin-[0]",
-              variant_label_position(@floating),
-              @flaoting_label_class
-            ]}
-            for={@id}
-          >
-            {@label}
-          </label>
-        </div>
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  def url_field(assigns) do
-    ~H"""
-    <div class={[
-      color_variant(@variant, @color, @floating),
-      rounded_size(@rounded),
-      border_class(@border, @variant),
-      size_class(@size),
-      space_class(@space),
-      @ring && "[&_.url-field-wrapper]:focus-within:ring-[0.03rem]",
-      @class
-    ]}>
-      <div :if={@label || @description} class={["url-label-wrapper", @description_wrapper_class]}>
-        <.label :if={@label} for={@id} class={@label_class}>{@label}</.label>
-        <div :if={@description} class={@description_class}>
-          {@description}
-        </div>
-      </div>
-
-      <div class={[
-        "url-field-wrapper overflow-hidden transition-all ease-in-out duration-200 flex items-center flex-nowrap",
-        @errors != [] && "url-field-error",
-        @field_wrapper_class
-      ]}>
-        <div
-          :if={@start_section}
-          class={[
-            "flex items-center justify-center shrink-0 ps-2",
-            @start_section[:class]
-          ]}
-        >
-          {render_slot(@start_section)}
-        </div>
-
-        <input
-          type="url"
-          name={@name}
-          id={@id}
-          value={@value}
-          placeholder={@placeholder}
-          class={[
-            "flex-1 py-1 px-2 text-sm disabled:opacity-80 block w-full appearance-none",
-            "bg-transparent border-0 focus:outline-none focus:ring-0",
-            @input_class
-          ]}
-          {@rest}
-        />
-
-        <div
-          :if={@end_section}
-          class={["flex items-center justify-center shrink-0 pe-2", @end_section[:class]]}
-        >
-          {render_slot(@end_section)}
-        </div>
-      </div>
-
-      <.error :for={msg <- @errors} icon={@error_icon}>{msg}</.error>
-    </div>
-    """
-  end
-
-  attr :for, :string, default: nil, doc: "Specifies the form which is associated with"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp label(assigns) do
-    ~H"""
-    <label for={@for} class={["leading-5 font-semibold", @class]}>
-      {render_slot(@inner_block)}
-    </label>
-    """
-  end
-
-  attr :icon, :string, default: nil, doc: "Icon displayed alongside of an item"
-  slot :inner_block, required: true, doc: "Inner block that renders HEEx content"
-
-  defp error(assigns) do
-    ~H"""
-    <p class="mt-3 flex items-center gap-3 text-sm leading-6 text-rose-700">
-      <.icon :if={!is_nil(@icon)} name={@icon} class="shrink-0" />
-      {render_slot(@inner_block)}
-    </p>
-    """
-  end
-
-  defp variant_label_position("outer") do
-    [
-      "-translate-y-4 top-2 origin-[0] peer-focus:px-1 peer-placeholder-shown:scale-100",
-      "peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4",
-      "rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp variant_label_position("inner") do
-    [
-      "-translate-y-4 scale-75 top-4 origin-[0] peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0",
-      "peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
-    ]
-  end
-
-  defp size_class("extra_small") do
-    "[&_.url-field-wrapper_input]:h-8 [&_.url-field-wrapper>.url-field-icon]:size-3.5"
-  end
-
-  defp size_class("small") do
-    "[&_.url-field-wrapper_input]:h-9 [&_.url-field-wrapper>.url-field-icon]:size-4"
-  end
-
-  defp size_class("medium") do
-    "[&_.url-field-wrapper_input]:h-10 [&_.url-field-wrapper>.url-field-icon]:size-5"
-  end
-
-  defp size_class("large") do
-    "[&_.url-field-wrapper_input]:h-11 [&_.url-field-wrapper>.url-field-icon]:size-6"
-  end
-
-  defp size_class("extra_large") do
-    "[&_.url-field-wrapper_input]:h-12 [&_.url-field-wrapper>.url-field-icon]:size-7"
-  end
-
-  defp size_class(params) when is_binary(params), do: params
-
-  defp rounded_size("extra_small"), do: "[&_.url-field-wrapper]:rounded-sm"
-
-  defp rounded_size("small"), do: "[&_.url-field-wrapper]:rounded"
-
-  defp rounded_size("medium"), do: "[&_.url-field-wrapper]:rounded-md"
-
-  defp rounded_size("large"), do: "[&_.url-field-wrapper]:rounded-lg"
-
-  defp rounded_size("extra_large"), do: "[&_.url-field-wrapper]:rounded-xl"
-
-  defp rounded_size("full"), do: "[&_.url-field-wrapper]:rounded-full"
-
-  defp rounded_size("none"), do: nil
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp border_class(_, variant) when variant in ["default", "shadow", "transparent"],
-    do: nil
-
-  defp border_class("none", _), do: "[&_.url-field-wrapper]:border-0"
-  defp border_class("extra_small", _), do: "[&_.url-field-wrapper]:border"
-  defp border_class("small", _), do: "[&_.url-field-wrapper]:border-2"
-  defp border_class("medium", _), do: "[&_.url-field-wrapper]:border-[3px]"
-  defp border_class("large", _), do: "[&_.url-field-wrapper]:border-4"
-  defp border_class("extra_large", _), do: "[&_.url-field-wrapper]:border-[5px]"
-  defp border_class(params, _) when is_binary(params), do: params
-
-  defp space_class("none"), do: nil
-
-  defp space_class("extra_small"), do: "space-y-1"
-
-  defp space_class("small"), do: "space-y-1.5"
-
-  defp space_class("medium"), do: "space-y-2"
-
-  defp space_class("large"), do: "space-y-2.5"
-
-  defp space_class("extra_large"), do: "space-y-3"
-
-  defp space_class(params) when is_binary(params), do: params
-
-  defp color_variant("base", _, floating) do
-    [
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-white",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#18181B]",
-      "text-[#09090b] dark:text-[#FAFAFA] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#e4e4e7]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#27272a]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#09090b] dark:[&_.url-field-wrapper>input]:placeholder:text-[#FAFAFA]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#e4e4e7] dark:focus-within:[&_.url-field-wrapper]:ring-[#e4e4e7]",
-      "[&_.url-field-wrapper]:shadow-sm",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#27272a]"
-    ]
-  end
-
-  defp color_variant("outline", "natural", floating) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#DDDDDD]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#4B4B4B] dark:[&_.url-field-wrapper>input]:placeholder:text-[#DDDDDD]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.url-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "primary", floating) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#007F8C]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#01B8CA]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#007F8C] dark:[&_.url-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.url-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "secondary", floating) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#266EF1]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#6DAAFB]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#266EF1] dark:[&_.url-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.url-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "success", floating) do
-    [
-      "text-[#0E8345] dark:text-[#06C167] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#0E8345]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#06C167]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#0E8345] dark:[&_.url-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.url-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "warning", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#CA8D01]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#FDC034]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.url-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.url-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "danger", floating) do
-    [
-      "text-[#CA8D01] dark:text-[#FC7F79] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#CA8D01]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#FC7F79]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#CA8D01] dark:[&_.url-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.url-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#0B84BA]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#3EB7ED]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.url-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.url-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "misc", floating) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#8750C5]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#BA83F9]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#8750C5] dark:[&_.url-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.url-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "dawn", floating) do
-    [
-      "text-[#A86438] dark:text-[#DB976B] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#A86438]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#DB976B]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#A86438] dark:[&_.url-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.url-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("outline", "silver", floating) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#868686]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#A6A6A6]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#868686] dark:[&_.url-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#868686] dark:focus-within:[&_.url-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-white dark:[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("default", "white", floating) do
-    [
-      "[&_.url-field-wrapper]:bg-white text-[#3E3E3E]",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#3E3E3E] focus-within:[&_.url-field-wrapper]:ring-[#DADADA]",
-      floating == "outer" && "[&_.url-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("default", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#DDDDDD]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.url-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.url-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("default", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#007F8C]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#01B8CA]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.url-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.url-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("default", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#266EF1]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#6DAAFB]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.url-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.url-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("default", "success", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#0E8345]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#06C167]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.url-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.url-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("default", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FDC034]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.url-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.url-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("default", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#DE1135]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FC7F79]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.url-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.url-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("default", "info", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#3EB7ED]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.url-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.url-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("default", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#8750C5]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#BA83F9]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.url-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.url-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("default", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#A86438]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#DB976B]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.url-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.url-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("default", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#868686]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#A6A6A6]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#868686] dark:focus-within:[&_.url-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("default", "dark", floating) do
-    [
-      "[&_.url-field-wrapper]:bg-[#282828] text-[#282828] [&_.url-field-wrapper]:text-white",
-      "[&_.url-field-wrapper.url-field-error]:border-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white focus-within:[&_.url-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("bordered", "white", floating) do
-    [
-      "[&_.url-field-wrapper]:bg-white [&_.url-field-wrapper]:border-transparent text-[#3E3E3E]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#3E3E3E]",
-      floating == "outer" && "[&_.url-field-wrapper_.floating-label]:bg-white"
-    ]
-  end
-
-  defp color_variant("bordered", "natural", floating) do
-    [
-      "text-[#282828] dark:text-[#E8E8E8] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#282828]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#868686]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#282828] dark:[&_.url-field-wrapper>input]:placeholder:text-[#E8E8E8]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.url-field-wrapper]:ring-[#DDDDDD]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "primary", floating) do
-    [
-      "text-[#016974] dark:text-[#77D5E3] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#016974]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#E2F8FB]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#77D5E3]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#016974] dark:[&_.url-field-wrapper>input]:placeholder:text-[#77D5E3]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.url-field-wrapper]:ring-[#01B8CA]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "secondary", floating) do
-    [
-      "text-[#175BCC] dark:text-[#A9C9FF] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#175BCC]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#EFF4FE]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#002661]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#A9C9FF]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#175BCC] dark:[&_.url-field-wrapper>input]:placeholder:text-[#A9C9FF]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.url-field-wrapper]:ring-[#6DAAFB]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "success", floating) do
-    [
-      "text-[#166C3B] dark:text-[#7FD99A] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#166C3B]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#EAF6ED]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#002F14]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#7FD99A]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#166C3B] dark:[&_.url-field-wrapper>input]:placeholder:text-[#7FD99A]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.url-field-wrapper]:ring-[#06C167]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "warning", floating) do
-    [
-      "text-[#976A01] dark:text-[#FDD067] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#976A01]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FFF7E6]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#322300]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#FDD067]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#976A01] dark:[&_.url-field-wrapper>input]:placeholder:text-[#FDD067]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.url-field-wrapper]:ring-[#FDC034]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "danger", floating) do
-    [
-      "text-[#BB032A] dark:text-[#FFB2AB] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#BB032A]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FFF0EE]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#520810]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#FFB2AB]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#BB032A] dark:[&_.url-field-wrapper>input]:placeholder:text-[#FFB2AB]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.url-field-wrapper]:ring-[#FC7F79]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "info", floating) do
-    [
-      "text-[#0B84BA] dark:text-[#6EC9F2] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#0B84BA]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#E7F6FD]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#03212F]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#6EC9F2]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#0B84BA] dark:[&_.url-field-wrapper>input]:placeholder:text-[#6EC9F2]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.url-field-wrapper]:ring-[#3EB7ED]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "misc", floating) do
-    [
-      "text-[#653C94] dark:text-[#CBA2FA] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#653C94]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#F6F0FE]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#221431]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#CBA2FA]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#653C94] dark:[&_.url-field-wrapper>input]:placeholder:text-[#CBA2FA]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.url-field-wrapper]:ring-[#BA83F9]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dawn", floating) do
-    [
-      "text-[#7E4B2A] dark:text-[#E4B190] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#7E4B2A]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FBF2ED]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#2A190E]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#E4B190]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#7E4B2A] dark:[&_.url-field-wrapper>input]:placeholder:text-[#E4B190]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.url-field-wrapper]:ring-[#DB976B]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "silver", floating) do
-    [
-      "text-[#727272] dark:text-[#BBBBBB] [&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#727272]",
-      "[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#F3F3F3]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:border-[#BBBBBB]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#727272] dark:[&_.url-field-wrapper>input]:placeholder:text-[#BBBBBB]",
-      "focus-within:[&_.url-field-wrapper]:ring-[#868686] dark:focus-within:[&_.url-field-wrapper]:ring-[#A6A6A6]",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("bordered", "dark", floating) do
-    [
-      "[&_.url-field-wrapper]:bg-[#282828] text-[#282828] [&_.url-field-wrapper]:border-[#727272] text-white",
-      "[&_.url-field-wrapper>input]:placeholder:text-white focus-within:[&_.url-field-wrapper]:ring-[#727272]",
-      floating == "outer" && "[&_.url-field-wrapper_.floating-label]:bg-[#282828]"
-    ]
-  end
-
-  defp color_variant("shadow", "natural", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#DDDDDD]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#4B4B4B] dark:focus-within:[&_.url-field-wrapper]:ring-[#DDDDDD]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#4B4B4B] dark:[&_.url-field-wrapper_.floating-label]:bg-[#DDDDDD]"
-    ]
-  end
-
-  defp color_variant("shadow", "primary", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#007F8C]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#01B8CA]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#007F8C] dark:focus-within:[&_.url-field-wrapper]:ring-[#01B8CA]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,149,164,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,149,164,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#007F8C] dark:[&_.url-field-wrapper_.floating-label]:bg-[#01B8CA]"
-    ]
-  end
-
-  defp color_variant("shadow", "secondary", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#266EF1]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#6DAAFB]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#266EF1] dark:focus-within:[&_.url-field-wrapper]:ring-[#6DAAFB]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(6,139,238,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(6,139,238,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#266EF1] dark:[&_.url-field-wrapper_.floating-label]:bg-[#6DAAFB]"
-    ]
-  end
-
-  defp color_variant("shadow", "success", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#0E8345]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#06C167]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0E8345] dark:focus-within:[&_.url-field-wrapper]:ring-[#06C167]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(0,154,81,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(0,154,81,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#0E8345] dark:[&_.url-field-wrapper_.floating-label]:bg-[#06C167]"
-    ]
-  end
-
-  defp color_variant("shadow", "warning", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#CA8D01]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FDC034]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#CA8D01] dark:focus-within:[&_.url-field-wrapper]:ring-[#FDC034]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(252,176,1,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(252,176,1,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#CA8D01] dark:[&_.url-field-wrapper_.floating-label]:bg-[#FDC034]"
-    ]
-  end
-
-  defp color_variant("shadow", "danger", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#DE1135]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#FC7F79]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#DE1135] dark:focus-within:[&_.url-field-wrapper]:ring-[#FC7F79]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(248,52,70,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(248,52,70,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#DE1135] dark:[&_.url-field-wrapper_.floating-label]:bg-[#FC7F79]"
-    ]
-  end
-
-  defp color_variant("shadow", "info", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#0B84BA]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#3EB7ED]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#0B84BA] dark:focus-within:[&_.url-field-wrapper]:ring-[#3EB7ED]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(14,165,233,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(14,165,233,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#0B84BA] dark:[&_.url-field-wrapper_.floating-label]:bg-[#3EB7ED]"
-    ]
-  end
-
-  defp color_variant("shadow", "misc", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#8750C5]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#BA83F9]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#8750C5] dark:focus-within:[&_.url-field-wrapper]:ring-[#BA83F9]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(169,100,247,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(169,100,247,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#8750C5] dark:[&_.url-field-wrapper_.floating-label]:bg-[#BA83F9]"
-    ]
-  end
-
-  defp color_variant("shadow", "dawn", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#A86438]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#DB976B]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#A86438] dark:focus-within:[&_.url-field-wrapper]:ring-[#DB976B]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(210,125,70,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(210,125,70,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#A86438] dark:[&_.url-field-wrapper_.floating-label]:bg-[#DB976B]"
-    ]
-  end
-
-  defp color_variant("shadow", "silver", floating) do
-    [
-      "text-black dark:text-white [&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#868686]",
-      "dark:[&_.url-field-wrapper:not(:has(.url-field-error))]:bg-[#A6A6A6]",
-      "[&_.url-field-wrapper.url-field-error]:bg-rose-700",
-      "[&_.url-field-wrapper>input]:placeholder:text-white dark:[&_.url-field-wrapper>input]:placeholder:text-black",
-      "[&_.url-field-wrapper>input]:text-white dark:[&_.url-field-wrapper>input]:text-black",
-      "focus-within:[&_.url-field-wrapper]:ring-[#868686] dark:focus-within:[&_.url-field-wrapper]:ring-[#A6A6A6]",
-      "[&_.url-field-wrapper]:shadow-[0px_4px_6px_-4px_rgba(134,134,134,0.5)] [&_.url-field-wrapper]:shadow-[0px_10px_15px_-3px_rgba(134,134,134,0.5)]",
-      "dark:[&_.url-field-wrapper]:shadow-none",
-      floating == "outer" &&
-        "[&_.url-field-wrapper_.floating-label]:bg-[#868686] dark:[&_.url-field-wrapper_.floating-label]:bg-[#A6A6A6]"
-    ]
-  end
-
-  defp color_variant("transparent", "natural", _) do
-    [
-      "text-[#4B4B4B] dark:text-[#DDDDDD]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#4B4B4B]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#4363EC]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "primary", _) do
-    [
-      "text-[#007F8C] dark:text-[#01B8CA]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#007F8C]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#01B8CA]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "secondary", _) do
-    [
-      "text-[#266EF1] dark:text-[#6DAAFB]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#266EF1]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#6DAAFB]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "success", _) do
-    [
-      "text-[#0E8345] dark:text-[#06C167]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#0E8345]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#06C167]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "warning", _) do
-    [
-      "text-[#CA8D01] dark:text-[#FDC034]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#CA8D01]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#FDC034]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "danger", _) do
-    [
-      "text-[#DE1135] dark:text-[#FC7F79]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#DE1135]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#FC7F79]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "info", _) do
-    [
-      "text-[#0B84BA] dark:text-[#3EB7ED]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#0B84BA]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#3EB7ED]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "misc", _) do
-    [
-      "text-[#8750C5] dark:text-[#BA83F9]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#8750C5]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#BA83F9]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "dawn", _) do
-    [
-      "text-[#A86438] dark:text-[#DB976B]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#A86438]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#DB976B]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant("transparent", "silver", _) do
-    [
-      "text-[#868686] dark:text-[#A6A6A6]",
-      "[&_.url-field-wrapper>input]:placeholder:text-[#868686]",
-      "dark:[&_.url-field-wrapper>input]:placeholder:text-[#A6A6A6]",
-      "focus-within:[&_.url-field-wrapper]:ring-transparent"
-    ]
-  end
-
-  defp color_variant(params, _, _) when is_binary(params), do: params
-
-  defp translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # However the error messages in our forms and APIs are generated
-    # dynamically, so we need to translate them by calling Gettext
-    # with our gettext backend as first argument. Translations are
-    # available in the errors.po file (as we use the "errors" domain).
-    if count = opts[:count] do
-      Gettext.dngettext(GeoWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(GeoWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git a/lib/geo_web/components/video.ex b/lib/geo_web/components/video.ex
deleted file mode 100644
index 8018e82..0000000
--- a/lib/geo_web/components/video.ex
+++ /dev/null
@@ -1,274 +0,0 @@
-defmodule GeoWeb.Components.Video do
-  @moduledoc """
-  A customizable video component for Phoenix applications, designed to simplify the
-  embedding of HTML5 video elements with support for various configurations.
-
-  This module ensures compatibility with web standards, addressing common issues such
-  as CORS when handling video and subtitle files. It provides a robust interface for
-  rendering videos with customizable features, including thumbnail images, aspect ratios, and caption styling.
-
-  The component is built to enhance user experience by offering options for caption display
-  and responsive design, catering to various screen sizes and user preferences.
-
-  By leveraging this module, developers can efficiently integrate video playback into their
-  Phoenix applications while maintaining flexibility in design and functionality.
-  """
-  use Phoenix.Component
-  use Gettext, backend: GeoWeb.Gettext
-
-  # https://stackoverflow.com/questions/15268604/html5-track-captions-not-showing/15268843#15268843
-  # https://www.w3schools.com/tags/tag_video.asp
-
-  # Ensure your video and .vtt files are served from the same web server.
-  # Browsers may block captions if accessed from the local file system or different servers.
-  # Use a local web server for testing to avoid these issues.
-
-  # 1. When you access an HTML file directly from your file system (file:/// protocol),
-  #     browsers often have restrictions that prevent the proper functioning of certain features,
-  #     including the <track> tag. The captions might not display properly in such cases.
-
-  # 2. The video source and .vtt file should generally be hosted on the same server to avoid cross-origin issues (CORS).
-  #     If they are on different servers,
-  #     you may need to ensure proper CORS headers are set up to allow the browser to access the caption file.
-
-  # Important:  Adding a Base64-encoded subtitle directly to a video won't cause a CORS issue,
-  #             so you can use it in your components even if the subtitle is not from the same origin.
-
-  @doc """
-  The `video` component is used to embed a video element with various customization options
-  like thumbnail, caption, size, and control settings.
-
-  It supports multiple sources and subtitles.
-
-  ## Examples
-
-  ```elixir
-  <div class="space-y-5 max-w-xl mx-auto py-10">
-    <.video
-      ratio="video"
-      caption_background="danger"
-      caption_size="quadruple_large"
-      thumbnail="https://example.com/uploads/title_anouncement.jpg"
-      controls
-    >
-      <:source
-        src="https://example.com/flower.webm"
-        type="video/webm"
-      />
-      <:source
-        src="https://example.com/flower.mp4"
-        type="video/mp4"
-      />
-      <:track
-        label="English"
-        kind="captions"
-        srclang="en"
-        src="data:text/vtt;base64,V0VCVlRUCgowMDowMDowMC4wMDAgLS0+IDAwOjAwOjAwLjk5OSAgbGluZTo4MCUKSGlsZHkhCgowMDowMDowMS4wMDAgLS0+IDAwOjAwOjAxLjQ5OSBsaW5lOjgwJQpIb3cgYXJlIHlvdT8KCjAwOjAwOjAxLjUwMCAtLT4gMDA6MDA6MDIuOTk5IGxpbmU6ODAlClRlbGwgbWUsIGlzIHRoZSA8dT5sb3JkIG9mIHRoZSB1bml2ZXJzZTwvdT4gaW4/CgowMDowMDowMy4wMDAgLS0+IDAwOjAwOjA0LjI5OSBsaW5lOjgwJQpZZXMsIGhlJ3MgaW4gLSBpbiBhIGJhZCBodW1vcgoKMDA6MDA6MDQuMzAwIC0tPiAwMDowMDowNi4wMDAgbGluZTo4MCUKU29tZWJ5IG11c3QndmUgc3RvbGVuIHRoZSBjcm93biBqZXdlbHMK"
-        default
-      />
-    </.video>
-  </div>
-  ```
-  """
-  @doc type: :component
-  attr :id, :string,
-    default: nil,
-    doc: "A unique identifier is used to manage state and interaction"
-
-  attr :thumbnail, :string, default: nil, doc: "Determines thumbnail for video"
-  attr :width, :string, default: "full", doc: "Determines the element width"
-  attr :rounded, :string, default: "", doc: "Determines the border radius"
-  attr :height, :string, default: "auto", doc: "Determines the element width"
-  attr :caption_size, :string, default: "extra_small", doc: "Determines the video caption size"
-
-  attr :caption_background, :string,
-    default: "dark",
-    doc: "Determines the video caption bakcground"
-
-  attr :caption_opacity, :string, default: "solid", doc: "Determines the video caption opacity"
-  attr :ratio, :string, default: "auto", doc: "Determines the video ratio"
-  attr :class, :string, default: nil, doc: "Custom CSS class for additional styling"
-
-  attr :rest, :global,
-    include: ~w(controls autoplay loop muted preload),
-    doc:
-      "Global attributes can define defaults which are merged with attributes provided by the caller"
-
-  slot :source, required: true, doc: "Determines media source" do
-    attr :src, :string, required: true, doc: "Media link"
-    attr :type, :string, required: true, doc: "Media type"
-  end
-
-  slot :track, required: false, doc: "Determines media subtitle" do
-    attr :src, :string, required: true, doc: "Subtitle link"
-    attr :label, :string, doc: "Subtitle Lable"
-    attr :kind, :string, doc: "Subtitle Kind"
-    attr :srclang, :string, doc: "Subtitle language link or symbol"
-    attr :default, :boolean, doc: "Determines whether this subtitle is default"
-  end
-
-  def video(assigns) do
-    ~H"""
-    <video
-      id={@id}
-      class={[
-        width_class(@width),
-        height_class(@height),
-        rounded_size(@rounded),
-        aspect_ratio(@ratio),
-        caption_size(@caption_size),
-        caption_background(@caption_background),
-        caption_opacity(@caption_opacity),
-        @class
-      ]}
-      poster={@thumbnail}
-      {@rest}
-    >
-      <source :for={source <- @source} src={source.src} type={source.type} />
-
-      <track
-        :for={track <- @track}
-        src={track.src}
-        label={track.label || "English"}
-        kind={track.kind || "subtitles"}
-        srclang={track.srclang || "en"}
-        default={track.default}
-      />
-
-      {gettext("Your browser does not support the video tag.")}
-    </video>
-    """
-  end
-
-  defp width_class("extra_small"), do: "w-3/12"
-  defp width_class("small"), do: "w-5/12"
-  defp width_class("medium"), do: "w-6/12"
-  defp width_class("large"), do: "w-9/12"
-  defp width_class("extra_large"), do: "w-11/12"
-  defp width_class("full"), do: "w-full"
-  defp width_class(params) when is_binary(params), do: params
-  defp width_class(_), do: width_class("full")
-
-  defp height_class("extra_small"), do: "h-60"
-  defp height_class("small"), do: "h-64"
-  defp height_class("medium"), do: "h-72"
-  defp height_class("large"), do: "h-80"
-  defp height_class("extra_large"), do: "h-96"
-  defp height_class("auto"), do: "h-auto"
-  defp height_class(params) when is_binary(params), do: params
-  defp height_class(_), do: height_class("auto")
-
-  defp aspect_ratio("auto"), do: "aspect-auto"
-  defp aspect_ratio("square"), do: "aspect-square"
-  defp aspect_ratio("video"), do: "aspect-video"
-  defp aspect_ratio("4:3"), do: "aspect-[4/3]"
-  defp aspect_ratio("3:2"), do: "aspect-[3/2]"
-  defp aspect_ratio("21:9"), do: "aspect-[21/9]"
-  defp aspect_ratio(params) when is_binary(params), do: params
-  defp aspect_ratio(_), do: aspect_ratio("video")
-
-  defp rounded_size("extra_small"), do: "rounded-sm"
-
-  defp rounded_size("small"), do: "rounded"
-
-  defp rounded_size("medium"), do: "rounded-md"
-
-  defp rounded_size("large"), do: "rounded-lg"
-
-  defp rounded_size("extra_large"), do: "rounded-xl"
-
-  defp rounded_size(params) when is_binary(params), do: params
-
-  defp caption_size("extra_small"), do: "[&::cue]:text-xs"
-  defp caption_size("small"), do: "[&::cue]:text-sm"
-  defp caption_size("medium"), do: "[&::cue]:text-base"
-  defp caption_size("large"), do: "[&::cue]:text-lg"
-  defp caption_size("extra_large"), do: "[&::cue]:text-xl"
-  defp caption_size("double_large"), do: "[&::cue]:text-2xl"
-  defp caption_size("triple_large"), do: "[&::cue]:text-3xl"
-  defp caption_size("quadruple_large"), do: "[&::cue]:text-4xl"
-  defp caption_size(params) when is_binary(params), do: params
-
-  defp caption_background("base"),
-    do: "[&::cue]:bg-[linear-gradient(#fff,#fff)] [&::cue]:text-[#09090b]"
-
-  defp caption_background("white"),
-    do: "[&::cue]:bg-[linear-gradient(#fff,#fff)] [&::cue]:text-[#282828]"
-
-  defp caption_background("natural"),
-    do: "[&::cue]:bg-[linear-gradient(#4B4B4B,#4B4B4B)] [&::cue]:text-white"
-
-  defp caption_background("primary"),
-    do: "[&::cue]:bg-[linear-gradient(#007F8C,#007F8C)] [&::cue]:text-white"
-
-  defp caption_background("secondary"),
-    do: "[&::cue]:bg-[linear-gradient(#266EF1,#266EF1)] [&::cue]:text-white"
-
-  defp caption_background("success"),
-    do: "[&::cue]:bg-[linear-gradient(#0E8345,#0E8345)] [&::cue]:text-[#282828]"
-
-  defp caption_background("warning"),
-    do: "[&::cue]:bg-[linear-gradient(#CA8D01,#CA8D01)] [&::cue]:text-[#282828]"
-
-  defp caption_background("danger"),
-    do: "[&::cue]:bg-[linear-gradient(#DE1135,#DE1135)] [&::cue]:text-[#282828]"
-
-  defp caption_background("info"),
-    do: "[&::cue]:bg-[linear-gradient(#0B84BA,#0B84BA)] [&::cue]:text-[#282828]"
-
-  defp caption_background("misc"),
-    do: "[&::cue]:bg-[linear-gradient(#8750C5,#8750C5)] [&::cue]:text-[#282828]"
-
-  defp caption_background("dawn"),
-    do: "[&::cue]:bg-[linear-gradient(#A86438,#A86438)] [&::cue]:text-[#282828]"
-
-  defp caption_background("silver"),
-    do: "[&::cue]:bg-[linear-gradient(#868686,#868686)] [&::cue]:text-[#282828]"
-
-  defp caption_background("dark"),
-    do: "[&::cue]:bg-[linear-gradient(#282828,#282828)] [&::cue]:text-white"
-
-  defp caption_background(params) when is_binary(params), do: params
-
-  defp caption_opacity("transparent") do
-    "[&::cue]:bg-opacity-10"
-  end
-
-  defp caption_opacity("translucent") do
-    "bg-opacity-20"
-  end
-
-  defp caption_opacity("semi_transparent") do
-    "[&::cue]:bg-opacity-30"
-  end
-
-  defp caption_opacity("lightly_tinted") do
-    "[&::cue]:bg-opacity-40"
-  end
-
-  defp caption_opacity("tinted") do
-    "[&::cue]:bg-opacity-50"
-  end
-
-  defp caption_opacity("semi_opaque") do
-    "[&::cue]:bg-opacity-60"
-  end
-
-  defp caption_opacity("opaque") do
-    "[&::cue]:bg-opacity-70"
-  end
-
-  defp caption_opacity("heavily_tinted") do
-    "[&::cue]:bg-opacity-80"
-  end
-
-  defp caption_opacity("almost_solid") do
-    "[&::cue]:bg-opacity-90"
-  end
-
-  defp caption_opacity("solid") do
-    "[&::cue]:bg-opacity-100"
-  end
-
-  defp caption_opacity(params) when is_binary(params), do: params
-end
